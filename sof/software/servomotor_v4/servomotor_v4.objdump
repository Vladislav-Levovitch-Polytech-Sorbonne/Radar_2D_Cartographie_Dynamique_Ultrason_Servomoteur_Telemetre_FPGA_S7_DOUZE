
servomotor_v4.elf:     file format elf32-littlenios2
servomotor_v4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005efc memsz 0x00005efc flags r-x
    LOAD off    0x00006f1c vaddr 0x00005f1c paddr 0x00007a84 align 2**12
         filesz 0x00001b68 memsz 0x00001b68 flags rw-
    LOAD off    0x000095ec vaddr 0x000095ec paddr 0x000095ec align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005c20  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000cc  00005e50  00005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b68  00005f1c  00007a84  00006f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  000095ec  000095ec  000095ec  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00009740  00009740  00008a84  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000000  08000000  00008a84  2**0
                  CONTENTS
  8 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00008a84  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00008a84  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a30  00000000  00000000  00008aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000166c5  00000000  00000000  000094d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006022  00000000  00000000  0001fb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006a30  00000000  00000000  00025bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000015a0  00000000  00000000  0002c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029cc  00000000  00000000  0002db90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004ada  00000000  00000000  0003055c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00035038  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000680  00000000  00000000  00035048  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00037dbd  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  00037dc0  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00037dc5  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00037dc6  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00037dc7  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00037dcb  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00037dcf  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00037dd3  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00037ddc  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  00037de5  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000f  00000000  00000000  00037dee  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003d  00000000  00000000  00037dfd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000fc64f  00000000  00000000  00037e3a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00005e50 l    d  .rodata	00000000 .rodata
00005f1c l    d  .rwdata	00000000 .rwdata
000095ec l    d  .bss	00000000 .bss
00009740 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../servomotor_v4_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0000040c l     F .text	00000008 __fp_unlock
00000420 l     F .text	0000019c __sinit.part.1
000005bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00005f1c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000030ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000031c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000031ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000032e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000033c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000034b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007a74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003904 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003a40 l     F .text	00000034 alt_dev_reg
000068f0 l     O .rwdata	00001060 JTAG_UART
00007950 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
000079ac l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
00007a08 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004334 l     F .text	0000020c altera_avalon_jtag_uart_irq
00004540 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004b78 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004db8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005218 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005378 l     F .text	0000003c alt_get_errno
000053b4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00009614 g     O .bss	00000004 alt_instruction_exception_handler
00002e7c g     F .text	00000054 _isatty_r
000035cc g     F .text	0000007c alt_main
000002a0 g     F .text	000000c0 _puts_r
00009640 g     O .bss	00000100 alt_irq
00002ba4 g     F .text	00000060 _lseek_r
00007a84 g       *ABS*	00000000 __flash_rwdata_start
00009740 g       *ABS*	00000000 __alt_heap_start
00002158 g     F .text	0000005c __sseek
0000076c g     F .text	00000010 __sinit
000005c4 g     F .text	00000078 __sfmoreglue
0000366c g     F .text	00000024 __malloc_unlock
00001844 g     F .text	0000015c memmove
00000754 g     F .text	00000018 _cleanup
000057a0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002e20 g     F .text	0000005c _fstat_r
000095f8 g     O .bss	00000004 errno
000020d4 g     F .text	00000008 __seofread
00009600 g     O .bss	00000004 alt_argv
0000fa4c g       *ABS*	00000000 _gp
00006770 g     O .rwdata	00000180 alt_fd_list
000057c4 g     F .text	00000090 alt_find_dev
000016fc g     F .text	00000148 memcpy
00000414 g     F .text	0000000c _cleanup_r
000052fc g     F .text	0000007c alt_io_redirect
00005e50 g       *ABS*	00000000 __DTOR_END__
00000360 g     F .text	00000014 puts
00005a20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004738 g     F .text	0000021c altera_avalon_jtag_uart_read
00002fc8 g     F .text	00000064 .hidden __udivsi3
0000331c g     F .text	000000ac isatty
000095f4 g     O .bss	00000004 __malloc_top_pad
000007bc g     F .text	000004c8 __sfvwrite_r
0000202c g     F .text	00000054 _sbrk_r
00002dc0 g     F .text	00000060 _read_r
00007a6c g     O .rwdata	00000004 alt_max_fd
000023c4 g     F .text	000000f0 _fclose_r
00002740 g     F .text	00000030 fflush
000095f0 g     O .bss	00000004 __malloc_max_sbrked_mem
000034f0 g     F .text	000000dc lseek
00007a4c g     O .rwdata	00000004 _global_impure_ptr
00001ac8 g     F .text	00000564 _realloc_r
00009740 g       *ABS*	00000000 __bss_end
00005128 g     F .text	000000f0 alt_iic_isr_register
00005698 g     F .text	00000108 alt_tick
0000078c g     F .text	00000018 __fp_lock_all
000050dc g     F .text	0000004c alt_ic_irq_enabled
000055fc g     F .text	0000009c alt_alarm_stop
00009608 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00006748 g     O .rwdata	00000028 alt_dev_null
00004d98 g     F .text	00000020 alt_dcache_flush_all
00007a84 g       *ABS*	00000000 __ram_rwdata_end
00007a64 g     O .rwdata	00000008 alt_dev_list
00003940 g     F .text	00000100 write
00005f1c g       *ABS*	00000000 __ram_rodata_end
00003228 g     F .text	000000b8 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000302c g     F .text	00000058 .hidden __umodsi3
00009740 g       *ABS*	00000000 end
00004274 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00005e50 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00004bf0 g     F .text	0000007c alt_avalon_timer_sc_init
00004954 g     F .text	00000224 altera_avalon_jtag_uart_write
0000077c g     F .text	00000004 __sfp_lock_acquire
00001618 g     F .text	000000e4 memchr
00002894 g     F .text	00000310 _free_r
00005c9c g     F .text	00000180 __call_exitprocs
00007a54 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0000960c g     O .bss	00000004 _alt_tick_rate
00009610 g     O .bss	00000004 _alt_nticks
000036cc g     F .text	00000104 read
00003aac g     F .text	00000664 alt_sys_init
00005b84 g     F .text	00000118 __register_exitproc
000045e0 g     F .text	00000068 altera_avalon_jtag_uart_close
00003084 g     F .text	00000028 .hidden __mulsi3
00005f1c g       *ABS*	00000000 __ram_rwdata_start
00005e50 g       *ABS*	00000000 __ram_rodata_start
00009618 g     O .bss	00000028 __malloc_current_mallinfo
00004110 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000595c g     F .text	000000c4 alt_get_fd
00002370 g     F .text	00000054 _close_r
00005b08 g     F .text	0000007c memcmp
000041d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00009740 g       *ABS*	00000000 __alt_stack_base
00004220 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000221c g     F .text	00000154 __swsetup_r
0000063c g     F .text	00000118 __sfp
00006340 g     O .rwdata	00000408 __malloc_av_
00000788 g     F .text	00000004 __sinit_lock_release
00002080 g     F .text	00000054 __sread
00005854 g     F .text	00000108 alt_find_file
00004df4 g     F .text	000000a4 alt_dev_llist_insert
00003648 g     F .text	00000024 __malloc_lock
00003854 g     F .text	000000b0 sbrk
000026e4 g     F .text	0000005c _fflush_r
000095ec g       *ABS*	00000000 __bss_start
000019a0 g     F .text	00000128 memset
0000026c g     F .text	00000034 main
00009604 g     O .bss	00000004 alt_envp
000095ec g     O .bss	00000004 __malloc_max_total_mem
00004170 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000021b4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000024b4 g     F .text	00000014 fclose
00000e0c g     F .text	0000080c _malloc_r
00007a70 g     O .rwdata	00000004 alt_errno
00000c84 g     F .text	000000c4 _fwalk
00002ed0 g     F .text	00000084 .hidden __divsi3
00002770 g     F .text	00000124 _malloc_trim_r
00005e50 g       *ABS*	00000000 __CTOR_END__
00005e50 g       *ABS*	00000000 __flash_rodata_start
00005e50 g       *ABS*	00000000 __DTOR_LIST__
00003a74 g     F .text	00000038 alt_irq_init
000037d0 g     F .text	00000084 alt_release_fd
00005abc g     F .text	00000014 atexit
000021bc g     F .text	00000060 _write_r
00007a50 g     O .rwdata	00000004 _impure_ptr
000095fc g     O .bss	00000004 alt_argc
000024c8 g     F .text	0000021c __sflush_r
00004ef8 g     F .text	00000060 _do_dtors
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
000007a4 g     F .text	00000018 __fp_unlock_all
00007a5c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004f78 g     F .text	00000050 alt_ic_isr_register
00007a84 g       *ABS*	00000000 _edata
00009740 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
00004648 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
00005050 g     F .text	0000008c alt_ic_irq_disable
000020dc g     F .text	0000007c __swrite
00007a58 g     O .rwdata	00000004 __malloc_trim_threshold
00005ad0 g     F .text	00000038 exit
00000d48 g     F .text	000000c4 _fwalk_reent
00002f54 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000780 g     F .text	00000004 __sfp_lock_release
00005e1c g     F .text	00000034 _exit
00004c6c g     F .text	0000012c alt_alarm_start
00002c04 g     F .text	000001bc __smakebuf_r
00000374 g     F .text	00000098 strlen
000054a0 g     F .text	0000015c open
00004f58 g     F .text	00000020 alt_icache_flush_all
00007a78 g     O .rwdata	00000004 alt_priority_mask
00004fc8 g     F .text	00000088 alt_ic_irq_enable
00007a7c g     O .rwdata	00000008 alt_alarm_list
00004e98 g     F .text	00000060 _do_ctors
000030e8 g     F .text	000000d8 close
00003430 g     F .text	00000084 alt_load
00000784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10a59004 	addi	r2,r2,-27072
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10a59004 	addi	r2,r2,-27072
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6f217 	ldw	r2,-25656(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6f217 	ldw	r2,-25656(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6be9314 	ori	gp,gp,64076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	10a57b14 	ori	r2,r2,38380

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18e5d014 	ori	r3,r3,38720

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00034300 	call	3430 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00035cc0 	call	35cc <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000268>

0000026c <main>:
 */

#include <stdio.h>

int main()
{
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
     27c:	01000034 	movhi	r4,0
     280:	21179404 	addi	r4,r4,24144
     284:	00003600 	call	360 <puts>

  return 0;
     288:	0005883a 	mov	r2,zero
}
     28c:	e037883a 	mov	sp,fp
     290:	dfc00117 	ldw	ra,4(sp)
     294:	df000017 	ldw	fp,0(sp)
     298:	dec00204 	addi	sp,sp,8
     29c:	f800283a 	ret

000002a0 <_puts_r>:
     2a0:	defff604 	addi	sp,sp,-40
     2a4:	dc000715 	stw	r16,28(sp)
     2a8:	2021883a 	mov	r16,r4
     2ac:	2809883a 	mov	r4,r5
     2b0:	dc400815 	stw	r17,32(sp)
     2b4:	dfc00915 	stw	ra,36(sp)
     2b8:	2823883a 	mov	r17,r5
     2bc:	00003740 	call	374 <strlen>
     2c0:	10c00044 	addi	r3,r2,1
     2c4:	d8800115 	stw	r2,4(sp)
     2c8:	00800034 	movhi	r2,0
     2cc:	10979904 	addi	r2,r2,24164
     2d0:	d8800215 	stw	r2,8(sp)
     2d4:	00800044 	movi	r2,1
     2d8:	d8800315 	stw	r2,12(sp)
     2dc:	00800084 	movi	r2,2
     2e0:	dc400015 	stw	r17,0(sp)
     2e4:	d8c00615 	stw	r3,24(sp)
     2e8:	dec00415 	stw	sp,16(sp)
     2ec:	d8800515 	stw	r2,20(sp)
     2f0:	80000226 	beq	r16,zero,2fc <_puts_r+0x5c>
     2f4:	80800e17 	ldw	r2,56(r16)
     2f8:	10001426 	beq	r2,zero,34c <_puts_r+0xac>
     2fc:	81400217 	ldw	r5,8(r16)
     300:	2880030b 	ldhu	r2,12(r5)
     304:	10c8000c 	andi	r3,r2,8192
     308:	1800061e 	bne	r3,zero,324 <_puts_r+0x84>
     30c:	29001917 	ldw	r4,100(r5)
     310:	00f7ffc4 	movi	r3,-8193
     314:	10880014 	ori	r2,r2,8192
     318:	20c6703a 	and	r3,r4,r3
     31c:	2880030d 	sth	r2,12(r5)
     320:	28c01915 	stw	r3,100(r5)
     324:	d9800404 	addi	r6,sp,16
     328:	8009883a 	mov	r4,r16
     32c:	00007bc0 	call	7bc <__sfvwrite_r>
     330:	1000091e 	bne	r2,zero,358 <_puts_r+0xb8>
     334:	00800284 	movi	r2,10
     338:	dfc00917 	ldw	ra,36(sp)
     33c:	dc400817 	ldw	r17,32(sp)
     340:	dc000717 	ldw	r16,28(sp)
     344:	dec00a04 	addi	sp,sp,40
     348:	f800283a 	ret
     34c:	8009883a 	mov	r4,r16
     350:	000076c0 	call	76c <__sinit>
     354:	003fe906 	br	2fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70002fc>
     358:	00bfffc4 	movi	r2,-1
     35c:	003ff606 	br	338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000338>

00000360 <puts>:
     360:	00800034 	movhi	r2,0
     364:	109e9404 	addi	r2,r2,31312
     368:	200b883a 	mov	r5,r4
     36c:	11000017 	ldw	r4,0(r2)
     370:	00002a01 	jmpi	2a0 <_puts_r>

00000374 <strlen>:
     374:	208000cc 	andi	r2,r4,3
     378:	10002026 	beq	r2,zero,3fc <strlen+0x88>
     37c:	20800007 	ldb	r2,0(r4)
     380:	10002026 	beq	r2,zero,404 <strlen+0x90>
     384:	2005883a 	mov	r2,r4
     388:	00000206 	br	394 <strlen+0x20>
     38c:	10c00007 	ldb	r3,0(r2)
     390:	18001826 	beq	r3,zero,3f4 <strlen+0x80>
     394:	10800044 	addi	r2,r2,1
     398:	10c000cc 	andi	r3,r2,3
     39c:	183ffb1e 	bne	r3,zero,38c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700038c>
     3a0:	10c00017 	ldw	r3,0(r2)
     3a4:	01ffbff4 	movhi	r7,65279
     3a8:	39ffbfc4 	addi	r7,r7,-257
     3ac:	00ca303a 	nor	r5,zero,r3
     3b0:	01a02074 	movhi	r6,32897
     3b4:	19c7883a 	add	r3,r3,r7
     3b8:	31a02004 	addi	r6,r6,-32640
     3bc:	1946703a 	and	r3,r3,r5
     3c0:	1986703a 	and	r3,r3,r6
     3c4:	1800091e 	bne	r3,zero,3ec <strlen+0x78>
     3c8:	10800104 	addi	r2,r2,4
     3cc:	10c00017 	ldw	r3,0(r2)
     3d0:	19cb883a 	add	r5,r3,r7
     3d4:	00c6303a 	nor	r3,zero,r3
     3d8:	28c6703a 	and	r3,r5,r3
     3dc:	1986703a 	and	r3,r3,r6
     3e0:	183ff926 	beq	r3,zero,3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003c8>
     3e4:	00000106 	br	3ec <strlen+0x78>
     3e8:	10800044 	addi	r2,r2,1
     3ec:	10c00007 	ldb	r3,0(r2)
     3f0:	183ffd1e 	bne	r3,zero,3e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003e8>
     3f4:	1105c83a 	sub	r2,r2,r4
     3f8:	f800283a 	ret
     3fc:	2005883a 	mov	r2,r4
     400:	003fe706 	br	3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003a0>
     404:	0005883a 	mov	r2,zero
     408:	f800283a 	ret

0000040c <__fp_unlock>:
     40c:	0005883a 	mov	r2,zero
     410:	f800283a 	ret

00000414 <_cleanup_r>:
     414:	01400034 	movhi	r5,0
     418:	2948f104 	addi	r5,r5,9156
     41c:	0000d481 	jmpi	d48 <_fwalk_reent>

00000420 <__sinit.part.1>:
     420:	defff704 	addi	sp,sp,-36
     424:	00c00034 	movhi	r3,0
     428:	dfc00815 	stw	ra,32(sp)
     42c:	ddc00715 	stw	r23,28(sp)
     430:	dd800615 	stw	r22,24(sp)
     434:	dd400515 	stw	r21,20(sp)
     438:	dd000415 	stw	r20,16(sp)
     43c:	dcc00315 	stw	r19,12(sp)
     440:	dc800215 	stw	r18,8(sp)
     444:	dc400115 	stw	r17,4(sp)
     448:	dc000015 	stw	r16,0(sp)
     44c:	18c10504 	addi	r3,r3,1044
     450:	24000117 	ldw	r16,4(r4)
     454:	20c00f15 	stw	r3,60(r4)
     458:	2080bb04 	addi	r2,r4,748
     45c:	00c000c4 	movi	r3,3
     460:	20c0b915 	stw	r3,740(r4)
     464:	2080ba15 	stw	r2,744(r4)
     468:	2000b815 	stw	zero,736(r4)
     46c:	05c00204 	movi	r23,8
     470:	00800104 	movi	r2,4
     474:	2025883a 	mov	r18,r4
     478:	b80d883a 	mov	r6,r23
     47c:	81001704 	addi	r4,r16,92
     480:	000b883a 	mov	r5,zero
     484:	80000015 	stw	zero,0(r16)
     488:	80000115 	stw	zero,4(r16)
     48c:	80000215 	stw	zero,8(r16)
     490:	8080030d 	sth	r2,12(r16)
     494:	80001915 	stw	zero,100(r16)
     498:	8000038d 	sth	zero,14(r16)
     49c:	80000415 	stw	zero,16(r16)
     4a0:	80000515 	stw	zero,20(r16)
     4a4:	80000615 	stw	zero,24(r16)
     4a8:	00019a00 	call	19a0 <memset>
     4ac:	05800034 	movhi	r22,0
     4b0:	94400217 	ldw	r17,8(r18)
     4b4:	05400034 	movhi	r21,0
     4b8:	05000034 	movhi	r20,0
     4bc:	04c00034 	movhi	r19,0
     4c0:	b5882004 	addi	r22,r22,8320
     4c4:	ad483704 	addi	r21,r21,8412
     4c8:	a5085604 	addi	r20,r20,8536
     4cc:	9cc86d04 	addi	r19,r19,8628
     4d0:	85800815 	stw	r22,32(r16)
     4d4:	85400915 	stw	r21,36(r16)
     4d8:	85000a15 	stw	r20,40(r16)
     4dc:	84c00b15 	stw	r19,44(r16)
     4e0:	84000715 	stw	r16,28(r16)
     4e4:	00800284 	movi	r2,10
     4e8:	8880030d 	sth	r2,12(r17)
     4ec:	00800044 	movi	r2,1
     4f0:	b80d883a 	mov	r6,r23
     4f4:	89001704 	addi	r4,r17,92
     4f8:	000b883a 	mov	r5,zero
     4fc:	88000015 	stw	zero,0(r17)
     500:	88000115 	stw	zero,4(r17)
     504:	88000215 	stw	zero,8(r17)
     508:	88001915 	stw	zero,100(r17)
     50c:	8880038d 	sth	r2,14(r17)
     510:	88000415 	stw	zero,16(r17)
     514:	88000515 	stw	zero,20(r17)
     518:	88000615 	stw	zero,24(r17)
     51c:	00019a00 	call	19a0 <memset>
     520:	94000317 	ldw	r16,12(r18)
     524:	00800484 	movi	r2,18
     528:	8c400715 	stw	r17,28(r17)
     52c:	8d800815 	stw	r22,32(r17)
     530:	8d400915 	stw	r21,36(r17)
     534:	8d000a15 	stw	r20,40(r17)
     538:	8cc00b15 	stw	r19,44(r17)
     53c:	8080030d 	sth	r2,12(r16)
     540:	00800084 	movi	r2,2
     544:	80000015 	stw	zero,0(r16)
     548:	80000115 	stw	zero,4(r16)
     54c:	80000215 	stw	zero,8(r16)
     550:	80001915 	stw	zero,100(r16)
     554:	8080038d 	sth	r2,14(r16)
     558:	80000415 	stw	zero,16(r16)
     55c:	80000515 	stw	zero,20(r16)
     560:	80000615 	stw	zero,24(r16)
     564:	b80d883a 	mov	r6,r23
     568:	000b883a 	mov	r5,zero
     56c:	81001704 	addi	r4,r16,92
     570:	00019a00 	call	19a0 <memset>
     574:	00800044 	movi	r2,1
     578:	84000715 	stw	r16,28(r16)
     57c:	85800815 	stw	r22,32(r16)
     580:	85400915 	stw	r21,36(r16)
     584:	85000a15 	stw	r20,40(r16)
     588:	84c00b15 	stw	r19,44(r16)
     58c:	90800e15 	stw	r2,56(r18)
     590:	dfc00817 	ldw	ra,32(sp)
     594:	ddc00717 	ldw	r23,28(sp)
     598:	dd800617 	ldw	r22,24(sp)
     59c:	dd400517 	ldw	r21,20(sp)
     5a0:	dd000417 	ldw	r20,16(sp)
     5a4:	dcc00317 	ldw	r19,12(sp)
     5a8:	dc800217 	ldw	r18,8(sp)
     5ac:	dc400117 	ldw	r17,4(sp)
     5b0:	dc000017 	ldw	r16,0(sp)
     5b4:	dec00904 	addi	sp,sp,36
     5b8:	f800283a 	ret

000005bc <__fp_lock>:
     5bc:	0005883a 	mov	r2,zero
     5c0:	f800283a 	ret

000005c4 <__sfmoreglue>:
     5c4:	defffc04 	addi	sp,sp,-16
     5c8:	dc800215 	stw	r18,8(sp)
     5cc:	2825883a 	mov	r18,r5
     5d0:	dc000015 	stw	r16,0(sp)
     5d4:	01401a04 	movi	r5,104
     5d8:	2021883a 	mov	r16,r4
     5dc:	913fffc4 	addi	r4,r18,-1
     5e0:	dfc00315 	stw	ra,12(sp)
     5e4:	dc400115 	stw	r17,4(sp)
     5e8:	00030840 	call	3084 <__mulsi3>
     5ec:	8009883a 	mov	r4,r16
     5f0:	11401d04 	addi	r5,r2,116
     5f4:	1023883a 	mov	r17,r2
     5f8:	0000e0c0 	call	e0c <_malloc_r>
     5fc:	1021883a 	mov	r16,r2
     600:	10000726 	beq	r2,zero,620 <__sfmoreglue+0x5c>
     604:	11000304 	addi	r4,r2,12
     608:	10000015 	stw	zero,0(r2)
     60c:	14800115 	stw	r18,4(r2)
     610:	11000215 	stw	r4,8(r2)
     614:	89801a04 	addi	r6,r17,104
     618:	000b883a 	mov	r5,zero
     61c:	00019a00 	call	19a0 <memset>
     620:	8005883a 	mov	r2,r16
     624:	dfc00317 	ldw	ra,12(sp)
     628:	dc800217 	ldw	r18,8(sp)
     62c:	dc400117 	ldw	r17,4(sp)
     630:	dc000017 	ldw	r16,0(sp)
     634:	dec00404 	addi	sp,sp,16
     638:	f800283a 	ret

0000063c <__sfp>:
     63c:	defffb04 	addi	sp,sp,-20
     640:	dc000015 	stw	r16,0(sp)
     644:	04000034 	movhi	r16,0
     648:	841e9304 	addi	r16,r16,31308
     64c:	dcc00315 	stw	r19,12(sp)
     650:	2027883a 	mov	r19,r4
     654:	81000017 	ldw	r4,0(r16)
     658:	dfc00415 	stw	ra,16(sp)
     65c:	dc800215 	stw	r18,8(sp)
     660:	20800e17 	ldw	r2,56(r4)
     664:	dc400115 	stw	r17,4(sp)
     668:	1000021e 	bne	r2,zero,674 <__sfp+0x38>
     66c:	00004200 	call	420 <__sinit.part.1>
     670:	81000017 	ldw	r4,0(r16)
     674:	2480b804 	addi	r18,r4,736
     678:	047fffc4 	movi	r17,-1
     67c:	91000117 	ldw	r4,4(r18)
     680:	94000217 	ldw	r16,8(r18)
     684:	213fffc4 	addi	r4,r4,-1
     688:	20000a16 	blt	r4,zero,6b4 <__sfp+0x78>
     68c:	8080030f 	ldh	r2,12(r16)
     690:	10000c26 	beq	r2,zero,6c4 <__sfp+0x88>
     694:	80c01d04 	addi	r3,r16,116
     698:	00000206 	br	6a4 <__sfp+0x68>
     69c:	18bfe60f 	ldh	r2,-104(r3)
     6a0:	10000826 	beq	r2,zero,6c4 <__sfp+0x88>
     6a4:	213fffc4 	addi	r4,r4,-1
     6a8:	1c3ffd04 	addi	r16,r3,-12
     6ac:	18c01a04 	addi	r3,r3,104
     6b0:	247ffa1e 	bne	r4,r17,69c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700069c>
     6b4:	90800017 	ldw	r2,0(r18)
     6b8:	10001d26 	beq	r2,zero,730 <__sfp+0xf4>
     6bc:	1025883a 	mov	r18,r2
     6c0:	003fee06 	br	67c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700067c>
     6c4:	00bfffc4 	movi	r2,-1
     6c8:	8080038d 	sth	r2,14(r16)
     6cc:	00800044 	movi	r2,1
     6d0:	8080030d 	sth	r2,12(r16)
     6d4:	80001915 	stw	zero,100(r16)
     6d8:	80000015 	stw	zero,0(r16)
     6dc:	80000215 	stw	zero,8(r16)
     6e0:	80000115 	stw	zero,4(r16)
     6e4:	80000415 	stw	zero,16(r16)
     6e8:	80000515 	stw	zero,20(r16)
     6ec:	80000615 	stw	zero,24(r16)
     6f0:	01800204 	movi	r6,8
     6f4:	000b883a 	mov	r5,zero
     6f8:	81001704 	addi	r4,r16,92
     6fc:	00019a00 	call	19a0 <memset>
     700:	8005883a 	mov	r2,r16
     704:	80000c15 	stw	zero,48(r16)
     708:	80000d15 	stw	zero,52(r16)
     70c:	80001115 	stw	zero,68(r16)
     710:	80001215 	stw	zero,72(r16)
     714:	dfc00417 	ldw	ra,16(sp)
     718:	dcc00317 	ldw	r19,12(sp)
     71c:	dc800217 	ldw	r18,8(sp)
     720:	dc400117 	ldw	r17,4(sp)
     724:	dc000017 	ldw	r16,0(sp)
     728:	dec00504 	addi	sp,sp,20
     72c:	f800283a 	ret
     730:	01400104 	movi	r5,4
     734:	9809883a 	mov	r4,r19
     738:	00005c40 	call	5c4 <__sfmoreglue>
     73c:	90800015 	stw	r2,0(r18)
     740:	103fde1e 	bne	r2,zero,6bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70006bc>
     744:	00800304 	movi	r2,12
     748:	98800015 	stw	r2,0(r19)
     74c:	0005883a 	mov	r2,zero
     750:	003ff006 	br	714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000714>

00000754 <_cleanup>:
     754:	00800034 	movhi	r2,0
     758:	109e9304 	addi	r2,r2,31308
     75c:	11000017 	ldw	r4,0(r2)
     760:	01400034 	movhi	r5,0
     764:	2948f104 	addi	r5,r5,9156
     768:	0000d481 	jmpi	d48 <_fwalk_reent>

0000076c <__sinit>:
     76c:	20800e17 	ldw	r2,56(r4)
     770:	10000126 	beq	r2,zero,778 <__sinit+0xc>
     774:	f800283a 	ret
     778:	00004201 	jmpi	420 <__sinit.part.1>

0000077c <__sfp_lock_acquire>:
     77c:	f800283a 	ret

00000780 <__sfp_lock_release>:
     780:	f800283a 	ret

00000784 <__sinit_lock_acquire>:
     784:	f800283a 	ret

00000788 <__sinit_lock_release>:
     788:	f800283a 	ret

0000078c <__fp_lock_all>:
     78c:	00800034 	movhi	r2,0
     790:	109e9404 	addi	r2,r2,31312
     794:	11000017 	ldw	r4,0(r2)
     798:	01400034 	movhi	r5,0
     79c:	29416f04 	addi	r5,r5,1468
     7a0:	0000c841 	jmpi	c84 <_fwalk>

000007a4 <__fp_unlock_all>:
     7a4:	00800034 	movhi	r2,0
     7a8:	109e9404 	addi	r2,r2,31312
     7ac:	11000017 	ldw	r4,0(r2)
     7b0:	01400034 	movhi	r5,0
     7b4:	29410304 	addi	r5,r5,1036
     7b8:	0000c841 	jmpi	c84 <_fwalk>

000007bc <__sfvwrite_r>:
     7bc:	30800217 	ldw	r2,8(r6)
     7c0:	10006726 	beq	r2,zero,960 <__sfvwrite_r+0x1a4>
     7c4:	28c0030b 	ldhu	r3,12(r5)
     7c8:	defff404 	addi	sp,sp,-48
     7cc:	dd400715 	stw	r21,28(sp)
     7d0:	dd000615 	stw	r20,24(sp)
     7d4:	dc000215 	stw	r16,8(sp)
     7d8:	dfc00b15 	stw	ra,44(sp)
     7dc:	df000a15 	stw	fp,40(sp)
     7e0:	ddc00915 	stw	r23,36(sp)
     7e4:	dd800815 	stw	r22,32(sp)
     7e8:	dcc00515 	stw	r19,20(sp)
     7ec:	dc800415 	stw	r18,16(sp)
     7f0:	dc400315 	stw	r17,12(sp)
     7f4:	1880020c 	andi	r2,r3,8
     7f8:	2821883a 	mov	r16,r5
     7fc:	202b883a 	mov	r21,r4
     800:	3029883a 	mov	r20,r6
     804:	10002726 	beq	r2,zero,8a4 <__sfvwrite_r+0xe8>
     808:	28800417 	ldw	r2,16(r5)
     80c:	10002526 	beq	r2,zero,8a4 <__sfvwrite_r+0xe8>
     810:	1880008c 	andi	r2,r3,2
     814:	a4400017 	ldw	r17,0(r20)
     818:	10002a26 	beq	r2,zero,8c4 <__sfvwrite_r+0x108>
     81c:	05a00034 	movhi	r22,32768
     820:	0027883a 	mov	r19,zero
     824:	0025883a 	mov	r18,zero
     828:	b5bf0004 	addi	r22,r22,-1024
     82c:	980d883a 	mov	r6,r19
     830:	a809883a 	mov	r4,r21
     834:	90004626 	beq	r18,zero,950 <__sfvwrite_r+0x194>
     838:	900f883a 	mov	r7,r18
     83c:	b480022e 	bgeu	r22,r18,848 <__sfvwrite_r+0x8c>
     840:	01e00034 	movhi	r7,32768
     844:	39ff0004 	addi	r7,r7,-1024
     848:	80800917 	ldw	r2,36(r16)
     84c:	81400717 	ldw	r5,28(r16)
     850:	103ee83a 	callr	r2
     854:	00805a0e 	bge	zero,r2,9c0 <__sfvwrite_r+0x204>
     858:	a0c00217 	ldw	r3,8(r20)
     85c:	98a7883a 	add	r19,r19,r2
     860:	90a5c83a 	sub	r18,r18,r2
     864:	1885c83a 	sub	r2,r3,r2
     868:	a0800215 	stw	r2,8(r20)
     86c:	103fef1e 	bne	r2,zero,82c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700082c>
     870:	0005883a 	mov	r2,zero
     874:	dfc00b17 	ldw	ra,44(sp)
     878:	df000a17 	ldw	fp,40(sp)
     87c:	ddc00917 	ldw	r23,36(sp)
     880:	dd800817 	ldw	r22,32(sp)
     884:	dd400717 	ldw	r21,28(sp)
     888:	dd000617 	ldw	r20,24(sp)
     88c:	dcc00517 	ldw	r19,20(sp)
     890:	dc800417 	ldw	r18,16(sp)
     894:	dc400317 	ldw	r17,12(sp)
     898:	dc000217 	ldw	r16,8(sp)
     89c:	dec00c04 	addi	sp,sp,48
     8a0:	f800283a 	ret
     8a4:	800b883a 	mov	r5,r16
     8a8:	a809883a 	mov	r4,r21
     8ac:	000221c0 	call	221c <__swsetup_r>
     8b0:	1000ee1e 	bne	r2,zero,c6c <__sfvwrite_r+0x4b0>
     8b4:	80c0030b 	ldhu	r3,12(r16)
     8b8:	a4400017 	ldw	r17,0(r20)
     8bc:	1880008c 	andi	r2,r3,2
     8c0:	103fd61e 	bne	r2,zero,81c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700081c>
     8c4:	1880004c 	andi	r2,r3,1
     8c8:	1000421e 	bne	r2,zero,9d4 <__sfvwrite_r+0x218>
     8cc:	0039883a 	mov	fp,zero
     8d0:	0025883a 	mov	r18,zero
     8d4:	90001a26 	beq	r18,zero,940 <__sfvwrite_r+0x184>
     8d8:	1880800c 	andi	r2,r3,512
     8dc:	84c00217 	ldw	r19,8(r16)
     8e0:	10002126 	beq	r2,zero,968 <__sfvwrite_r+0x1ac>
     8e4:	982f883a 	mov	r23,r19
     8e8:	94c09636 	bltu	r18,r19,b44 <__sfvwrite_r+0x388>
     8ec:	1881200c 	andi	r2,r3,1152
     8f0:	1000a11e 	bne	r2,zero,b78 <__sfvwrite_r+0x3bc>
     8f4:	81000017 	ldw	r4,0(r16)
     8f8:	b80d883a 	mov	r6,r23
     8fc:	e00b883a 	mov	r5,fp
     900:	00018440 	call	1844 <memmove>
     904:	80c00217 	ldw	r3,8(r16)
     908:	81000017 	ldw	r4,0(r16)
     90c:	9005883a 	mov	r2,r18
     910:	1ce7c83a 	sub	r19,r3,r19
     914:	25cf883a 	add	r7,r4,r23
     918:	84c00215 	stw	r19,8(r16)
     91c:	81c00015 	stw	r7,0(r16)
     920:	a0c00217 	ldw	r3,8(r20)
     924:	e0b9883a 	add	fp,fp,r2
     928:	90a5c83a 	sub	r18,r18,r2
     92c:	18a7c83a 	sub	r19,r3,r2
     930:	a4c00215 	stw	r19,8(r20)
     934:	983fce26 	beq	r19,zero,870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000870>
     938:	80c0030b 	ldhu	r3,12(r16)
     93c:	903fe61e 	bne	r18,zero,8d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70008d8>
     940:	8f000017 	ldw	fp,0(r17)
     944:	8c800117 	ldw	r18,4(r17)
     948:	8c400204 	addi	r17,r17,8
     94c:	003fe106 	br	8d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70008d4>
     950:	8cc00017 	ldw	r19,0(r17)
     954:	8c800117 	ldw	r18,4(r17)
     958:	8c400204 	addi	r17,r17,8
     95c:	003fb306 	br	82c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700082c>
     960:	0005883a 	mov	r2,zero
     964:	f800283a 	ret
     968:	81000017 	ldw	r4,0(r16)
     96c:	80800417 	ldw	r2,16(r16)
     970:	11005a36 	bltu	r2,r4,adc <__sfvwrite_r+0x320>
     974:	85c00517 	ldw	r23,20(r16)
     978:	95c05836 	bltu	r18,r23,adc <__sfvwrite_r+0x320>
     97c:	00a00034 	movhi	r2,32768
     980:	10bfffc4 	addi	r2,r2,-1
     984:	9009883a 	mov	r4,r18
     988:	1480012e 	bgeu	r2,r18,990 <__sfvwrite_r+0x1d4>
     98c:	1009883a 	mov	r4,r2
     990:	b80b883a 	mov	r5,r23
     994:	0002ed00 	call	2ed0 <__divsi3>
     998:	b80b883a 	mov	r5,r23
     99c:	1009883a 	mov	r4,r2
     9a0:	00030840 	call	3084 <__mulsi3>
     9a4:	81400717 	ldw	r5,28(r16)
     9a8:	80c00917 	ldw	r3,36(r16)
     9ac:	100f883a 	mov	r7,r2
     9b0:	e00d883a 	mov	r6,fp
     9b4:	a809883a 	mov	r4,r21
     9b8:	183ee83a 	callr	r3
     9bc:	00bfd816 	blt	zero,r2,920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000920>
     9c0:	8080030b 	ldhu	r2,12(r16)
     9c4:	10801014 	ori	r2,r2,64
     9c8:	8080030d 	sth	r2,12(r16)
     9cc:	00bfffc4 	movi	r2,-1
     9d0:	003fa806 	br	874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000874>
     9d4:	0027883a 	mov	r19,zero
     9d8:	0011883a 	mov	r8,zero
     9dc:	0039883a 	mov	fp,zero
     9e0:	0025883a 	mov	r18,zero
     9e4:	90001f26 	beq	r18,zero,a64 <__sfvwrite_r+0x2a8>
     9e8:	40005a26 	beq	r8,zero,b54 <__sfvwrite_r+0x398>
     9ec:	982d883a 	mov	r22,r19
     9f0:	94c0012e 	bgeu	r18,r19,9f8 <__sfvwrite_r+0x23c>
     9f4:	902d883a 	mov	r22,r18
     9f8:	81000017 	ldw	r4,0(r16)
     9fc:	80800417 	ldw	r2,16(r16)
     a00:	b02f883a 	mov	r23,r22
     a04:	81c00517 	ldw	r7,20(r16)
     a08:	1100032e 	bgeu	r2,r4,a18 <__sfvwrite_r+0x25c>
     a0c:	80c00217 	ldw	r3,8(r16)
     a10:	38c7883a 	add	r3,r7,r3
     a14:	1d801816 	blt	r3,r22,a78 <__sfvwrite_r+0x2bc>
     a18:	b1c03e16 	blt	r22,r7,b14 <__sfvwrite_r+0x358>
     a1c:	80800917 	ldw	r2,36(r16)
     a20:	81400717 	ldw	r5,28(r16)
     a24:	e00d883a 	mov	r6,fp
     a28:	da000115 	stw	r8,4(sp)
     a2c:	a809883a 	mov	r4,r21
     a30:	103ee83a 	callr	r2
     a34:	102f883a 	mov	r23,r2
     a38:	da000117 	ldw	r8,4(sp)
     a3c:	00bfe00e 	bge	zero,r2,9c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c0>
     a40:	9de7c83a 	sub	r19,r19,r23
     a44:	98001f26 	beq	r19,zero,ac4 <__sfvwrite_r+0x308>
     a48:	a0800217 	ldw	r2,8(r20)
     a4c:	e5f9883a 	add	fp,fp,r23
     a50:	95e5c83a 	sub	r18,r18,r23
     a54:	15efc83a 	sub	r23,r2,r23
     a58:	a5c00215 	stw	r23,8(r20)
     a5c:	b83f8426 	beq	r23,zero,870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000870>
     a60:	903fe11e 	bne	r18,zero,9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e8>
     a64:	8f000017 	ldw	fp,0(r17)
     a68:	8c800117 	ldw	r18,4(r17)
     a6c:	0011883a 	mov	r8,zero
     a70:	8c400204 	addi	r17,r17,8
     a74:	003fdb06 	br	9e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e4>
     a78:	180d883a 	mov	r6,r3
     a7c:	e00b883a 	mov	r5,fp
     a80:	da000115 	stw	r8,4(sp)
     a84:	d8c00015 	stw	r3,0(sp)
     a88:	00018440 	call	1844 <memmove>
     a8c:	d8c00017 	ldw	r3,0(sp)
     a90:	80800017 	ldw	r2,0(r16)
     a94:	800b883a 	mov	r5,r16
     a98:	a809883a 	mov	r4,r21
     a9c:	10c5883a 	add	r2,r2,r3
     aa0:	80800015 	stw	r2,0(r16)
     aa4:	d8c00015 	stw	r3,0(sp)
     aa8:	00026e40 	call	26e4 <_fflush_r>
     aac:	d8c00017 	ldw	r3,0(sp)
     ab0:	da000117 	ldw	r8,4(sp)
     ab4:	103fc21e 	bne	r2,zero,9c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c0>
     ab8:	182f883a 	mov	r23,r3
     abc:	9de7c83a 	sub	r19,r19,r23
     ac0:	983fe11e 	bne	r19,zero,a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a48>
     ac4:	800b883a 	mov	r5,r16
     ac8:	a809883a 	mov	r4,r21
     acc:	00026e40 	call	26e4 <_fflush_r>
     ad0:	103fbb1e 	bne	r2,zero,9c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c0>
     ad4:	0011883a 	mov	r8,zero
     ad8:	003fdb06 	br	a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a48>
     adc:	94c0012e 	bgeu	r18,r19,ae4 <__sfvwrite_r+0x328>
     ae0:	9027883a 	mov	r19,r18
     ae4:	980d883a 	mov	r6,r19
     ae8:	e00b883a 	mov	r5,fp
     aec:	00018440 	call	1844 <memmove>
     af0:	80800217 	ldw	r2,8(r16)
     af4:	80c00017 	ldw	r3,0(r16)
     af8:	14c5c83a 	sub	r2,r2,r19
     afc:	1cc7883a 	add	r3,r3,r19
     b00:	80800215 	stw	r2,8(r16)
     b04:	80c00015 	stw	r3,0(r16)
     b08:	10004326 	beq	r2,zero,c18 <__sfvwrite_r+0x45c>
     b0c:	9805883a 	mov	r2,r19
     b10:	003f8306 	br	920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000920>
     b14:	b00d883a 	mov	r6,r22
     b18:	e00b883a 	mov	r5,fp
     b1c:	da000115 	stw	r8,4(sp)
     b20:	00018440 	call	1844 <memmove>
     b24:	80800217 	ldw	r2,8(r16)
     b28:	80c00017 	ldw	r3,0(r16)
     b2c:	da000117 	ldw	r8,4(sp)
     b30:	1585c83a 	sub	r2,r2,r22
     b34:	1dad883a 	add	r22,r3,r22
     b38:	80800215 	stw	r2,8(r16)
     b3c:	85800015 	stw	r22,0(r16)
     b40:	003fbf06 	br	a40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a40>
     b44:	81000017 	ldw	r4,0(r16)
     b48:	9027883a 	mov	r19,r18
     b4c:	902f883a 	mov	r23,r18
     b50:	003f6906 	br	8f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70008f8>
     b54:	900d883a 	mov	r6,r18
     b58:	01400284 	movi	r5,10
     b5c:	e009883a 	mov	r4,fp
     b60:	00016180 	call	1618 <memchr>
     b64:	10003e26 	beq	r2,zero,c60 <__sfvwrite_r+0x4a4>
     b68:	10800044 	addi	r2,r2,1
     b6c:	1727c83a 	sub	r19,r2,fp
     b70:	02000044 	movi	r8,1
     b74:	003f9d06 	br	9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009ec>
     b78:	80800517 	ldw	r2,20(r16)
     b7c:	81400417 	ldw	r5,16(r16)
     b80:	81c00017 	ldw	r7,0(r16)
     b84:	10a7883a 	add	r19,r2,r2
     b88:	9885883a 	add	r2,r19,r2
     b8c:	1026d7fa 	srli	r19,r2,31
     b90:	396dc83a 	sub	r22,r7,r5
     b94:	b1000044 	addi	r4,r22,1
     b98:	9885883a 	add	r2,r19,r2
     b9c:	1027d07a 	srai	r19,r2,1
     ba0:	2485883a 	add	r2,r4,r18
     ba4:	980d883a 	mov	r6,r19
     ba8:	9880022e 	bgeu	r19,r2,bb4 <__sfvwrite_r+0x3f8>
     bac:	1027883a 	mov	r19,r2
     bb0:	100d883a 	mov	r6,r2
     bb4:	18c1000c 	andi	r3,r3,1024
     bb8:	18001c26 	beq	r3,zero,c2c <__sfvwrite_r+0x470>
     bbc:	300b883a 	mov	r5,r6
     bc0:	a809883a 	mov	r4,r21
     bc4:	0000e0c0 	call	e0c <_malloc_r>
     bc8:	102f883a 	mov	r23,r2
     bcc:	10002926 	beq	r2,zero,c74 <__sfvwrite_r+0x4b8>
     bd0:	81400417 	ldw	r5,16(r16)
     bd4:	b00d883a 	mov	r6,r22
     bd8:	1009883a 	mov	r4,r2
     bdc:	00016fc0 	call	16fc <memcpy>
     be0:	8080030b 	ldhu	r2,12(r16)
     be4:	00fedfc4 	movi	r3,-1153
     be8:	10c4703a 	and	r2,r2,r3
     bec:	10802014 	ori	r2,r2,128
     bf0:	8080030d 	sth	r2,12(r16)
     bf4:	bd89883a 	add	r4,r23,r22
     bf8:	9d8fc83a 	sub	r7,r19,r22
     bfc:	85c00415 	stw	r23,16(r16)
     c00:	84c00515 	stw	r19,20(r16)
     c04:	81000015 	stw	r4,0(r16)
     c08:	9027883a 	mov	r19,r18
     c0c:	81c00215 	stw	r7,8(r16)
     c10:	902f883a 	mov	r23,r18
     c14:	003f3806 	br	8f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70008f8>
     c18:	800b883a 	mov	r5,r16
     c1c:	a809883a 	mov	r4,r21
     c20:	00026e40 	call	26e4 <_fflush_r>
     c24:	103fb926 	beq	r2,zero,b0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b0c>
     c28:	003f6506 	br	9c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c0>
     c2c:	a809883a 	mov	r4,r21
     c30:	0001ac80 	call	1ac8 <_realloc_r>
     c34:	102f883a 	mov	r23,r2
     c38:	103fee1e 	bne	r2,zero,bf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bf4>
     c3c:	81400417 	ldw	r5,16(r16)
     c40:	a809883a 	mov	r4,r21
     c44:	00028940 	call	2894 <_free_r>
     c48:	8080030b 	ldhu	r2,12(r16)
     c4c:	00ffdfc4 	movi	r3,-129
     c50:	1884703a 	and	r2,r3,r2
     c54:	00c00304 	movi	r3,12
     c58:	a8c00015 	stw	r3,0(r21)
     c5c:	003f5906 	br	9c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c4>
     c60:	94c00044 	addi	r19,r18,1
     c64:	02000044 	movi	r8,1
     c68:	003f6006 	br	9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009ec>
     c6c:	00bfffc4 	movi	r2,-1
     c70:	003f0006 	br	874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000874>
     c74:	00800304 	movi	r2,12
     c78:	a8800015 	stw	r2,0(r21)
     c7c:	8080030b 	ldhu	r2,12(r16)
     c80:	003f5006 	br	9c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009c4>

00000c84 <_fwalk>:
     c84:	defff704 	addi	sp,sp,-36
     c88:	dd000415 	stw	r20,16(sp)
     c8c:	dfc00815 	stw	ra,32(sp)
     c90:	ddc00715 	stw	r23,28(sp)
     c94:	dd800615 	stw	r22,24(sp)
     c98:	dd400515 	stw	r21,20(sp)
     c9c:	dcc00315 	stw	r19,12(sp)
     ca0:	dc800215 	stw	r18,8(sp)
     ca4:	dc400115 	stw	r17,4(sp)
     ca8:	dc000015 	stw	r16,0(sp)
     cac:	2500b804 	addi	r20,r4,736
     cb0:	a0002326 	beq	r20,zero,d40 <_fwalk+0xbc>
     cb4:	282b883a 	mov	r21,r5
     cb8:	002f883a 	mov	r23,zero
     cbc:	05800044 	movi	r22,1
     cc0:	04ffffc4 	movi	r19,-1
     cc4:	a4400117 	ldw	r17,4(r20)
     cc8:	a4800217 	ldw	r18,8(r20)
     ccc:	8c7fffc4 	addi	r17,r17,-1
     cd0:	88000d16 	blt	r17,zero,d08 <_fwalk+0x84>
     cd4:	94000304 	addi	r16,r18,12
     cd8:	94800384 	addi	r18,r18,14
     cdc:	8080000b 	ldhu	r2,0(r16)
     ce0:	8c7fffc4 	addi	r17,r17,-1
     ce4:	813ffd04 	addi	r4,r16,-12
     ce8:	b080042e 	bgeu	r22,r2,cfc <_fwalk+0x78>
     cec:	9080000f 	ldh	r2,0(r18)
     cf0:	14c00226 	beq	r2,r19,cfc <_fwalk+0x78>
     cf4:	a83ee83a 	callr	r21
     cf8:	b8aeb03a 	or	r23,r23,r2
     cfc:	84001a04 	addi	r16,r16,104
     d00:	94801a04 	addi	r18,r18,104
     d04:	8cfff51e 	bne	r17,r19,cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cdc>
     d08:	a5000017 	ldw	r20,0(r20)
     d0c:	a03fed1e 	bne	r20,zero,cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc4>
     d10:	b805883a 	mov	r2,r23
     d14:	dfc00817 	ldw	ra,32(sp)
     d18:	ddc00717 	ldw	r23,28(sp)
     d1c:	dd800617 	ldw	r22,24(sp)
     d20:	dd400517 	ldw	r21,20(sp)
     d24:	dd000417 	ldw	r20,16(sp)
     d28:	dcc00317 	ldw	r19,12(sp)
     d2c:	dc800217 	ldw	r18,8(sp)
     d30:	dc400117 	ldw	r17,4(sp)
     d34:	dc000017 	ldw	r16,0(sp)
     d38:	dec00904 	addi	sp,sp,36
     d3c:	f800283a 	ret
     d40:	002f883a 	mov	r23,zero
     d44:	003ff206 	br	d10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d10>

00000d48 <_fwalk_reent>:
     d48:	defff704 	addi	sp,sp,-36
     d4c:	dd000415 	stw	r20,16(sp)
     d50:	dfc00815 	stw	ra,32(sp)
     d54:	ddc00715 	stw	r23,28(sp)
     d58:	dd800615 	stw	r22,24(sp)
     d5c:	dd400515 	stw	r21,20(sp)
     d60:	dcc00315 	stw	r19,12(sp)
     d64:	dc800215 	stw	r18,8(sp)
     d68:	dc400115 	stw	r17,4(sp)
     d6c:	dc000015 	stw	r16,0(sp)
     d70:	2500b804 	addi	r20,r4,736
     d74:	a0002326 	beq	r20,zero,e04 <_fwalk_reent+0xbc>
     d78:	282b883a 	mov	r21,r5
     d7c:	2027883a 	mov	r19,r4
     d80:	002f883a 	mov	r23,zero
     d84:	05800044 	movi	r22,1
     d88:	04bfffc4 	movi	r18,-1
     d8c:	a4400117 	ldw	r17,4(r20)
     d90:	a4000217 	ldw	r16,8(r20)
     d94:	8c7fffc4 	addi	r17,r17,-1
     d98:	88000c16 	blt	r17,zero,dcc <_fwalk_reent+0x84>
     d9c:	84000304 	addi	r16,r16,12
     da0:	8080000b 	ldhu	r2,0(r16)
     da4:	8c7fffc4 	addi	r17,r17,-1
     da8:	817ffd04 	addi	r5,r16,-12
     dac:	b080052e 	bgeu	r22,r2,dc4 <_fwalk_reent+0x7c>
     db0:	8080008f 	ldh	r2,2(r16)
     db4:	9809883a 	mov	r4,r19
     db8:	14800226 	beq	r2,r18,dc4 <_fwalk_reent+0x7c>
     dbc:	a83ee83a 	callr	r21
     dc0:	b8aeb03a 	or	r23,r23,r2
     dc4:	84001a04 	addi	r16,r16,104
     dc8:	8cbff51e 	bne	r17,r18,da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000da0>
     dcc:	a5000017 	ldw	r20,0(r20)
     dd0:	a03fee1e 	bne	r20,zero,d8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d8c>
     dd4:	b805883a 	mov	r2,r23
     dd8:	dfc00817 	ldw	ra,32(sp)
     ddc:	ddc00717 	ldw	r23,28(sp)
     de0:	dd800617 	ldw	r22,24(sp)
     de4:	dd400517 	ldw	r21,20(sp)
     de8:	dd000417 	ldw	r20,16(sp)
     dec:	dcc00317 	ldw	r19,12(sp)
     df0:	dc800217 	ldw	r18,8(sp)
     df4:	dc400117 	ldw	r17,4(sp)
     df8:	dc000017 	ldw	r16,0(sp)
     dfc:	dec00904 	addi	sp,sp,36
     e00:	f800283a 	ret
     e04:	002f883a 	mov	r23,zero
     e08:	003ff206 	br	dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000dd4>

00000e0c <_malloc_r>:
     e0c:	defff504 	addi	sp,sp,-44
     e10:	dc800315 	stw	r18,12(sp)
     e14:	dfc00a15 	stw	ra,40(sp)
     e18:	df000915 	stw	fp,36(sp)
     e1c:	ddc00815 	stw	r23,32(sp)
     e20:	dd800715 	stw	r22,28(sp)
     e24:	dd400615 	stw	r21,24(sp)
     e28:	dd000515 	stw	r20,20(sp)
     e2c:	dcc00415 	stw	r19,16(sp)
     e30:	dc400215 	stw	r17,8(sp)
     e34:	dc000115 	stw	r16,4(sp)
     e38:	288002c4 	addi	r2,r5,11
     e3c:	00c00584 	movi	r3,22
     e40:	2025883a 	mov	r18,r4
     e44:	18807f2e 	bgeu	r3,r2,1044 <_malloc_r+0x238>
     e48:	047ffe04 	movi	r17,-8
     e4c:	1462703a 	and	r17,r2,r17
     e50:	8800a316 	blt	r17,zero,10e0 <_malloc_r+0x2d4>
     e54:	8940a236 	bltu	r17,r5,10e0 <_malloc_r+0x2d4>
     e58:	00036480 	call	3648 <__malloc_lock>
     e5c:	00807dc4 	movi	r2,503
     e60:	1441e92e 	bgeu	r2,r17,1608 <_malloc_r+0x7fc>
     e64:	8804d27a 	srli	r2,r17,9
     e68:	1000a126 	beq	r2,zero,10f0 <_malloc_r+0x2e4>
     e6c:	00c00104 	movi	r3,4
     e70:	18811e36 	bltu	r3,r2,12ec <_malloc_r+0x4e0>
     e74:	8804d1ba 	srli	r2,r17,6
     e78:	12000e44 	addi	r8,r2,57
     e7c:	11c00e04 	addi	r7,r2,56
     e80:	4209883a 	add	r4,r8,r8
     e84:	04c00034 	movhi	r19,0
     e88:	2109883a 	add	r4,r4,r4
     e8c:	9cd8d004 	addi	r19,r19,25408
     e90:	2109883a 	add	r4,r4,r4
     e94:	9909883a 	add	r4,r19,r4
     e98:	24000117 	ldw	r16,4(r4)
     e9c:	213ffe04 	addi	r4,r4,-8
     ea0:	24009726 	beq	r4,r16,1100 <_malloc_r+0x2f4>
     ea4:	80800117 	ldw	r2,4(r16)
     ea8:	01bfff04 	movi	r6,-4
     eac:	014003c4 	movi	r5,15
     eb0:	1184703a 	and	r2,r2,r6
     eb4:	1447c83a 	sub	r3,r2,r17
     eb8:	28c00716 	blt	r5,r3,ed8 <_malloc_r+0xcc>
     ebc:	1800920e 	bge	r3,zero,1108 <_malloc_r+0x2fc>
     ec0:	84000317 	ldw	r16,12(r16)
     ec4:	24008e26 	beq	r4,r16,1100 <_malloc_r+0x2f4>
     ec8:	80800117 	ldw	r2,4(r16)
     ecc:	1184703a 	and	r2,r2,r6
     ed0:	1447c83a 	sub	r3,r2,r17
     ed4:	28fff90e 	bge	r5,r3,ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ebc>
     ed8:	3809883a 	mov	r4,r7
     edc:	01800034 	movhi	r6,0
     ee0:	9c000417 	ldw	r16,16(r19)
     ee4:	3198d004 	addi	r6,r6,25408
     ee8:	32000204 	addi	r8,r6,8
     eec:	82013426 	beq	r16,r8,13c0 <_malloc_r+0x5b4>
     ef0:	80c00117 	ldw	r3,4(r16)
     ef4:	00bfff04 	movi	r2,-4
     ef8:	188e703a 	and	r7,r3,r2
     efc:	3c45c83a 	sub	r2,r7,r17
     f00:	00c003c4 	movi	r3,15
     f04:	18811f16 	blt	r3,r2,1384 <_malloc_r+0x578>
     f08:	32000515 	stw	r8,20(r6)
     f0c:	32000415 	stw	r8,16(r6)
     f10:	10007f0e 	bge	r2,zero,1110 <_malloc_r+0x304>
     f14:	00807fc4 	movi	r2,511
     f18:	11c0fd36 	bltu	r2,r7,1310 <_malloc_r+0x504>
     f1c:	3806d0fa 	srli	r3,r7,3
     f20:	01c00044 	movi	r7,1
     f24:	30800117 	ldw	r2,4(r6)
     f28:	19400044 	addi	r5,r3,1
     f2c:	294b883a 	add	r5,r5,r5
     f30:	1807d0ba 	srai	r3,r3,2
     f34:	294b883a 	add	r5,r5,r5
     f38:	294b883a 	add	r5,r5,r5
     f3c:	298b883a 	add	r5,r5,r6
     f40:	38c6983a 	sll	r3,r7,r3
     f44:	29c00017 	ldw	r7,0(r5)
     f48:	2a7ffe04 	addi	r9,r5,-8
     f4c:	1886b03a 	or	r3,r3,r2
     f50:	82400315 	stw	r9,12(r16)
     f54:	81c00215 	stw	r7,8(r16)
     f58:	30c00115 	stw	r3,4(r6)
     f5c:	2c000015 	stw	r16,0(r5)
     f60:	3c000315 	stw	r16,12(r7)
     f64:	2005d0ba 	srai	r2,r4,2
     f68:	01400044 	movi	r5,1
     f6c:	288a983a 	sll	r5,r5,r2
     f70:	19406f36 	bltu	r3,r5,1130 <_malloc_r+0x324>
     f74:	28c4703a 	and	r2,r5,r3
     f78:	10000a1e 	bne	r2,zero,fa4 <_malloc_r+0x198>
     f7c:	00bfff04 	movi	r2,-4
     f80:	294b883a 	add	r5,r5,r5
     f84:	2088703a 	and	r4,r4,r2
     f88:	28c4703a 	and	r2,r5,r3
     f8c:	21000104 	addi	r4,r4,4
     f90:	1000041e 	bne	r2,zero,fa4 <_malloc_r+0x198>
     f94:	294b883a 	add	r5,r5,r5
     f98:	28c4703a 	and	r2,r5,r3
     f9c:	21000104 	addi	r4,r4,4
     fa0:	103ffc26 	beq	r2,zero,f94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f94>
     fa4:	02bfff04 	movi	r10,-4
     fa8:	024003c4 	movi	r9,15
     fac:	21800044 	addi	r6,r4,1
     fb0:	318d883a 	add	r6,r6,r6
     fb4:	318d883a 	add	r6,r6,r6
     fb8:	318d883a 	add	r6,r6,r6
     fbc:	998d883a 	add	r6,r19,r6
     fc0:	333ffe04 	addi	r12,r6,-8
     fc4:	2017883a 	mov	r11,r4
     fc8:	31800104 	addi	r6,r6,4
     fcc:	34000017 	ldw	r16,0(r6)
     fd0:	31fffd04 	addi	r7,r6,-12
     fd4:	81c0041e 	bne	r16,r7,fe8 <_malloc_r+0x1dc>
     fd8:	0000fb06 	br	13c8 <_malloc_r+0x5bc>
     fdc:	1801030e 	bge	r3,zero,13ec <_malloc_r+0x5e0>
     fe0:	84000317 	ldw	r16,12(r16)
     fe4:	81c0f826 	beq	r16,r7,13c8 <_malloc_r+0x5bc>
     fe8:	80800117 	ldw	r2,4(r16)
     fec:	1284703a 	and	r2,r2,r10
     ff0:	1447c83a 	sub	r3,r2,r17
     ff4:	48fff90e 	bge	r9,r3,fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fdc>
     ff8:	80800317 	ldw	r2,12(r16)
     ffc:	81000217 	ldw	r4,8(r16)
    1000:	89400054 	ori	r5,r17,1
    1004:	81400115 	stw	r5,4(r16)
    1008:	20800315 	stw	r2,12(r4)
    100c:	11000215 	stw	r4,8(r2)
    1010:	8463883a 	add	r17,r16,r17
    1014:	9c400515 	stw	r17,20(r19)
    1018:	9c400415 	stw	r17,16(r19)
    101c:	18800054 	ori	r2,r3,1
    1020:	88800115 	stw	r2,4(r17)
    1024:	8a000315 	stw	r8,12(r17)
    1028:	8a000215 	stw	r8,8(r17)
    102c:	88e3883a 	add	r17,r17,r3
    1030:	88c00015 	stw	r3,0(r17)
    1034:	9009883a 	mov	r4,r18
    1038:	000366c0 	call	366c <__malloc_unlock>
    103c:	80800204 	addi	r2,r16,8
    1040:	00001b06 	br	10b0 <_malloc_r+0x2a4>
    1044:	04400404 	movi	r17,16
    1048:	89402536 	bltu	r17,r5,10e0 <_malloc_r+0x2d4>
    104c:	00036480 	call	3648 <__malloc_lock>
    1050:	00800184 	movi	r2,6
    1054:	01000084 	movi	r4,2
    1058:	04c00034 	movhi	r19,0
    105c:	1085883a 	add	r2,r2,r2
    1060:	9cd8d004 	addi	r19,r19,25408
    1064:	1085883a 	add	r2,r2,r2
    1068:	9885883a 	add	r2,r19,r2
    106c:	14000117 	ldw	r16,4(r2)
    1070:	10fffe04 	addi	r3,r2,-8
    1074:	80c0d926 	beq	r16,r3,13dc <_malloc_r+0x5d0>
    1078:	80c00117 	ldw	r3,4(r16)
    107c:	81000317 	ldw	r4,12(r16)
    1080:	00bfff04 	movi	r2,-4
    1084:	1884703a 	and	r2,r3,r2
    1088:	81400217 	ldw	r5,8(r16)
    108c:	8085883a 	add	r2,r16,r2
    1090:	10c00117 	ldw	r3,4(r2)
    1094:	29000315 	stw	r4,12(r5)
    1098:	21400215 	stw	r5,8(r4)
    109c:	18c00054 	ori	r3,r3,1
    10a0:	10c00115 	stw	r3,4(r2)
    10a4:	9009883a 	mov	r4,r18
    10a8:	000366c0 	call	366c <__malloc_unlock>
    10ac:	80800204 	addi	r2,r16,8
    10b0:	dfc00a17 	ldw	ra,40(sp)
    10b4:	df000917 	ldw	fp,36(sp)
    10b8:	ddc00817 	ldw	r23,32(sp)
    10bc:	dd800717 	ldw	r22,28(sp)
    10c0:	dd400617 	ldw	r21,24(sp)
    10c4:	dd000517 	ldw	r20,20(sp)
    10c8:	dcc00417 	ldw	r19,16(sp)
    10cc:	dc800317 	ldw	r18,12(sp)
    10d0:	dc400217 	ldw	r17,8(sp)
    10d4:	dc000117 	ldw	r16,4(sp)
    10d8:	dec00b04 	addi	sp,sp,44
    10dc:	f800283a 	ret
    10e0:	00800304 	movi	r2,12
    10e4:	90800015 	stw	r2,0(r18)
    10e8:	0005883a 	mov	r2,zero
    10ec:	003ff006 	br	10b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b0>
    10f0:	01002004 	movi	r4,128
    10f4:	02001004 	movi	r8,64
    10f8:	01c00fc4 	movi	r7,63
    10fc:	003f6106 	br	e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
    1100:	4009883a 	mov	r4,r8
    1104:	003f7506 	br	edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000edc>
    1108:	81000317 	ldw	r4,12(r16)
    110c:	003fde06 	br	1088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001088>
    1110:	81c5883a 	add	r2,r16,r7
    1114:	11400117 	ldw	r5,4(r2)
    1118:	9009883a 	mov	r4,r18
    111c:	29400054 	ori	r5,r5,1
    1120:	11400115 	stw	r5,4(r2)
    1124:	000366c0 	call	366c <__malloc_unlock>
    1128:	80800204 	addi	r2,r16,8
    112c:	003fe006 	br	10b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b0>
    1130:	9c000217 	ldw	r16,8(r19)
    1134:	00bfff04 	movi	r2,-4
    1138:	85800117 	ldw	r22,4(r16)
    113c:	b0ac703a 	and	r22,r22,r2
    1140:	b4400336 	bltu	r22,r17,1150 <_malloc_r+0x344>
    1144:	b445c83a 	sub	r2,r22,r17
    1148:	00c003c4 	movi	r3,15
    114c:	18805d16 	blt	r3,r2,12c4 <_malloc_r+0x4b8>
    1150:	05c00034 	movhi	r23,0
    1154:	00800074 	movhi	r2,1
    1158:	10a57d04 	addi	r2,r2,-27148
    115c:	bdde9504 	addi	r23,r23,31316
    1160:	15400017 	ldw	r21,0(r2)
    1164:	b8c00017 	ldw	r3,0(r23)
    1168:	00bfffc4 	movi	r2,-1
    116c:	858d883a 	add	r6,r16,r22
    1170:	8d6b883a 	add	r21,r17,r21
    1174:	1880ea26 	beq	r3,r2,1520 <_malloc_r+0x714>
    1178:	ad4403c4 	addi	r21,r21,4111
    117c:	00bc0004 	movi	r2,-4096
    1180:	a8aa703a 	and	r21,r21,r2
    1184:	a80b883a 	mov	r5,r21
    1188:	9009883a 	mov	r4,r18
    118c:	d9800015 	stw	r6,0(sp)
    1190:	000202c0 	call	202c <_sbrk_r>
    1194:	1029883a 	mov	r20,r2
    1198:	00bfffc4 	movi	r2,-1
    119c:	d9800017 	ldw	r6,0(sp)
    11a0:	a080e826 	beq	r20,r2,1544 <_malloc_r+0x738>
    11a4:	a180a636 	bltu	r20,r6,1440 <_malloc_r+0x634>
    11a8:	07000074 	movhi	fp,1
    11ac:	e7258604 	addi	fp,fp,-27112
    11b0:	e0800017 	ldw	r2,0(fp)
    11b4:	a887883a 	add	r3,r21,r2
    11b8:	e0c00015 	stw	r3,0(fp)
    11bc:	3500e626 	beq	r6,r20,1558 <_malloc_r+0x74c>
    11c0:	b9000017 	ldw	r4,0(r23)
    11c4:	00bfffc4 	movi	r2,-1
    11c8:	2080ee26 	beq	r4,r2,1584 <_malloc_r+0x778>
    11cc:	a185c83a 	sub	r2,r20,r6
    11d0:	10c5883a 	add	r2,r2,r3
    11d4:	e0800015 	stw	r2,0(fp)
    11d8:	a0c001cc 	andi	r3,r20,7
    11dc:	1800bc26 	beq	r3,zero,14d0 <_malloc_r+0x6c4>
    11e0:	a0e9c83a 	sub	r20,r20,r3
    11e4:	00840204 	movi	r2,4104
    11e8:	a5000204 	addi	r20,r20,8
    11ec:	10c7c83a 	sub	r3,r2,r3
    11f0:	a545883a 	add	r2,r20,r21
    11f4:	1083ffcc 	andi	r2,r2,4095
    11f8:	18abc83a 	sub	r21,r3,r2
    11fc:	a80b883a 	mov	r5,r21
    1200:	9009883a 	mov	r4,r18
    1204:	000202c0 	call	202c <_sbrk_r>
    1208:	00ffffc4 	movi	r3,-1
    120c:	10c0e126 	beq	r2,r3,1594 <_malloc_r+0x788>
    1210:	1505c83a 	sub	r2,r2,r20
    1214:	1545883a 	add	r2,r2,r21
    1218:	10800054 	ori	r2,r2,1
    121c:	e0c00017 	ldw	r3,0(fp)
    1220:	9d000215 	stw	r20,8(r19)
    1224:	a0800115 	stw	r2,4(r20)
    1228:	a8c7883a 	add	r3,r21,r3
    122c:	e0c00015 	stw	r3,0(fp)
    1230:	84c00e26 	beq	r16,r19,126c <_malloc_r+0x460>
    1234:	018003c4 	movi	r6,15
    1238:	3580a72e 	bgeu	r6,r22,14d8 <_malloc_r+0x6cc>
    123c:	81400117 	ldw	r5,4(r16)
    1240:	013ffe04 	movi	r4,-8
    1244:	b0bffd04 	addi	r2,r22,-12
    1248:	1104703a 	and	r2,r2,r4
    124c:	2900004c 	andi	r4,r5,1
    1250:	2088b03a 	or	r4,r4,r2
    1254:	81000115 	stw	r4,4(r16)
    1258:	01400144 	movi	r5,5
    125c:	8089883a 	add	r4,r16,r2
    1260:	21400115 	stw	r5,4(r4)
    1264:	21400215 	stw	r5,8(r4)
    1268:	3080cd36 	bltu	r6,r2,15a0 <_malloc_r+0x794>
    126c:	00800074 	movhi	r2,1
    1270:	10a57c04 	addi	r2,r2,-27152
    1274:	11000017 	ldw	r4,0(r2)
    1278:	20c0012e 	bgeu	r4,r3,1280 <_malloc_r+0x474>
    127c:	10c00015 	stw	r3,0(r2)
    1280:	00800074 	movhi	r2,1
    1284:	10a57b04 	addi	r2,r2,-27156
    1288:	11000017 	ldw	r4,0(r2)
    128c:	9c000217 	ldw	r16,8(r19)
    1290:	20c0012e 	bgeu	r4,r3,1298 <_malloc_r+0x48c>
    1294:	10c00015 	stw	r3,0(r2)
    1298:	80c00117 	ldw	r3,4(r16)
    129c:	00bfff04 	movi	r2,-4
    12a0:	1886703a 	and	r3,r3,r2
    12a4:	1c45c83a 	sub	r2,r3,r17
    12a8:	1c400236 	bltu	r3,r17,12b4 <_malloc_r+0x4a8>
    12ac:	00c003c4 	movi	r3,15
    12b0:	18800416 	blt	r3,r2,12c4 <_malloc_r+0x4b8>
    12b4:	9009883a 	mov	r4,r18
    12b8:	000366c0 	call	366c <__malloc_unlock>
    12bc:	0005883a 	mov	r2,zero
    12c0:	003f7b06 	br	10b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b0>
    12c4:	88c00054 	ori	r3,r17,1
    12c8:	80c00115 	stw	r3,4(r16)
    12cc:	8463883a 	add	r17,r16,r17
    12d0:	10800054 	ori	r2,r2,1
    12d4:	9c400215 	stw	r17,8(r19)
    12d8:	88800115 	stw	r2,4(r17)
    12dc:	9009883a 	mov	r4,r18
    12e0:	000366c0 	call	366c <__malloc_unlock>
    12e4:	80800204 	addi	r2,r16,8
    12e8:	003f7106 	br	10b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b0>
    12ec:	00c00504 	movi	r3,20
    12f0:	18804a2e 	bgeu	r3,r2,141c <_malloc_r+0x610>
    12f4:	00c01504 	movi	r3,84
    12f8:	18806e36 	bltu	r3,r2,14b4 <_malloc_r+0x6a8>
    12fc:	8804d33a 	srli	r2,r17,12
    1300:	12001bc4 	addi	r8,r2,111
    1304:	11c01b84 	addi	r7,r2,110
    1308:	4209883a 	add	r4,r8,r8
    130c:	003edd06 	br	e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
    1310:	3804d27a 	srli	r2,r7,9
    1314:	00c00104 	movi	r3,4
    1318:	1880442e 	bgeu	r3,r2,142c <_malloc_r+0x620>
    131c:	00c00504 	movi	r3,20
    1320:	18808136 	bltu	r3,r2,1528 <_malloc_r+0x71c>
    1324:	11401704 	addi	r5,r2,92
    1328:	10c016c4 	addi	r3,r2,91
    132c:	294b883a 	add	r5,r5,r5
    1330:	294b883a 	add	r5,r5,r5
    1334:	294b883a 	add	r5,r5,r5
    1338:	994b883a 	add	r5,r19,r5
    133c:	28800017 	ldw	r2,0(r5)
    1340:	01800034 	movhi	r6,0
    1344:	297ffe04 	addi	r5,r5,-8
    1348:	3198d004 	addi	r6,r6,25408
    134c:	28806526 	beq	r5,r2,14e4 <_malloc_r+0x6d8>
    1350:	01bfff04 	movi	r6,-4
    1354:	10c00117 	ldw	r3,4(r2)
    1358:	1986703a 	and	r3,r3,r6
    135c:	38c0022e 	bgeu	r7,r3,1368 <_malloc_r+0x55c>
    1360:	10800217 	ldw	r2,8(r2)
    1364:	28bffb1e 	bne	r5,r2,1354 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001354>
    1368:	11400317 	ldw	r5,12(r2)
    136c:	98c00117 	ldw	r3,4(r19)
    1370:	81400315 	stw	r5,12(r16)
    1374:	80800215 	stw	r2,8(r16)
    1378:	2c000215 	stw	r16,8(r5)
    137c:	14000315 	stw	r16,12(r2)
    1380:	003ef806 	br	f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f64>
    1384:	88c00054 	ori	r3,r17,1
    1388:	80c00115 	stw	r3,4(r16)
    138c:	8463883a 	add	r17,r16,r17
    1390:	34400515 	stw	r17,20(r6)
    1394:	34400415 	stw	r17,16(r6)
    1398:	10c00054 	ori	r3,r2,1
    139c:	8a000315 	stw	r8,12(r17)
    13a0:	8a000215 	stw	r8,8(r17)
    13a4:	88c00115 	stw	r3,4(r17)
    13a8:	88a3883a 	add	r17,r17,r2
    13ac:	88800015 	stw	r2,0(r17)
    13b0:	9009883a 	mov	r4,r18
    13b4:	000366c0 	call	366c <__malloc_unlock>
    13b8:	80800204 	addi	r2,r16,8
    13bc:	003f3c06 	br	10b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b0>
    13c0:	30c00117 	ldw	r3,4(r6)
    13c4:	003ee706 	br	f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f64>
    13c8:	5ac00044 	addi	r11,r11,1
    13cc:	588000cc 	andi	r2,r11,3
    13d0:	31800204 	addi	r6,r6,8
    13d4:	103efd1e 	bne	r2,zero,fcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fcc>
    13d8:	00002406 	br	146c <_malloc_r+0x660>
    13dc:	14000317 	ldw	r16,12(r2)
    13e0:	143f251e 	bne	r2,r16,1078 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001078>
    13e4:	21000084 	addi	r4,r4,2
    13e8:	003ebc06 	br	edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000edc>
    13ec:	8085883a 	add	r2,r16,r2
    13f0:	10c00117 	ldw	r3,4(r2)
    13f4:	81000317 	ldw	r4,12(r16)
    13f8:	81400217 	ldw	r5,8(r16)
    13fc:	18c00054 	ori	r3,r3,1
    1400:	10c00115 	stw	r3,4(r2)
    1404:	29000315 	stw	r4,12(r5)
    1408:	21400215 	stw	r5,8(r4)
    140c:	9009883a 	mov	r4,r18
    1410:	000366c0 	call	366c <__malloc_unlock>
    1414:	80800204 	addi	r2,r16,8
    1418:	003f2506 	br	10b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b0>
    141c:	12001704 	addi	r8,r2,92
    1420:	11c016c4 	addi	r7,r2,91
    1424:	4209883a 	add	r4,r8,r8
    1428:	003e9606 	br	e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
    142c:	3804d1ba 	srli	r2,r7,6
    1430:	11400e44 	addi	r5,r2,57
    1434:	10c00e04 	addi	r3,r2,56
    1438:	294b883a 	add	r5,r5,r5
    143c:	003fbc06 	br	1330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001330>
    1440:	84ff5926 	beq	r16,r19,11a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011a8>
    1444:	00800034 	movhi	r2,0
    1448:	1098d004 	addi	r2,r2,25408
    144c:	14000217 	ldw	r16,8(r2)
    1450:	00bfff04 	movi	r2,-4
    1454:	80c00117 	ldw	r3,4(r16)
    1458:	1886703a 	and	r3,r3,r2
    145c:	003f9106 	br	12a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012a4>
    1460:	60800217 	ldw	r2,8(r12)
    1464:	213fffc4 	addi	r4,r4,-1
    1468:	1300651e 	bne	r2,r12,1600 <_malloc_r+0x7f4>
    146c:	208000cc 	andi	r2,r4,3
    1470:	633ffe04 	addi	r12,r12,-8
    1474:	103ffa1e 	bne	r2,zero,1460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001460>
    1478:	98800117 	ldw	r2,4(r19)
    147c:	0146303a 	nor	r3,zero,r5
    1480:	1884703a 	and	r2,r3,r2
    1484:	98800115 	stw	r2,4(r19)
    1488:	294b883a 	add	r5,r5,r5
    148c:	117f2836 	bltu	r2,r5,1130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001130>
    1490:	283f2726 	beq	r5,zero,1130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001130>
    1494:	2886703a 	and	r3,r5,r2
    1498:	5809883a 	mov	r4,r11
    149c:	183ec31e 	bne	r3,zero,fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fac>
    14a0:	294b883a 	add	r5,r5,r5
    14a4:	2886703a 	and	r3,r5,r2
    14a8:	21000104 	addi	r4,r4,4
    14ac:	183ffc26 	beq	r3,zero,14a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70014a0>
    14b0:	003ebe06 	br	fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fac>
    14b4:	00c05504 	movi	r3,340
    14b8:	18801236 	bltu	r3,r2,1504 <_malloc_r+0x6f8>
    14bc:	8804d3fa 	srli	r2,r17,15
    14c0:	12001e04 	addi	r8,r2,120
    14c4:	11c01dc4 	addi	r7,r2,119
    14c8:	4209883a 	add	r4,r8,r8
    14cc:	003e6d06 	br	e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
    14d0:	00c40004 	movi	r3,4096
    14d4:	003f4606 	br	11f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011f0>
    14d8:	00800044 	movi	r2,1
    14dc:	a0800115 	stw	r2,4(r20)
    14e0:	003f7406 	br	12b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012b4>
    14e4:	1805d0ba 	srai	r2,r3,2
    14e8:	01c00044 	movi	r7,1
    14ec:	30c00117 	ldw	r3,4(r6)
    14f0:	388e983a 	sll	r7,r7,r2
    14f4:	2805883a 	mov	r2,r5
    14f8:	38c6b03a 	or	r3,r7,r3
    14fc:	30c00115 	stw	r3,4(r6)
    1500:	003f9b06 	br	1370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001370>
    1504:	00c15504 	movi	r3,1364
    1508:	18801a36 	bltu	r3,r2,1574 <_malloc_r+0x768>
    150c:	8804d4ba 	srli	r2,r17,18
    1510:	12001f44 	addi	r8,r2,125
    1514:	11c01f04 	addi	r7,r2,124
    1518:	4209883a 	add	r4,r8,r8
    151c:	003e5906 	br	e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
    1520:	ad400404 	addi	r21,r21,16
    1524:	003f1706 	br	1184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001184>
    1528:	00c01504 	movi	r3,84
    152c:	18802336 	bltu	r3,r2,15bc <_malloc_r+0x7b0>
    1530:	3804d33a 	srli	r2,r7,12
    1534:	11401bc4 	addi	r5,r2,111
    1538:	10c01b84 	addi	r3,r2,110
    153c:	294b883a 	add	r5,r5,r5
    1540:	003f7b06 	br	1330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001330>
    1544:	9c000217 	ldw	r16,8(r19)
    1548:	00bfff04 	movi	r2,-4
    154c:	80c00117 	ldw	r3,4(r16)
    1550:	1886703a 	and	r3,r3,r2
    1554:	003f5306 	br	12a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012a4>
    1558:	3083ffcc 	andi	r2,r6,4095
    155c:	103f181e 	bne	r2,zero,11c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011c0>
    1560:	99000217 	ldw	r4,8(r19)
    1564:	b545883a 	add	r2,r22,r21
    1568:	10800054 	ori	r2,r2,1
    156c:	20800115 	stw	r2,4(r4)
    1570:	003f3e06 	br	126c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700126c>
    1574:	01003f84 	movi	r4,254
    1578:	02001fc4 	movi	r8,127
    157c:	01c01f84 	movi	r7,126
    1580:	003e4006 	br	e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
    1584:	00800034 	movhi	r2,0
    1588:	109e9504 	addi	r2,r2,31316
    158c:	15000015 	stw	r20,0(r2)
    1590:	003f1106 	br	11d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011d8>
    1594:	00800044 	movi	r2,1
    1598:	002b883a 	mov	r21,zero
    159c:	003f1f06 	br	121c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700121c>
    15a0:	81400204 	addi	r5,r16,8
    15a4:	9009883a 	mov	r4,r18
    15a8:	00028940 	call	2894 <_free_r>
    15ac:	00800074 	movhi	r2,1
    15b0:	10a58604 	addi	r2,r2,-27112
    15b4:	10c00017 	ldw	r3,0(r2)
    15b8:	003f2c06 	br	126c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700126c>
    15bc:	00c05504 	movi	r3,340
    15c0:	18800536 	bltu	r3,r2,15d8 <_malloc_r+0x7cc>
    15c4:	3804d3fa 	srli	r2,r7,15
    15c8:	11401e04 	addi	r5,r2,120
    15cc:	10c01dc4 	addi	r3,r2,119
    15d0:	294b883a 	add	r5,r5,r5
    15d4:	003f5606 	br	1330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001330>
    15d8:	00c15504 	movi	r3,1364
    15dc:	18800536 	bltu	r3,r2,15f4 <_malloc_r+0x7e8>
    15e0:	3804d4ba 	srli	r2,r7,18
    15e4:	11401f44 	addi	r5,r2,125
    15e8:	10c01f04 	addi	r3,r2,124
    15ec:	294b883a 	add	r5,r5,r5
    15f0:	003f4f06 	br	1330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001330>
    15f4:	01403f84 	movi	r5,254
    15f8:	00c01f84 	movi	r3,126
    15fc:	003f4c06 	br	1330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001330>
    1600:	98800117 	ldw	r2,4(r19)
    1604:	003fa006 	br	1488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001488>
    1608:	8808d0fa 	srli	r4,r17,3
    160c:	20800044 	addi	r2,r4,1
    1610:	1085883a 	add	r2,r2,r2
    1614:	003e9006 	br	1058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001058>

00001618 <memchr>:
    1618:	208000cc 	andi	r2,r4,3
    161c:	280f883a 	mov	r7,r5
    1620:	10003426 	beq	r2,zero,16f4 <memchr+0xdc>
    1624:	30bfffc4 	addi	r2,r6,-1
    1628:	30001a26 	beq	r6,zero,1694 <memchr+0x7c>
    162c:	20c00003 	ldbu	r3,0(r4)
    1630:	29803fcc 	andi	r6,r5,255
    1634:	30c0051e 	bne	r6,r3,164c <memchr+0x34>
    1638:	00001806 	br	169c <memchr+0x84>
    163c:	10001526 	beq	r2,zero,1694 <memchr+0x7c>
    1640:	20c00003 	ldbu	r3,0(r4)
    1644:	10bfffc4 	addi	r2,r2,-1
    1648:	30c01426 	beq	r6,r3,169c <memchr+0x84>
    164c:	21000044 	addi	r4,r4,1
    1650:	20c000cc 	andi	r3,r4,3
    1654:	183ff91e 	bne	r3,zero,163c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700163c>
    1658:	020000c4 	movi	r8,3
    165c:	40801136 	bltu	r8,r2,16a4 <memchr+0x8c>
    1660:	10000c26 	beq	r2,zero,1694 <memchr+0x7c>
    1664:	20c00003 	ldbu	r3,0(r4)
    1668:	29403fcc 	andi	r5,r5,255
    166c:	28c00b26 	beq	r5,r3,169c <memchr+0x84>
    1670:	20c00044 	addi	r3,r4,1
    1674:	39803fcc 	andi	r6,r7,255
    1678:	2089883a 	add	r4,r4,r2
    167c:	00000306 	br	168c <memchr+0x74>
    1680:	18c00044 	addi	r3,r3,1
    1684:	197fffc3 	ldbu	r5,-1(r3)
    1688:	31400526 	beq	r6,r5,16a0 <memchr+0x88>
    168c:	1805883a 	mov	r2,r3
    1690:	20fffb1e 	bne	r4,r3,1680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001680>
    1694:	0005883a 	mov	r2,zero
    1698:	f800283a 	ret
    169c:	2005883a 	mov	r2,r4
    16a0:	f800283a 	ret
    16a4:	28c03fcc 	andi	r3,r5,255
    16a8:	1812923a 	slli	r9,r3,8
    16ac:	02ffbff4 	movhi	r11,65279
    16b0:	02a02074 	movhi	r10,32897
    16b4:	48d2b03a 	or	r9,r9,r3
    16b8:	4806943a 	slli	r3,r9,16
    16bc:	5affbfc4 	addi	r11,r11,-257
    16c0:	52a02004 	addi	r10,r10,-32640
    16c4:	48d2b03a 	or	r9,r9,r3
    16c8:	20c00017 	ldw	r3,0(r4)
    16cc:	48c6f03a 	xor	r3,r9,r3
    16d0:	1acd883a 	add	r6,r3,r11
    16d4:	00c6303a 	nor	r3,zero,r3
    16d8:	30c6703a 	and	r3,r6,r3
    16dc:	1a86703a 	and	r3,r3,r10
    16e0:	183fe01e 	bne	r3,zero,1664 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001664>
    16e4:	10bfff04 	addi	r2,r2,-4
    16e8:	21000104 	addi	r4,r4,4
    16ec:	40bff636 	bltu	r8,r2,16c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016c8>
    16f0:	003fdb06 	br	1660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001660>
    16f4:	3005883a 	mov	r2,r6
    16f8:	003fd706 	br	1658 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001658>

000016fc <memcpy>:
    16fc:	defffd04 	addi	sp,sp,-12
    1700:	dfc00215 	stw	ra,8(sp)
    1704:	dc400115 	stw	r17,4(sp)
    1708:	dc000015 	stw	r16,0(sp)
    170c:	00c003c4 	movi	r3,15
    1710:	2005883a 	mov	r2,r4
    1714:	1980452e 	bgeu	r3,r6,182c <memcpy+0x130>
    1718:	2906b03a 	or	r3,r5,r4
    171c:	18c000cc 	andi	r3,r3,3
    1720:	1800441e 	bne	r3,zero,1834 <memcpy+0x138>
    1724:	347ffc04 	addi	r17,r6,-16
    1728:	8822d13a 	srli	r17,r17,4
    172c:	28c00104 	addi	r3,r5,4
    1730:	23400104 	addi	r13,r4,4
    1734:	8820913a 	slli	r16,r17,4
    1738:	2b000204 	addi	r12,r5,8
    173c:	22c00204 	addi	r11,r4,8
    1740:	84000504 	addi	r16,r16,20
    1744:	2a800304 	addi	r10,r5,12
    1748:	22400304 	addi	r9,r4,12
    174c:	2c21883a 	add	r16,r5,r16
    1750:	2811883a 	mov	r8,r5
    1754:	200f883a 	mov	r7,r4
    1758:	41000017 	ldw	r4,0(r8)
    175c:	1fc00017 	ldw	ra,0(r3)
    1760:	63c00017 	ldw	r15,0(r12)
    1764:	39000015 	stw	r4,0(r7)
    1768:	53800017 	ldw	r14,0(r10)
    176c:	6fc00015 	stw	ra,0(r13)
    1770:	5bc00015 	stw	r15,0(r11)
    1774:	4b800015 	stw	r14,0(r9)
    1778:	18c00404 	addi	r3,r3,16
    177c:	39c00404 	addi	r7,r7,16
    1780:	42000404 	addi	r8,r8,16
    1784:	6b400404 	addi	r13,r13,16
    1788:	63000404 	addi	r12,r12,16
    178c:	5ac00404 	addi	r11,r11,16
    1790:	52800404 	addi	r10,r10,16
    1794:	4a400404 	addi	r9,r9,16
    1798:	1c3fef1e 	bne	r3,r16,1758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001758>
    179c:	89c00044 	addi	r7,r17,1
    17a0:	380e913a 	slli	r7,r7,4
    17a4:	310003cc 	andi	r4,r6,15
    17a8:	02c000c4 	movi	r11,3
    17ac:	11c7883a 	add	r3,r2,r7
    17b0:	29cb883a 	add	r5,r5,r7
    17b4:	5900212e 	bgeu	r11,r4,183c <memcpy+0x140>
    17b8:	1813883a 	mov	r9,r3
    17bc:	2811883a 	mov	r8,r5
    17c0:	200f883a 	mov	r7,r4
    17c4:	42800017 	ldw	r10,0(r8)
    17c8:	4a400104 	addi	r9,r9,4
    17cc:	39ffff04 	addi	r7,r7,-4
    17d0:	4abfff15 	stw	r10,-4(r9)
    17d4:	42000104 	addi	r8,r8,4
    17d8:	59fffa36 	bltu	r11,r7,17c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017c4>
    17dc:	213fff04 	addi	r4,r4,-4
    17e0:	2008d0ba 	srli	r4,r4,2
    17e4:	318000cc 	andi	r6,r6,3
    17e8:	21000044 	addi	r4,r4,1
    17ec:	2109883a 	add	r4,r4,r4
    17f0:	2109883a 	add	r4,r4,r4
    17f4:	1907883a 	add	r3,r3,r4
    17f8:	290b883a 	add	r5,r5,r4
    17fc:	30000626 	beq	r6,zero,1818 <memcpy+0x11c>
    1800:	198d883a 	add	r6,r3,r6
    1804:	29c00003 	ldbu	r7,0(r5)
    1808:	18c00044 	addi	r3,r3,1
    180c:	29400044 	addi	r5,r5,1
    1810:	19ffffc5 	stb	r7,-1(r3)
    1814:	19bffb1e 	bne	r3,r6,1804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001804>
    1818:	dfc00217 	ldw	ra,8(sp)
    181c:	dc400117 	ldw	r17,4(sp)
    1820:	dc000017 	ldw	r16,0(sp)
    1824:	dec00304 	addi	sp,sp,12
    1828:	f800283a 	ret
    182c:	2007883a 	mov	r3,r4
    1830:	003ff206 	br	17fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017fc>
    1834:	2007883a 	mov	r3,r4
    1838:	003ff106 	br	1800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001800>
    183c:	200d883a 	mov	r6,r4
    1840:	003fee06 	br	17fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017fc>

00001844 <memmove>:
    1844:	2005883a 	mov	r2,r4
    1848:	29000b2e 	bgeu	r5,r4,1878 <memmove+0x34>
    184c:	298f883a 	add	r7,r5,r6
    1850:	21c0092e 	bgeu	r4,r7,1878 <memmove+0x34>
    1854:	2187883a 	add	r3,r4,r6
    1858:	198bc83a 	sub	r5,r3,r6
    185c:	30004826 	beq	r6,zero,1980 <memmove+0x13c>
    1860:	39ffffc4 	addi	r7,r7,-1
    1864:	39000003 	ldbu	r4,0(r7)
    1868:	18ffffc4 	addi	r3,r3,-1
    186c:	19000005 	stb	r4,0(r3)
    1870:	28fffb1e 	bne	r5,r3,1860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001860>
    1874:	f800283a 	ret
    1878:	00c003c4 	movi	r3,15
    187c:	1980412e 	bgeu	r3,r6,1984 <memmove+0x140>
    1880:	2886b03a 	or	r3,r5,r2
    1884:	18c000cc 	andi	r3,r3,3
    1888:	1800401e 	bne	r3,zero,198c <memmove+0x148>
    188c:	33fffc04 	addi	r15,r6,-16
    1890:	781ed13a 	srli	r15,r15,4
    1894:	28c00104 	addi	r3,r5,4
    1898:	13400104 	addi	r13,r2,4
    189c:	781c913a 	slli	r14,r15,4
    18a0:	2b000204 	addi	r12,r5,8
    18a4:	12c00204 	addi	r11,r2,8
    18a8:	73800504 	addi	r14,r14,20
    18ac:	2a800304 	addi	r10,r5,12
    18b0:	12400304 	addi	r9,r2,12
    18b4:	2b9d883a 	add	r14,r5,r14
    18b8:	2811883a 	mov	r8,r5
    18bc:	100f883a 	mov	r7,r2
    18c0:	41000017 	ldw	r4,0(r8)
    18c4:	39c00404 	addi	r7,r7,16
    18c8:	18c00404 	addi	r3,r3,16
    18cc:	393ffc15 	stw	r4,-16(r7)
    18d0:	193ffc17 	ldw	r4,-16(r3)
    18d4:	6b400404 	addi	r13,r13,16
    18d8:	5ac00404 	addi	r11,r11,16
    18dc:	693ffc15 	stw	r4,-16(r13)
    18e0:	61000017 	ldw	r4,0(r12)
    18e4:	4a400404 	addi	r9,r9,16
    18e8:	42000404 	addi	r8,r8,16
    18ec:	593ffc15 	stw	r4,-16(r11)
    18f0:	51000017 	ldw	r4,0(r10)
    18f4:	63000404 	addi	r12,r12,16
    18f8:	52800404 	addi	r10,r10,16
    18fc:	493ffc15 	stw	r4,-16(r9)
    1900:	1bbfef1e 	bne	r3,r14,18c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018c0>
    1904:	79000044 	addi	r4,r15,1
    1908:	2008913a 	slli	r4,r4,4
    190c:	328003cc 	andi	r10,r6,15
    1910:	02c000c4 	movi	r11,3
    1914:	1107883a 	add	r3,r2,r4
    1918:	290b883a 	add	r5,r5,r4
    191c:	5a801e2e 	bgeu	r11,r10,1998 <memmove+0x154>
    1920:	1813883a 	mov	r9,r3
    1924:	2811883a 	mov	r8,r5
    1928:	500f883a 	mov	r7,r10
    192c:	41000017 	ldw	r4,0(r8)
    1930:	4a400104 	addi	r9,r9,4
    1934:	39ffff04 	addi	r7,r7,-4
    1938:	493fff15 	stw	r4,-4(r9)
    193c:	42000104 	addi	r8,r8,4
    1940:	59fffa36 	bltu	r11,r7,192c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700192c>
    1944:	513fff04 	addi	r4,r10,-4
    1948:	2008d0ba 	srli	r4,r4,2
    194c:	318000cc 	andi	r6,r6,3
    1950:	21000044 	addi	r4,r4,1
    1954:	2109883a 	add	r4,r4,r4
    1958:	2109883a 	add	r4,r4,r4
    195c:	1907883a 	add	r3,r3,r4
    1960:	290b883a 	add	r5,r5,r4
    1964:	30000b26 	beq	r6,zero,1994 <memmove+0x150>
    1968:	198d883a 	add	r6,r3,r6
    196c:	29c00003 	ldbu	r7,0(r5)
    1970:	18c00044 	addi	r3,r3,1
    1974:	29400044 	addi	r5,r5,1
    1978:	19ffffc5 	stb	r7,-1(r3)
    197c:	19bffb1e 	bne	r3,r6,196c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700196c>
    1980:	f800283a 	ret
    1984:	1007883a 	mov	r3,r2
    1988:	003ff606 	br	1964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001964>
    198c:	1007883a 	mov	r3,r2
    1990:	003ff506 	br	1968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001968>
    1994:	f800283a 	ret
    1998:	500d883a 	mov	r6,r10
    199c:	003ff106 	br	1964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001964>

000019a0 <memset>:
    19a0:	20c000cc 	andi	r3,r4,3
    19a4:	2005883a 	mov	r2,r4
    19a8:	18004426 	beq	r3,zero,1abc <memset+0x11c>
    19ac:	31ffffc4 	addi	r7,r6,-1
    19b0:	30004026 	beq	r6,zero,1ab4 <memset+0x114>
    19b4:	2813883a 	mov	r9,r5
    19b8:	200d883a 	mov	r6,r4
    19bc:	2007883a 	mov	r3,r4
    19c0:	00000406 	br	19d4 <memset+0x34>
    19c4:	3a3fffc4 	addi	r8,r7,-1
    19c8:	31800044 	addi	r6,r6,1
    19cc:	38003926 	beq	r7,zero,1ab4 <memset+0x114>
    19d0:	400f883a 	mov	r7,r8
    19d4:	18c00044 	addi	r3,r3,1
    19d8:	32400005 	stb	r9,0(r6)
    19dc:	1a0000cc 	andi	r8,r3,3
    19e0:	403ff81e 	bne	r8,zero,19c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019c4>
    19e4:	010000c4 	movi	r4,3
    19e8:	21c02d2e 	bgeu	r4,r7,1aa0 <memset+0x100>
    19ec:	29003fcc 	andi	r4,r5,255
    19f0:	200c923a 	slli	r6,r4,8
    19f4:	3108b03a 	or	r4,r6,r4
    19f8:	200c943a 	slli	r6,r4,16
    19fc:	218cb03a 	or	r6,r4,r6
    1a00:	010003c4 	movi	r4,15
    1a04:	21c0182e 	bgeu	r4,r7,1a68 <memset+0xc8>
    1a08:	3b3ffc04 	addi	r12,r7,-16
    1a0c:	6018d13a 	srli	r12,r12,4
    1a10:	1a000104 	addi	r8,r3,4
    1a14:	1ac00204 	addi	r11,r3,8
    1a18:	6008913a 	slli	r4,r12,4
    1a1c:	1a800304 	addi	r10,r3,12
    1a20:	1813883a 	mov	r9,r3
    1a24:	21000504 	addi	r4,r4,20
    1a28:	1909883a 	add	r4,r3,r4
    1a2c:	49800015 	stw	r6,0(r9)
    1a30:	41800015 	stw	r6,0(r8)
    1a34:	59800015 	stw	r6,0(r11)
    1a38:	51800015 	stw	r6,0(r10)
    1a3c:	42000404 	addi	r8,r8,16
    1a40:	4a400404 	addi	r9,r9,16
    1a44:	5ac00404 	addi	r11,r11,16
    1a48:	52800404 	addi	r10,r10,16
    1a4c:	413ff71e 	bne	r8,r4,1a2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a2c>
    1a50:	63000044 	addi	r12,r12,1
    1a54:	6018913a 	slli	r12,r12,4
    1a58:	39c003cc 	andi	r7,r7,15
    1a5c:	010000c4 	movi	r4,3
    1a60:	1b07883a 	add	r3,r3,r12
    1a64:	21c00e2e 	bgeu	r4,r7,1aa0 <memset+0x100>
    1a68:	1813883a 	mov	r9,r3
    1a6c:	3811883a 	mov	r8,r7
    1a70:	010000c4 	movi	r4,3
    1a74:	49800015 	stw	r6,0(r9)
    1a78:	423fff04 	addi	r8,r8,-4
    1a7c:	4a400104 	addi	r9,r9,4
    1a80:	223ffc36 	bltu	r4,r8,1a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a74>
    1a84:	393fff04 	addi	r4,r7,-4
    1a88:	2008d0ba 	srli	r4,r4,2
    1a8c:	39c000cc 	andi	r7,r7,3
    1a90:	21000044 	addi	r4,r4,1
    1a94:	2109883a 	add	r4,r4,r4
    1a98:	2109883a 	add	r4,r4,r4
    1a9c:	1907883a 	add	r3,r3,r4
    1aa0:	38000526 	beq	r7,zero,1ab8 <memset+0x118>
    1aa4:	19cf883a 	add	r7,r3,r7
    1aa8:	19400005 	stb	r5,0(r3)
    1aac:	18c00044 	addi	r3,r3,1
    1ab0:	38fffd1e 	bne	r7,r3,1aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001aa8>
    1ab4:	f800283a 	ret
    1ab8:	f800283a 	ret
    1abc:	2007883a 	mov	r3,r4
    1ac0:	300f883a 	mov	r7,r6
    1ac4:	003fc706 	br	19e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019e4>

00001ac8 <_realloc_r>:
    1ac8:	defff604 	addi	sp,sp,-40
    1acc:	dc800215 	stw	r18,8(sp)
    1ad0:	dfc00915 	stw	ra,36(sp)
    1ad4:	df000815 	stw	fp,32(sp)
    1ad8:	ddc00715 	stw	r23,28(sp)
    1adc:	dd800615 	stw	r22,24(sp)
    1ae0:	dd400515 	stw	r21,20(sp)
    1ae4:	dd000415 	stw	r20,16(sp)
    1ae8:	dcc00315 	stw	r19,12(sp)
    1aec:	dc400115 	stw	r17,4(sp)
    1af0:	dc000015 	stw	r16,0(sp)
    1af4:	3025883a 	mov	r18,r6
    1af8:	2800b726 	beq	r5,zero,1dd8 <_realloc_r+0x310>
    1afc:	282b883a 	mov	r21,r5
    1b00:	2029883a 	mov	r20,r4
    1b04:	00036480 	call	3648 <__malloc_lock>
    1b08:	a8bfff17 	ldw	r2,-4(r21)
    1b0c:	043fff04 	movi	r16,-4
    1b10:	90c002c4 	addi	r3,r18,11
    1b14:	01000584 	movi	r4,22
    1b18:	acfffe04 	addi	r19,r21,-8
    1b1c:	1420703a 	and	r16,r2,r16
    1b20:	20c0332e 	bgeu	r4,r3,1bf0 <_realloc_r+0x128>
    1b24:	047ffe04 	movi	r17,-8
    1b28:	1c62703a 	and	r17,r3,r17
    1b2c:	8807883a 	mov	r3,r17
    1b30:	88005816 	blt	r17,zero,1c94 <_realloc_r+0x1cc>
    1b34:	8c805736 	bltu	r17,r18,1c94 <_realloc_r+0x1cc>
    1b38:	80c0300e 	bge	r16,r3,1bfc <_realloc_r+0x134>
    1b3c:	07000034 	movhi	fp,0
    1b40:	e718d004 	addi	fp,fp,25408
    1b44:	e1c00217 	ldw	r7,8(fp)
    1b48:	9c09883a 	add	r4,r19,r16
    1b4c:	22000117 	ldw	r8,4(r4)
    1b50:	21c06326 	beq	r4,r7,1ce0 <_realloc_r+0x218>
    1b54:	017fff84 	movi	r5,-2
    1b58:	414a703a 	and	r5,r8,r5
    1b5c:	214b883a 	add	r5,r4,r5
    1b60:	29800117 	ldw	r6,4(r5)
    1b64:	3180004c 	andi	r6,r6,1
    1b68:	30003f26 	beq	r6,zero,1c68 <_realloc_r+0x1a0>
    1b6c:	1080004c 	andi	r2,r2,1
    1b70:	10008326 	beq	r2,zero,1d80 <_realloc_r+0x2b8>
    1b74:	900b883a 	mov	r5,r18
    1b78:	a009883a 	mov	r4,r20
    1b7c:	0000e0c0 	call	e0c <_malloc_r>
    1b80:	1025883a 	mov	r18,r2
    1b84:	10011e26 	beq	r2,zero,2000 <_realloc_r+0x538>
    1b88:	a93fff17 	ldw	r4,-4(r21)
    1b8c:	10fffe04 	addi	r3,r2,-8
    1b90:	00bfff84 	movi	r2,-2
    1b94:	2084703a 	and	r2,r4,r2
    1b98:	9885883a 	add	r2,r19,r2
    1b9c:	1880ee26 	beq	r3,r2,1f58 <_realloc_r+0x490>
    1ba0:	81bfff04 	addi	r6,r16,-4
    1ba4:	00800904 	movi	r2,36
    1ba8:	1180b836 	bltu	r2,r6,1e8c <_realloc_r+0x3c4>
    1bac:	00c004c4 	movi	r3,19
    1bb0:	19809636 	bltu	r3,r6,1e0c <_realloc_r+0x344>
    1bb4:	9005883a 	mov	r2,r18
    1bb8:	a807883a 	mov	r3,r21
    1bbc:	19000017 	ldw	r4,0(r3)
    1bc0:	11000015 	stw	r4,0(r2)
    1bc4:	19000117 	ldw	r4,4(r3)
    1bc8:	11000115 	stw	r4,4(r2)
    1bcc:	18c00217 	ldw	r3,8(r3)
    1bd0:	10c00215 	stw	r3,8(r2)
    1bd4:	a80b883a 	mov	r5,r21
    1bd8:	a009883a 	mov	r4,r20
    1bdc:	00028940 	call	2894 <_free_r>
    1be0:	a009883a 	mov	r4,r20
    1be4:	000366c0 	call	366c <__malloc_unlock>
    1be8:	9005883a 	mov	r2,r18
    1bec:	00001206 	br	1c38 <_realloc_r+0x170>
    1bf0:	00c00404 	movi	r3,16
    1bf4:	1823883a 	mov	r17,r3
    1bf8:	003fce06 	br	1b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b34>
    1bfc:	a825883a 	mov	r18,r21
    1c00:	8445c83a 	sub	r2,r16,r17
    1c04:	00c003c4 	movi	r3,15
    1c08:	18802636 	bltu	r3,r2,1ca4 <_realloc_r+0x1dc>
    1c0c:	99800117 	ldw	r6,4(r19)
    1c10:	9c07883a 	add	r3,r19,r16
    1c14:	3180004c 	andi	r6,r6,1
    1c18:	3420b03a 	or	r16,r6,r16
    1c1c:	9c000115 	stw	r16,4(r19)
    1c20:	18800117 	ldw	r2,4(r3)
    1c24:	10800054 	ori	r2,r2,1
    1c28:	18800115 	stw	r2,4(r3)
    1c2c:	a009883a 	mov	r4,r20
    1c30:	000366c0 	call	366c <__malloc_unlock>
    1c34:	9005883a 	mov	r2,r18
    1c38:	dfc00917 	ldw	ra,36(sp)
    1c3c:	df000817 	ldw	fp,32(sp)
    1c40:	ddc00717 	ldw	r23,28(sp)
    1c44:	dd800617 	ldw	r22,24(sp)
    1c48:	dd400517 	ldw	r21,20(sp)
    1c4c:	dd000417 	ldw	r20,16(sp)
    1c50:	dcc00317 	ldw	r19,12(sp)
    1c54:	dc800217 	ldw	r18,8(sp)
    1c58:	dc400117 	ldw	r17,4(sp)
    1c5c:	dc000017 	ldw	r16,0(sp)
    1c60:	dec00a04 	addi	sp,sp,40
    1c64:	f800283a 	ret
    1c68:	017fff04 	movi	r5,-4
    1c6c:	414a703a 	and	r5,r8,r5
    1c70:	814d883a 	add	r6,r16,r5
    1c74:	30c01f16 	blt	r6,r3,1cf4 <_realloc_r+0x22c>
    1c78:	20800317 	ldw	r2,12(r4)
    1c7c:	20c00217 	ldw	r3,8(r4)
    1c80:	a825883a 	mov	r18,r21
    1c84:	3021883a 	mov	r16,r6
    1c88:	18800315 	stw	r2,12(r3)
    1c8c:	10c00215 	stw	r3,8(r2)
    1c90:	003fdb06 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1c94:	00800304 	movi	r2,12
    1c98:	a0800015 	stw	r2,0(r20)
    1c9c:	0005883a 	mov	r2,zero
    1ca0:	003fe506 	br	1c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c38>
    1ca4:	98c00117 	ldw	r3,4(r19)
    1ca8:	9c4b883a 	add	r5,r19,r17
    1cac:	11000054 	ori	r4,r2,1
    1cb0:	18c0004c 	andi	r3,r3,1
    1cb4:	1c62b03a 	or	r17,r3,r17
    1cb8:	9c400115 	stw	r17,4(r19)
    1cbc:	29000115 	stw	r4,4(r5)
    1cc0:	2885883a 	add	r2,r5,r2
    1cc4:	10c00117 	ldw	r3,4(r2)
    1cc8:	29400204 	addi	r5,r5,8
    1ccc:	a009883a 	mov	r4,r20
    1cd0:	18c00054 	ori	r3,r3,1
    1cd4:	10c00115 	stw	r3,4(r2)
    1cd8:	00028940 	call	2894 <_free_r>
    1cdc:	003fd306 	br	1c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c2c>
    1ce0:	017fff04 	movi	r5,-4
    1ce4:	414a703a 	and	r5,r8,r5
    1ce8:	89800404 	addi	r6,r17,16
    1cec:	8151883a 	add	r8,r16,r5
    1cf0:	4180590e 	bge	r8,r6,1e58 <_realloc_r+0x390>
    1cf4:	1080004c 	andi	r2,r2,1
    1cf8:	103f9e1e 	bne	r2,zero,1b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b74>
    1cfc:	adbffe17 	ldw	r22,-8(r21)
    1d00:	00bfff04 	movi	r2,-4
    1d04:	9dadc83a 	sub	r22,r19,r22
    1d08:	b1800117 	ldw	r6,4(r22)
    1d0c:	3084703a 	and	r2,r6,r2
    1d10:	20002026 	beq	r4,zero,1d94 <_realloc_r+0x2cc>
    1d14:	80af883a 	add	r23,r16,r2
    1d18:	b96f883a 	add	r23,r23,r5
    1d1c:	21c05f26 	beq	r4,r7,1e9c <_realloc_r+0x3d4>
    1d20:	b8c01c16 	blt	r23,r3,1d94 <_realloc_r+0x2cc>
    1d24:	20800317 	ldw	r2,12(r4)
    1d28:	20c00217 	ldw	r3,8(r4)
    1d2c:	81bfff04 	addi	r6,r16,-4
    1d30:	01000904 	movi	r4,36
    1d34:	18800315 	stw	r2,12(r3)
    1d38:	10c00215 	stw	r3,8(r2)
    1d3c:	b0c00217 	ldw	r3,8(r22)
    1d40:	b0800317 	ldw	r2,12(r22)
    1d44:	b4800204 	addi	r18,r22,8
    1d48:	18800315 	stw	r2,12(r3)
    1d4c:	10c00215 	stw	r3,8(r2)
    1d50:	21801b36 	bltu	r4,r6,1dc0 <_realloc_r+0x2f8>
    1d54:	008004c4 	movi	r2,19
    1d58:	1180352e 	bgeu	r2,r6,1e30 <_realloc_r+0x368>
    1d5c:	a8800017 	ldw	r2,0(r21)
    1d60:	b0800215 	stw	r2,8(r22)
    1d64:	a8800117 	ldw	r2,4(r21)
    1d68:	b0800315 	stw	r2,12(r22)
    1d6c:	008006c4 	movi	r2,27
    1d70:	11807f36 	bltu	r2,r6,1f70 <_realloc_r+0x4a8>
    1d74:	b0800404 	addi	r2,r22,16
    1d78:	ad400204 	addi	r21,r21,8
    1d7c:	00002d06 	br	1e34 <_realloc_r+0x36c>
    1d80:	adbffe17 	ldw	r22,-8(r21)
    1d84:	00bfff04 	movi	r2,-4
    1d88:	9dadc83a 	sub	r22,r19,r22
    1d8c:	b1000117 	ldw	r4,4(r22)
    1d90:	2084703a 	and	r2,r4,r2
    1d94:	b03f7726 	beq	r22,zero,1b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b74>
    1d98:	80af883a 	add	r23,r16,r2
    1d9c:	b8ff7516 	blt	r23,r3,1b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b74>
    1da0:	b0800317 	ldw	r2,12(r22)
    1da4:	b0c00217 	ldw	r3,8(r22)
    1da8:	81bfff04 	addi	r6,r16,-4
    1dac:	01000904 	movi	r4,36
    1db0:	18800315 	stw	r2,12(r3)
    1db4:	10c00215 	stw	r3,8(r2)
    1db8:	b4800204 	addi	r18,r22,8
    1dbc:	21bfe52e 	bgeu	r4,r6,1d54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d54>
    1dc0:	a80b883a 	mov	r5,r21
    1dc4:	9009883a 	mov	r4,r18
    1dc8:	00018440 	call	1844 <memmove>
    1dcc:	b821883a 	mov	r16,r23
    1dd0:	b027883a 	mov	r19,r22
    1dd4:	003f8a06 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1dd8:	300b883a 	mov	r5,r6
    1ddc:	dfc00917 	ldw	ra,36(sp)
    1de0:	df000817 	ldw	fp,32(sp)
    1de4:	ddc00717 	ldw	r23,28(sp)
    1de8:	dd800617 	ldw	r22,24(sp)
    1dec:	dd400517 	ldw	r21,20(sp)
    1df0:	dd000417 	ldw	r20,16(sp)
    1df4:	dcc00317 	ldw	r19,12(sp)
    1df8:	dc800217 	ldw	r18,8(sp)
    1dfc:	dc400117 	ldw	r17,4(sp)
    1e00:	dc000017 	ldw	r16,0(sp)
    1e04:	dec00a04 	addi	sp,sp,40
    1e08:	0000e0c1 	jmpi	e0c <_malloc_r>
    1e0c:	a8c00017 	ldw	r3,0(r21)
    1e10:	90c00015 	stw	r3,0(r18)
    1e14:	a8c00117 	ldw	r3,4(r21)
    1e18:	90c00115 	stw	r3,4(r18)
    1e1c:	00c006c4 	movi	r3,27
    1e20:	19804536 	bltu	r3,r6,1f38 <_realloc_r+0x470>
    1e24:	90800204 	addi	r2,r18,8
    1e28:	a8c00204 	addi	r3,r21,8
    1e2c:	003f6306 	br	1bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bbc>
    1e30:	9005883a 	mov	r2,r18
    1e34:	a8c00017 	ldw	r3,0(r21)
    1e38:	b821883a 	mov	r16,r23
    1e3c:	b027883a 	mov	r19,r22
    1e40:	10c00015 	stw	r3,0(r2)
    1e44:	a8c00117 	ldw	r3,4(r21)
    1e48:	10c00115 	stw	r3,4(r2)
    1e4c:	a8c00217 	ldw	r3,8(r21)
    1e50:	10c00215 	stw	r3,8(r2)
    1e54:	003f6a06 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1e58:	9c67883a 	add	r19,r19,r17
    1e5c:	4445c83a 	sub	r2,r8,r17
    1e60:	e4c00215 	stw	r19,8(fp)
    1e64:	10800054 	ori	r2,r2,1
    1e68:	98800115 	stw	r2,4(r19)
    1e6c:	a8bfff17 	ldw	r2,-4(r21)
    1e70:	a009883a 	mov	r4,r20
    1e74:	1080004c 	andi	r2,r2,1
    1e78:	1462b03a 	or	r17,r2,r17
    1e7c:	ac7fff15 	stw	r17,-4(r21)
    1e80:	000366c0 	call	366c <__malloc_unlock>
    1e84:	a805883a 	mov	r2,r21
    1e88:	003f6b06 	br	1c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c38>
    1e8c:	a80b883a 	mov	r5,r21
    1e90:	9009883a 	mov	r4,r18
    1e94:	00018440 	call	1844 <memmove>
    1e98:	003f4e06 	br	1bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bd4>
    1e9c:	89000404 	addi	r4,r17,16
    1ea0:	b93fbc16 	blt	r23,r4,1d94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d94>
    1ea4:	b0800317 	ldw	r2,12(r22)
    1ea8:	b0c00217 	ldw	r3,8(r22)
    1eac:	81bfff04 	addi	r6,r16,-4
    1eb0:	01000904 	movi	r4,36
    1eb4:	18800315 	stw	r2,12(r3)
    1eb8:	10c00215 	stw	r3,8(r2)
    1ebc:	b4800204 	addi	r18,r22,8
    1ec0:	21804336 	bltu	r4,r6,1fd0 <_realloc_r+0x508>
    1ec4:	008004c4 	movi	r2,19
    1ec8:	11803f2e 	bgeu	r2,r6,1fc8 <_realloc_r+0x500>
    1ecc:	a8800017 	ldw	r2,0(r21)
    1ed0:	b0800215 	stw	r2,8(r22)
    1ed4:	a8800117 	ldw	r2,4(r21)
    1ed8:	b0800315 	stw	r2,12(r22)
    1edc:	008006c4 	movi	r2,27
    1ee0:	11803f36 	bltu	r2,r6,1fe0 <_realloc_r+0x518>
    1ee4:	b0800404 	addi	r2,r22,16
    1ee8:	ad400204 	addi	r21,r21,8
    1eec:	a8c00017 	ldw	r3,0(r21)
    1ef0:	10c00015 	stw	r3,0(r2)
    1ef4:	a8c00117 	ldw	r3,4(r21)
    1ef8:	10c00115 	stw	r3,4(r2)
    1efc:	a8c00217 	ldw	r3,8(r21)
    1f00:	10c00215 	stw	r3,8(r2)
    1f04:	b447883a 	add	r3,r22,r17
    1f08:	bc45c83a 	sub	r2,r23,r17
    1f0c:	e0c00215 	stw	r3,8(fp)
    1f10:	10800054 	ori	r2,r2,1
    1f14:	18800115 	stw	r2,4(r3)
    1f18:	b0800117 	ldw	r2,4(r22)
    1f1c:	a009883a 	mov	r4,r20
    1f20:	1080004c 	andi	r2,r2,1
    1f24:	1462b03a 	or	r17,r2,r17
    1f28:	b4400115 	stw	r17,4(r22)
    1f2c:	000366c0 	call	366c <__malloc_unlock>
    1f30:	9005883a 	mov	r2,r18
    1f34:	003f4006 	br	1c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c38>
    1f38:	a8c00217 	ldw	r3,8(r21)
    1f3c:	90c00215 	stw	r3,8(r18)
    1f40:	a8c00317 	ldw	r3,12(r21)
    1f44:	90c00315 	stw	r3,12(r18)
    1f48:	30801126 	beq	r6,r2,1f90 <_realloc_r+0x4c8>
    1f4c:	90800404 	addi	r2,r18,16
    1f50:	a8c00404 	addi	r3,r21,16
    1f54:	003f1906 	br	1bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bbc>
    1f58:	90ffff17 	ldw	r3,-4(r18)
    1f5c:	00bfff04 	movi	r2,-4
    1f60:	a825883a 	mov	r18,r21
    1f64:	1884703a 	and	r2,r3,r2
    1f68:	80a1883a 	add	r16,r16,r2
    1f6c:	003f2406 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1f70:	a8800217 	ldw	r2,8(r21)
    1f74:	b0800415 	stw	r2,16(r22)
    1f78:	a8800317 	ldw	r2,12(r21)
    1f7c:	b0800515 	stw	r2,20(r22)
    1f80:	31000a26 	beq	r6,r4,1fac <_realloc_r+0x4e4>
    1f84:	b0800604 	addi	r2,r22,24
    1f88:	ad400404 	addi	r21,r21,16
    1f8c:	003fa906 	br	1e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e34>
    1f90:	a9000417 	ldw	r4,16(r21)
    1f94:	90800604 	addi	r2,r18,24
    1f98:	a8c00604 	addi	r3,r21,24
    1f9c:	91000415 	stw	r4,16(r18)
    1fa0:	a9000517 	ldw	r4,20(r21)
    1fa4:	91000515 	stw	r4,20(r18)
    1fa8:	003f0406 	br	1bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bbc>
    1fac:	a8c00417 	ldw	r3,16(r21)
    1fb0:	ad400604 	addi	r21,r21,24
    1fb4:	b0800804 	addi	r2,r22,32
    1fb8:	b0c00615 	stw	r3,24(r22)
    1fbc:	a8ffff17 	ldw	r3,-4(r21)
    1fc0:	b0c00715 	stw	r3,28(r22)
    1fc4:	003f9b06 	br	1e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e34>
    1fc8:	9005883a 	mov	r2,r18
    1fcc:	003fc706 	br	1eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001eec>
    1fd0:	a80b883a 	mov	r5,r21
    1fd4:	9009883a 	mov	r4,r18
    1fd8:	00018440 	call	1844 <memmove>
    1fdc:	003fc906 	br	1f04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f04>
    1fe0:	a8800217 	ldw	r2,8(r21)
    1fe4:	b0800415 	stw	r2,16(r22)
    1fe8:	a8800317 	ldw	r2,12(r21)
    1fec:	b0800515 	stw	r2,20(r22)
    1ff0:	31000726 	beq	r6,r4,2010 <_realloc_r+0x548>
    1ff4:	b0800604 	addi	r2,r22,24
    1ff8:	ad400404 	addi	r21,r21,16
    1ffc:	003fbb06 	br	1eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001eec>
    2000:	a009883a 	mov	r4,r20
    2004:	000366c0 	call	366c <__malloc_unlock>
    2008:	0005883a 	mov	r2,zero
    200c:	003f0a06 	br	1c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c38>
    2010:	a8c00417 	ldw	r3,16(r21)
    2014:	ad400604 	addi	r21,r21,24
    2018:	b0800804 	addi	r2,r22,32
    201c:	b0c00615 	stw	r3,24(r22)
    2020:	a8ffff17 	ldw	r3,-4(r21)
    2024:	b0c00715 	stw	r3,28(r22)
    2028:	003fb006 	br	1eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001eec>

0000202c <_sbrk_r>:
    202c:	defffd04 	addi	sp,sp,-12
    2030:	dc000015 	stw	r16,0(sp)
    2034:	04000074 	movhi	r16,1
    2038:	dc400115 	stw	r17,4(sp)
    203c:	84257e04 	addi	r16,r16,-27144
    2040:	2023883a 	mov	r17,r4
    2044:	2809883a 	mov	r4,r5
    2048:	dfc00215 	stw	ra,8(sp)
    204c:	80000015 	stw	zero,0(r16)
    2050:	00038540 	call	3854 <sbrk>
    2054:	00ffffc4 	movi	r3,-1
    2058:	10c00526 	beq	r2,r3,2070 <_sbrk_r+0x44>
    205c:	dfc00217 	ldw	ra,8(sp)
    2060:	dc400117 	ldw	r17,4(sp)
    2064:	dc000017 	ldw	r16,0(sp)
    2068:	dec00304 	addi	sp,sp,12
    206c:	f800283a 	ret
    2070:	80c00017 	ldw	r3,0(r16)
    2074:	183ff926 	beq	r3,zero,205c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700205c>
    2078:	88c00015 	stw	r3,0(r17)
    207c:	003ff706 	br	205c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700205c>

00002080 <__sread>:
    2080:	defffe04 	addi	sp,sp,-8
    2084:	dc000015 	stw	r16,0(sp)
    2088:	2821883a 	mov	r16,r5
    208c:	2940038f 	ldh	r5,14(r5)
    2090:	dfc00115 	stw	ra,4(sp)
    2094:	0002dc00 	call	2dc0 <_read_r>
    2098:	10000716 	blt	r2,zero,20b8 <__sread+0x38>
    209c:	80c01417 	ldw	r3,80(r16)
    20a0:	1887883a 	add	r3,r3,r2
    20a4:	80c01415 	stw	r3,80(r16)
    20a8:	dfc00117 	ldw	ra,4(sp)
    20ac:	dc000017 	ldw	r16,0(sp)
    20b0:	dec00204 	addi	sp,sp,8
    20b4:	f800283a 	ret
    20b8:	80c0030b 	ldhu	r3,12(r16)
    20bc:	18fbffcc 	andi	r3,r3,61439
    20c0:	80c0030d 	sth	r3,12(r16)
    20c4:	dfc00117 	ldw	ra,4(sp)
    20c8:	dc000017 	ldw	r16,0(sp)
    20cc:	dec00204 	addi	sp,sp,8
    20d0:	f800283a 	ret

000020d4 <__seofread>:
    20d4:	0005883a 	mov	r2,zero
    20d8:	f800283a 	ret

000020dc <__swrite>:
    20dc:	2880030b 	ldhu	r2,12(r5)
    20e0:	defffb04 	addi	sp,sp,-20
    20e4:	dcc00315 	stw	r19,12(sp)
    20e8:	dc800215 	stw	r18,8(sp)
    20ec:	dc400115 	stw	r17,4(sp)
    20f0:	dc000015 	stw	r16,0(sp)
    20f4:	dfc00415 	stw	ra,16(sp)
    20f8:	10c0400c 	andi	r3,r2,256
    20fc:	2821883a 	mov	r16,r5
    2100:	2023883a 	mov	r17,r4
    2104:	3025883a 	mov	r18,r6
    2108:	3827883a 	mov	r19,r7
    210c:	18000526 	beq	r3,zero,2124 <__swrite+0x48>
    2110:	2940038f 	ldh	r5,14(r5)
    2114:	01c00084 	movi	r7,2
    2118:	000d883a 	mov	r6,zero
    211c:	0002ba40 	call	2ba4 <_lseek_r>
    2120:	8080030b 	ldhu	r2,12(r16)
    2124:	8140038f 	ldh	r5,14(r16)
    2128:	10bbffcc 	andi	r2,r2,61439
    212c:	980f883a 	mov	r7,r19
    2130:	900d883a 	mov	r6,r18
    2134:	8809883a 	mov	r4,r17
    2138:	8080030d 	sth	r2,12(r16)
    213c:	dfc00417 	ldw	ra,16(sp)
    2140:	dcc00317 	ldw	r19,12(sp)
    2144:	dc800217 	ldw	r18,8(sp)
    2148:	dc400117 	ldw	r17,4(sp)
    214c:	dc000017 	ldw	r16,0(sp)
    2150:	dec00504 	addi	sp,sp,20
    2154:	00021bc1 	jmpi	21bc <_write_r>

00002158 <__sseek>:
    2158:	defffe04 	addi	sp,sp,-8
    215c:	dc000015 	stw	r16,0(sp)
    2160:	2821883a 	mov	r16,r5
    2164:	2940038f 	ldh	r5,14(r5)
    2168:	dfc00115 	stw	ra,4(sp)
    216c:	0002ba40 	call	2ba4 <_lseek_r>
    2170:	00ffffc4 	movi	r3,-1
    2174:	10c00826 	beq	r2,r3,2198 <__sseek+0x40>
    2178:	80c0030b 	ldhu	r3,12(r16)
    217c:	80801415 	stw	r2,80(r16)
    2180:	18c40014 	ori	r3,r3,4096
    2184:	80c0030d 	sth	r3,12(r16)
    2188:	dfc00117 	ldw	ra,4(sp)
    218c:	dc000017 	ldw	r16,0(sp)
    2190:	dec00204 	addi	sp,sp,8
    2194:	f800283a 	ret
    2198:	80c0030b 	ldhu	r3,12(r16)
    219c:	18fbffcc 	andi	r3,r3,61439
    21a0:	80c0030d 	sth	r3,12(r16)
    21a4:	dfc00117 	ldw	ra,4(sp)
    21a8:	dc000017 	ldw	r16,0(sp)
    21ac:	dec00204 	addi	sp,sp,8
    21b0:	f800283a 	ret

000021b4 <__sclose>:
    21b4:	2940038f 	ldh	r5,14(r5)
    21b8:	00023701 	jmpi	2370 <_close_r>

000021bc <_write_r>:
    21bc:	defffd04 	addi	sp,sp,-12
    21c0:	2805883a 	mov	r2,r5
    21c4:	dc000015 	stw	r16,0(sp)
    21c8:	04000074 	movhi	r16,1
    21cc:	dc400115 	stw	r17,4(sp)
    21d0:	300b883a 	mov	r5,r6
    21d4:	84257e04 	addi	r16,r16,-27144
    21d8:	2023883a 	mov	r17,r4
    21dc:	380d883a 	mov	r6,r7
    21e0:	1009883a 	mov	r4,r2
    21e4:	dfc00215 	stw	ra,8(sp)
    21e8:	80000015 	stw	zero,0(r16)
    21ec:	00039400 	call	3940 <write>
    21f0:	00ffffc4 	movi	r3,-1
    21f4:	10c00526 	beq	r2,r3,220c <_write_r+0x50>
    21f8:	dfc00217 	ldw	ra,8(sp)
    21fc:	dc400117 	ldw	r17,4(sp)
    2200:	dc000017 	ldw	r16,0(sp)
    2204:	dec00304 	addi	sp,sp,12
    2208:	f800283a 	ret
    220c:	80c00017 	ldw	r3,0(r16)
    2210:	183ff926 	beq	r3,zero,21f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021f8>
    2214:	88c00015 	stw	r3,0(r17)
    2218:	003ff706 	br	21f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021f8>

0000221c <__swsetup_r>:
    221c:	00800034 	movhi	r2,0
    2220:	defffd04 	addi	sp,sp,-12
    2224:	109e9404 	addi	r2,r2,31312
    2228:	dc400115 	stw	r17,4(sp)
    222c:	2023883a 	mov	r17,r4
    2230:	11000017 	ldw	r4,0(r2)
    2234:	dc000015 	stw	r16,0(sp)
    2238:	dfc00215 	stw	ra,8(sp)
    223c:	2821883a 	mov	r16,r5
    2240:	20000226 	beq	r4,zero,224c <__swsetup_r+0x30>
    2244:	20800e17 	ldw	r2,56(r4)
    2248:	10003126 	beq	r2,zero,2310 <__swsetup_r+0xf4>
    224c:	8080030b 	ldhu	r2,12(r16)
    2250:	10c0020c 	andi	r3,r2,8
    2254:	1009883a 	mov	r4,r2
    2258:	18000f26 	beq	r3,zero,2298 <__swsetup_r+0x7c>
    225c:	80c00417 	ldw	r3,16(r16)
    2260:	18001526 	beq	r3,zero,22b8 <__swsetup_r+0x9c>
    2264:	1100004c 	andi	r4,r2,1
    2268:	20001c1e 	bne	r4,zero,22dc <__swsetup_r+0xc0>
    226c:	1080008c 	andi	r2,r2,2
    2270:	1000291e 	bne	r2,zero,2318 <__swsetup_r+0xfc>
    2274:	80800517 	ldw	r2,20(r16)
    2278:	80800215 	stw	r2,8(r16)
    227c:	18001c26 	beq	r3,zero,22f0 <__swsetup_r+0xd4>
    2280:	0005883a 	mov	r2,zero
    2284:	dfc00217 	ldw	ra,8(sp)
    2288:	dc400117 	ldw	r17,4(sp)
    228c:	dc000017 	ldw	r16,0(sp)
    2290:	dec00304 	addi	sp,sp,12
    2294:	f800283a 	ret
    2298:	2080040c 	andi	r2,r4,16
    229c:	10002e26 	beq	r2,zero,2358 <__swsetup_r+0x13c>
    22a0:	2080010c 	andi	r2,r4,4
    22a4:	10001e1e 	bne	r2,zero,2320 <__swsetup_r+0x104>
    22a8:	80c00417 	ldw	r3,16(r16)
    22ac:	20800214 	ori	r2,r4,8
    22b0:	8080030d 	sth	r2,12(r16)
    22b4:	183feb1e 	bne	r3,zero,2264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002264>
    22b8:	1100a00c 	andi	r4,r2,640
    22bc:	01408004 	movi	r5,512
    22c0:	217fe826 	beq	r4,r5,2264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002264>
    22c4:	800b883a 	mov	r5,r16
    22c8:	8809883a 	mov	r4,r17
    22cc:	0002c040 	call	2c04 <__smakebuf_r>
    22d0:	8080030b 	ldhu	r2,12(r16)
    22d4:	80c00417 	ldw	r3,16(r16)
    22d8:	003fe206 	br	2264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002264>
    22dc:	80800517 	ldw	r2,20(r16)
    22e0:	80000215 	stw	zero,8(r16)
    22e4:	0085c83a 	sub	r2,zero,r2
    22e8:	80800615 	stw	r2,24(r16)
    22ec:	183fe41e 	bne	r3,zero,2280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002280>
    22f0:	80c0030b 	ldhu	r3,12(r16)
    22f4:	0005883a 	mov	r2,zero
    22f8:	1900200c 	andi	r4,r3,128
    22fc:	203fe126 	beq	r4,zero,2284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002284>
    2300:	18c01014 	ori	r3,r3,64
    2304:	80c0030d 	sth	r3,12(r16)
    2308:	00bfffc4 	movi	r2,-1
    230c:	003fdd06 	br	2284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002284>
    2310:	000076c0 	call	76c <__sinit>
    2314:	003fcd06 	br	224c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700224c>
    2318:	0005883a 	mov	r2,zero
    231c:	003fd606 	br	2278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002278>
    2320:	81400c17 	ldw	r5,48(r16)
    2324:	28000626 	beq	r5,zero,2340 <__swsetup_r+0x124>
    2328:	80801004 	addi	r2,r16,64
    232c:	28800326 	beq	r5,r2,233c <__swsetup_r+0x120>
    2330:	8809883a 	mov	r4,r17
    2334:	00028940 	call	2894 <_free_r>
    2338:	8100030b 	ldhu	r4,12(r16)
    233c:	80000c15 	stw	zero,48(r16)
    2340:	80c00417 	ldw	r3,16(r16)
    2344:	00bff6c4 	movi	r2,-37
    2348:	1108703a 	and	r4,r2,r4
    234c:	80000115 	stw	zero,4(r16)
    2350:	80c00015 	stw	r3,0(r16)
    2354:	003fd506 	br	22ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022ac>
    2358:	00800244 	movi	r2,9
    235c:	88800015 	stw	r2,0(r17)
    2360:	20801014 	ori	r2,r4,64
    2364:	8080030d 	sth	r2,12(r16)
    2368:	00bfffc4 	movi	r2,-1
    236c:	003fc506 	br	2284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002284>

00002370 <_close_r>:
    2370:	defffd04 	addi	sp,sp,-12
    2374:	dc000015 	stw	r16,0(sp)
    2378:	04000074 	movhi	r16,1
    237c:	dc400115 	stw	r17,4(sp)
    2380:	84257e04 	addi	r16,r16,-27144
    2384:	2023883a 	mov	r17,r4
    2388:	2809883a 	mov	r4,r5
    238c:	dfc00215 	stw	ra,8(sp)
    2390:	80000015 	stw	zero,0(r16)
    2394:	00030e80 	call	30e8 <close>
    2398:	00ffffc4 	movi	r3,-1
    239c:	10c00526 	beq	r2,r3,23b4 <_close_r+0x44>
    23a0:	dfc00217 	ldw	ra,8(sp)
    23a4:	dc400117 	ldw	r17,4(sp)
    23a8:	dc000017 	ldw	r16,0(sp)
    23ac:	dec00304 	addi	sp,sp,12
    23b0:	f800283a 	ret
    23b4:	80c00017 	ldw	r3,0(r16)
    23b8:	183ff926 	beq	r3,zero,23a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023a0>
    23bc:	88c00015 	stw	r3,0(r17)
    23c0:	003ff706 	br	23a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023a0>

000023c4 <_fclose_r>:
    23c4:	28003926 	beq	r5,zero,24ac <_fclose_r+0xe8>
    23c8:	defffc04 	addi	sp,sp,-16
    23cc:	dc400115 	stw	r17,4(sp)
    23d0:	dc000015 	stw	r16,0(sp)
    23d4:	dfc00315 	stw	ra,12(sp)
    23d8:	dc800215 	stw	r18,8(sp)
    23dc:	2023883a 	mov	r17,r4
    23e0:	2821883a 	mov	r16,r5
    23e4:	20000226 	beq	r4,zero,23f0 <_fclose_r+0x2c>
    23e8:	20800e17 	ldw	r2,56(r4)
    23ec:	10002726 	beq	r2,zero,248c <_fclose_r+0xc8>
    23f0:	8080030f 	ldh	r2,12(r16)
    23f4:	1000071e 	bne	r2,zero,2414 <_fclose_r+0x50>
    23f8:	0005883a 	mov	r2,zero
    23fc:	dfc00317 	ldw	ra,12(sp)
    2400:	dc800217 	ldw	r18,8(sp)
    2404:	dc400117 	ldw	r17,4(sp)
    2408:	dc000017 	ldw	r16,0(sp)
    240c:	dec00404 	addi	sp,sp,16
    2410:	f800283a 	ret
    2414:	800b883a 	mov	r5,r16
    2418:	8809883a 	mov	r4,r17
    241c:	00024c80 	call	24c8 <__sflush_r>
    2420:	1025883a 	mov	r18,r2
    2424:	80800b17 	ldw	r2,44(r16)
    2428:	10000426 	beq	r2,zero,243c <_fclose_r+0x78>
    242c:	81400717 	ldw	r5,28(r16)
    2430:	8809883a 	mov	r4,r17
    2434:	103ee83a 	callr	r2
    2438:	10001616 	blt	r2,zero,2494 <_fclose_r+0xd0>
    243c:	8080030b 	ldhu	r2,12(r16)
    2440:	1080200c 	andi	r2,r2,128
    2444:	1000151e 	bne	r2,zero,249c <_fclose_r+0xd8>
    2448:	81400c17 	ldw	r5,48(r16)
    244c:	28000526 	beq	r5,zero,2464 <_fclose_r+0xa0>
    2450:	80801004 	addi	r2,r16,64
    2454:	28800226 	beq	r5,r2,2460 <_fclose_r+0x9c>
    2458:	8809883a 	mov	r4,r17
    245c:	00028940 	call	2894 <_free_r>
    2460:	80000c15 	stw	zero,48(r16)
    2464:	81401117 	ldw	r5,68(r16)
    2468:	28000326 	beq	r5,zero,2478 <_fclose_r+0xb4>
    246c:	8809883a 	mov	r4,r17
    2470:	00028940 	call	2894 <_free_r>
    2474:	80001115 	stw	zero,68(r16)
    2478:	000077c0 	call	77c <__sfp_lock_acquire>
    247c:	8000030d 	sth	zero,12(r16)
    2480:	00007800 	call	780 <__sfp_lock_release>
    2484:	9005883a 	mov	r2,r18
    2488:	003fdc06 	br	23fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023fc>
    248c:	000076c0 	call	76c <__sinit>
    2490:	003fd706 	br	23f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023f0>
    2494:	04bfffc4 	movi	r18,-1
    2498:	003fe806 	br	243c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700243c>
    249c:	81400417 	ldw	r5,16(r16)
    24a0:	8809883a 	mov	r4,r17
    24a4:	00028940 	call	2894 <_free_r>
    24a8:	003fe706 	br	2448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002448>
    24ac:	0005883a 	mov	r2,zero
    24b0:	f800283a 	ret

000024b4 <fclose>:
    24b4:	00800034 	movhi	r2,0
    24b8:	109e9404 	addi	r2,r2,31312
    24bc:	200b883a 	mov	r5,r4
    24c0:	11000017 	ldw	r4,0(r2)
    24c4:	00023c41 	jmpi	23c4 <_fclose_r>

000024c8 <__sflush_r>:
    24c8:	2880030b 	ldhu	r2,12(r5)
    24cc:	defffb04 	addi	sp,sp,-20
    24d0:	dcc00315 	stw	r19,12(sp)
    24d4:	dc400115 	stw	r17,4(sp)
    24d8:	dfc00415 	stw	ra,16(sp)
    24dc:	dc800215 	stw	r18,8(sp)
    24e0:	dc000015 	stw	r16,0(sp)
    24e4:	10c0020c 	andi	r3,r2,8
    24e8:	2823883a 	mov	r17,r5
    24ec:	2027883a 	mov	r19,r4
    24f0:	1800311e 	bne	r3,zero,25b8 <__sflush_r+0xf0>
    24f4:	28c00117 	ldw	r3,4(r5)
    24f8:	10820014 	ori	r2,r2,2048
    24fc:	2880030d 	sth	r2,12(r5)
    2500:	00c04b0e 	bge	zero,r3,2630 <__sflush_r+0x168>
    2504:	8a000a17 	ldw	r8,40(r17)
    2508:	40002326 	beq	r8,zero,2598 <__sflush_r+0xd0>
    250c:	9c000017 	ldw	r16,0(r19)
    2510:	10c4000c 	andi	r3,r2,4096
    2514:	98000015 	stw	zero,0(r19)
    2518:	18004826 	beq	r3,zero,263c <__sflush_r+0x174>
    251c:	89801417 	ldw	r6,80(r17)
    2520:	10c0010c 	andi	r3,r2,4
    2524:	18000626 	beq	r3,zero,2540 <__sflush_r+0x78>
    2528:	88c00117 	ldw	r3,4(r17)
    252c:	88800c17 	ldw	r2,48(r17)
    2530:	30cdc83a 	sub	r6,r6,r3
    2534:	10000226 	beq	r2,zero,2540 <__sflush_r+0x78>
    2538:	88800f17 	ldw	r2,60(r17)
    253c:	308dc83a 	sub	r6,r6,r2
    2540:	89400717 	ldw	r5,28(r17)
    2544:	000f883a 	mov	r7,zero
    2548:	9809883a 	mov	r4,r19
    254c:	403ee83a 	callr	r8
    2550:	00ffffc4 	movi	r3,-1
    2554:	10c04426 	beq	r2,r3,2668 <__sflush_r+0x1a0>
    2558:	88c0030b 	ldhu	r3,12(r17)
    255c:	89000417 	ldw	r4,16(r17)
    2560:	88000115 	stw	zero,4(r17)
    2564:	197dffcc 	andi	r5,r3,63487
    2568:	8940030d 	sth	r5,12(r17)
    256c:	89000015 	stw	r4,0(r17)
    2570:	18c4000c 	andi	r3,r3,4096
    2574:	18002c1e 	bne	r3,zero,2628 <__sflush_r+0x160>
    2578:	89400c17 	ldw	r5,48(r17)
    257c:	9c000015 	stw	r16,0(r19)
    2580:	28000526 	beq	r5,zero,2598 <__sflush_r+0xd0>
    2584:	88801004 	addi	r2,r17,64
    2588:	28800226 	beq	r5,r2,2594 <__sflush_r+0xcc>
    258c:	9809883a 	mov	r4,r19
    2590:	00028940 	call	2894 <_free_r>
    2594:	88000c15 	stw	zero,48(r17)
    2598:	0005883a 	mov	r2,zero
    259c:	dfc00417 	ldw	ra,16(sp)
    25a0:	dcc00317 	ldw	r19,12(sp)
    25a4:	dc800217 	ldw	r18,8(sp)
    25a8:	dc400117 	ldw	r17,4(sp)
    25ac:	dc000017 	ldw	r16,0(sp)
    25b0:	dec00504 	addi	sp,sp,20
    25b4:	f800283a 	ret
    25b8:	2c800417 	ldw	r18,16(r5)
    25bc:	903ff626 	beq	r18,zero,2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>
    25c0:	2c000017 	ldw	r16,0(r5)
    25c4:	108000cc 	andi	r2,r2,3
    25c8:	2c800015 	stw	r18,0(r5)
    25cc:	84a1c83a 	sub	r16,r16,r18
    25d0:	1000131e 	bne	r2,zero,2620 <__sflush_r+0x158>
    25d4:	28800517 	ldw	r2,20(r5)
    25d8:	88800215 	stw	r2,8(r17)
    25dc:	04000316 	blt	zero,r16,25ec <__sflush_r+0x124>
    25e0:	003fed06 	br	2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>
    25e4:	90a5883a 	add	r18,r18,r2
    25e8:	043feb0e 	bge	zero,r16,2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>
    25ec:	88800917 	ldw	r2,36(r17)
    25f0:	89400717 	ldw	r5,28(r17)
    25f4:	800f883a 	mov	r7,r16
    25f8:	900d883a 	mov	r6,r18
    25fc:	9809883a 	mov	r4,r19
    2600:	103ee83a 	callr	r2
    2604:	80a1c83a 	sub	r16,r16,r2
    2608:	00bff616 	blt	zero,r2,25e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025e4>
    260c:	88c0030b 	ldhu	r3,12(r17)
    2610:	00bfffc4 	movi	r2,-1
    2614:	18c01014 	ori	r3,r3,64
    2618:	88c0030d 	sth	r3,12(r17)
    261c:	003fdf06 	br	259c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700259c>
    2620:	0005883a 	mov	r2,zero
    2624:	003fec06 	br	25d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025d8>
    2628:	88801415 	stw	r2,80(r17)
    262c:	003fd206 	br	2578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002578>
    2630:	28c00f17 	ldw	r3,60(r5)
    2634:	00ffb316 	blt	zero,r3,2504 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002504>
    2638:	003fd706 	br	2598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002598>
    263c:	89400717 	ldw	r5,28(r17)
    2640:	000d883a 	mov	r6,zero
    2644:	01c00044 	movi	r7,1
    2648:	9809883a 	mov	r4,r19
    264c:	403ee83a 	callr	r8
    2650:	100d883a 	mov	r6,r2
    2654:	00bfffc4 	movi	r2,-1
    2658:	30801426 	beq	r6,r2,26ac <__sflush_r+0x1e4>
    265c:	8880030b 	ldhu	r2,12(r17)
    2660:	8a000a17 	ldw	r8,40(r17)
    2664:	003fae06 	br	2520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002520>
    2668:	98c00017 	ldw	r3,0(r19)
    266c:	183fba26 	beq	r3,zero,2558 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002558>
    2670:	01000744 	movi	r4,29
    2674:	19000626 	beq	r3,r4,2690 <__sflush_r+0x1c8>
    2678:	01000584 	movi	r4,22
    267c:	19000426 	beq	r3,r4,2690 <__sflush_r+0x1c8>
    2680:	88c0030b 	ldhu	r3,12(r17)
    2684:	18c01014 	ori	r3,r3,64
    2688:	88c0030d 	sth	r3,12(r17)
    268c:	003fc306 	br	259c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700259c>
    2690:	8880030b 	ldhu	r2,12(r17)
    2694:	88c00417 	ldw	r3,16(r17)
    2698:	88000115 	stw	zero,4(r17)
    269c:	10bdffcc 	andi	r2,r2,63487
    26a0:	8880030d 	sth	r2,12(r17)
    26a4:	88c00015 	stw	r3,0(r17)
    26a8:	003fb306 	br	2578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002578>
    26ac:	98800017 	ldw	r2,0(r19)
    26b0:	103fea26 	beq	r2,zero,265c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700265c>
    26b4:	00c00744 	movi	r3,29
    26b8:	10c00226 	beq	r2,r3,26c4 <__sflush_r+0x1fc>
    26bc:	00c00584 	movi	r3,22
    26c0:	10c0031e 	bne	r2,r3,26d0 <__sflush_r+0x208>
    26c4:	9c000015 	stw	r16,0(r19)
    26c8:	0005883a 	mov	r2,zero
    26cc:	003fb306 	br	259c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700259c>
    26d0:	88c0030b 	ldhu	r3,12(r17)
    26d4:	3005883a 	mov	r2,r6
    26d8:	18c01014 	ori	r3,r3,64
    26dc:	88c0030d 	sth	r3,12(r17)
    26e0:	003fae06 	br	259c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700259c>

000026e4 <_fflush_r>:
    26e4:	defffd04 	addi	sp,sp,-12
    26e8:	dc000115 	stw	r16,4(sp)
    26ec:	dfc00215 	stw	ra,8(sp)
    26f0:	2021883a 	mov	r16,r4
    26f4:	20000226 	beq	r4,zero,2700 <_fflush_r+0x1c>
    26f8:	20800e17 	ldw	r2,56(r4)
    26fc:	10000c26 	beq	r2,zero,2730 <_fflush_r+0x4c>
    2700:	2880030f 	ldh	r2,12(r5)
    2704:	1000051e 	bne	r2,zero,271c <_fflush_r+0x38>
    2708:	0005883a 	mov	r2,zero
    270c:	dfc00217 	ldw	ra,8(sp)
    2710:	dc000117 	ldw	r16,4(sp)
    2714:	dec00304 	addi	sp,sp,12
    2718:	f800283a 	ret
    271c:	8009883a 	mov	r4,r16
    2720:	dfc00217 	ldw	ra,8(sp)
    2724:	dc000117 	ldw	r16,4(sp)
    2728:	dec00304 	addi	sp,sp,12
    272c:	00024c81 	jmpi	24c8 <__sflush_r>
    2730:	d9400015 	stw	r5,0(sp)
    2734:	000076c0 	call	76c <__sinit>
    2738:	d9400017 	ldw	r5,0(sp)
    273c:	003ff006 	br	2700 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002700>

00002740 <fflush>:
    2740:	20000526 	beq	r4,zero,2758 <fflush+0x18>
    2744:	00800034 	movhi	r2,0
    2748:	109e9404 	addi	r2,r2,31312
    274c:	200b883a 	mov	r5,r4
    2750:	11000017 	ldw	r4,0(r2)
    2754:	00026e41 	jmpi	26e4 <_fflush_r>
    2758:	00800034 	movhi	r2,0
    275c:	109e9304 	addi	r2,r2,31308
    2760:	11000017 	ldw	r4,0(r2)
    2764:	01400034 	movhi	r5,0
    2768:	2949b904 	addi	r5,r5,9956
    276c:	0000d481 	jmpi	d48 <_fwalk_reent>

00002770 <_malloc_trim_r>:
    2770:	defffb04 	addi	sp,sp,-20
    2774:	dcc00315 	stw	r19,12(sp)
    2778:	04c00034 	movhi	r19,0
    277c:	dc800215 	stw	r18,8(sp)
    2780:	dc400115 	stw	r17,4(sp)
    2784:	dc000015 	stw	r16,0(sp)
    2788:	dfc00415 	stw	ra,16(sp)
    278c:	2821883a 	mov	r16,r5
    2790:	9cd8d004 	addi	r19,r19,25408
    2794:	2025883a 	mov	r18,r4
    2798:	00036480 	call	3648 <__malloc_lock>
    279c:	98800217 	ldw	r2,8(r19)
    27a0:	14400117 	ldw	r17,4(r2)
    27a4:	00bfff04 	movi	r2,-4
    27a8:	88a2703a 	and	r17,r17,r2
    27ac:	8c21c83a 	sub	r16,r17,r16
    27b0:	8403fbc4 	addi	r16,r16,4079
    27b4:	8020d33a 	srli	r16,r16,12
    27b8:	0083ffc4 	movi	r2,4095
    27bc:	843fffc4 	addi	r16,r16,-1
    27c0:	8020933a 	slli	r16,r16,12
    27c4:	1400060e 	bge	r2,r16,27e0 <_malloc_trim_r+0x70>
    27c8:	000b883a 	mov	r5,zero
    27cc:	9009883a 	mov	r4,r18
    27d0:	000202c0 	call	202c <_sbrk_r>
    27d4:	98c00217 	ldw	r3,8(r19)
    27d8:	1c47883a 	add	r3,r3,r17
    27dc:	10c00a26 	beq	r2,r3,2808 <_malloc_trim_r+0x98>
    27e0:	9009883a 	mov	r4,r18
    27e4:	000366c0 	call	366c <__malloc_unlock>
    27e8:	0005883a 	mov	r2,zero
    27ec:	dfc00417 	ldw	ra,16(sp)
    27f0:	dcc00317 	ldw	r19,12(sp)
    27f4:	dc800217 	ldw	r18,8(sp)
    27f8:	dc400117 	ldw	r17,4(sp)
    27fc:	dc000017 	ldw	r16,0(sp)
    2800:	dec00504 	addi	sp,sp,20
    2804:	f800283a 	ret
    2808:	040bc83a 	sub	r5,zero,r16
    280c:	9009883a 	mov	r4,r18
    2810:	000202c0 	call	202c <_sbrk_r>
    2814:	00ffffc4 	movi	r3,-1
    2818:	10c00d26 	beq	r2,r3,2850 <_malloc_trim_r+0xe0>
    281c:	00c00074 	movhi	r3,1
    2820:	18e58604 	addi	r3,r3,-27112
    2824:	18800017 	ldw	r2,0(r3)
    2828:	99000217 	ldw	r4,8(r19)
    282c:	8c23c83a 	sub	r17,r17,r16
    2830:	8c400054 	ori	r17,r17,1
    2834:	1421c83a 	sub	r16,r2,r16
    2838:	24400115 	stw	r17,4(r4)
    283c:	9009883a 	mov	r4,r18
    2840:	1c000015 	stw	r16,0(r3)
    2844:	000366c0 	call	366c <__malloc_unlock>
    2848:	00800044 	movi	r2,1
    284c:	003fe706 	br	27ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027ec>
    2850:	000b883a 	mov	r5,zero
    2854:	9009883a 	mov	r4,r18
    2858:	000202c0 	call	202c <_sbrk_r>
    285c:	99000217 	ldw	r4,8(r19)
    2860:	014003c4 	movi	r5,15
    2864:	1107c83a 	sub	r3,r2,r4
    2868:	28ffdd0e 	bge	r5,r3,27e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027e0>
    286c:	01400034 	movhi	r5,0
    2870:	295e9504 	addi	r5,r5,31316
    2874:	29400017 	ldw	r5,0(r5)
    2878:	18c00054 	ori	r3,r3,1
    287c:	20c00115 	stw	r3,4(r4)
    2880:	00c00074 	movhi	r3,1
    2884:	1145c83a 	sub	r2,r2,r5
    2888:	18e58604 	addi	r3,r3,-27112
    288c:	18800015 	stw	r2,0(r3)
    2890:	003fd306 	br	27e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027e0>

00002894 <_free_r>:
    2894:	28004126 	beq	r5,zero,299c <_free_r+0x108>
    2898:	defffd04 	addi	sp,sp,-12
    289c:	dc400115 	stw	r17,4(sp)
    28a0:	dc000015 	stw	r16,0(sp)
    28a4:	2023883a 	mov	r17,r4
    28a8:	2821883a 	mov	r16,r5
    28ac:	dfc00215 	stw	ra,8(sp)
    28b0:	00036480 	call	3648 <__malloc_lock>
    28b4:	81ffff17 	ldw	r7,-4(r16)
    28b8:	00bfff84 	movi	r2,-2
    28bc:	01000034 	movhi	r4,0
    28c0:	81bffe04 	addi	r6,r16,-8
    28c4:	3884703a 	and	r2,r7,r2
    28c8:	2118d004 	addi	r4,r4,25408
    28cc:	308b883a 	add	r5,r6,r2
    28d0:	2a400117 	ldw	r9,4(r5)
    28d4:	22000217 	ldw	r8,8(r4)
    28d8:	00ffff04 	movi	r3,-4
    28dc:	48c6703a 	and	r3,r9,r3
    28e0:	2a005726 	beq	r5,r8,2a40 <_free_r+0x1ac>
    28e4:	28c00115 	stw	r3,4(r5)
    28e8:	39c0004c 	andi	r7,r7,1
    28ec:	3800091e 	bne	r7,zero,2914 <_free_r+0x80>
    28f0:	823ffe17 	ldw	r8,-8(r16)
    28f4:	22400204 	addi	r9,r4,8
    28f8:	320dc83a 	sub	r6,r6,r8
    28fc:	31c00217 	ldw	r7,8(r6)
    2900:	1205883a 	add	r2,r2,r8
    2904:	3a406526 	beq	r7,r9,2a9c <_free_r+0x208>
    2908:	32000317 	ldw	r8,12(r6)
    290c:	3a000315 	stw	r8,12(r7)
    2910:	41c00215 	stw	r7,8(r8)
    2914:	28cf883a 	add	r7,r5,r3
    2918:	39c00117 	ldw	r7,4(r7)
    291c:	39c0004c 	andi	r7,r7,1
    2920:	38003a26 	beq	r7,zero,2a0c <_free_r+0x178>
    2924:	10c00054 	ori	r3,r2,1
    2928:	30c00115 	stw	r3,4(r6)
    292c:	3087883a 	add	r3,r6,r2
    2930:	18800015 	stw	r2,0(r3)
    2934:	00c07fc4 	movi	r3,511
    2938:	18801936 	bltu	r3,r2,29a0 <_free_r+0x10c>
    293c:	1004d0fa 	srli	r2,r2,3
    2940:	01c00044 	movi	r7,1
    2944:	21400117 	ldw	r5,4(r4)
    2948:	10c00044 	addi	r3,r2,1
    294c:	18c7883a 	add	r3,r3,r3
    2950:	1005d0ba 	srai	r2,r2,2
    2954:	18c7883a 	add	r3,r3,r3
    2958:	18c7883a 	add	r3,r3,r3
    295c:	1907883a 	add	r3,r3,r4
    2960:	3884983a 	sll	r2,r7,r2
    2964:	19c00017 	ldw	r7,0(r3)
    2968:	1a3ffe04 	addi	r8,r3,-8
    296c:	1144b03a 	or	r2,r2,r5
    2970:	32000315 	stw	r8,12(r6)
    2974:	31c00215 	stw	r7,8(r6)
    2978:	20800115 	stw	r2,4(r4)
    297c:	19800015 	stw	r6,0(r3)
    2980:	39800315 	stw	r6,12(r7)
    2984:	8809883a 	mov	r4,r17
    2988:	dfc00217 	ldw	ra,8(sp)
    298c:	dc400117 	ldw	r17,4(sp)
    2990:	dc000017 	ldw	r16,0(sp)
    2994:	dec00304 	addi	sp,sp,12
    2998:	000366c1 	jmpi	366c <__malloc_unlock>
    299c:	f800283a 	ret
    29a0:	100ad27a 	srli	r5,r2,9
    29a4:	00c00104 	movi	r3,4
    29a8:	19404a36 	bltu	r3,r5,2ad4 <_free_r+0x240>
    29ac:	100ad1ba 	srli	r5,r2,6
    29b0:	28c00e44 	addi	r3,r5,57
    29b4:	18c7883a 	add	r3,r3,r3
    29b8:	29400e04 	addi	r5,r5,56
    29bc:	18c7883a 	add	r3,r3,r3
    29c0:	18c7883a 	add	r3,r3,r3
    29c4:	1909883a 	add	r4,r3,r4
    29c8:	20c00017 	ldw	r3,0(r4)
    29cc:	01c00034 	movhi	r7,0
    29d0:	213ffe04 	addi	r4,r4,-8
    29d4:	39d8d004 	addi	r7,r7,25408
    29d8:	20c04426 	beq	r4,r3,2aec <_free_r+0x258>
    29dc:	01ffff04 	movi	r7,-4
    29e0:	19400117 	ldw	r5,4(r3)
    29e4:	29ca703a 	and	r5,r5,r7
    29e8:	1140022e 	bgeu	r2,r5,29f4 <_free_r+0x160>
    29ec:	18c00217 	ldw	r3,8(r3)
    29f0:	20fffb1e 	bne	r4,r3,29e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029e0>
    29f4:	19000317 	ldw	r4,12(r3)
    29f8:	31000315 	stw	r4,12(r6)
    29fc:	30c00215 	stw	r3,8(r6)
    2a00:	21800215 	stw	r6,8(r4)
    2a04:	19800315 	stw	r6,12(r3)
    2a08:	003fde06 	br	2984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002984>
    2a0c:	29c00217 	ldw	r7,8(r5)
    2a10:	10c5883a 	add	r2,r2,r3
    2a14:	00c00034 	movhi	r3,0
    2a18:	18d8d204 	addi	r3,r3,25416
    2a1c:	38c03b26 	beq	r7,r3,2b0c <_free_r+0x278>
    2a20:	2a000317 	ldw	r8,12(r5)
    2a24:	11400054 	ori	r5,r2,1
    2a28:	3087883a 	add	r3,r6,r2
    2a2c:	3a000315 	stw	r8,12(r7)
    2a30:	41c00215 	stw	r7,8(r8)
    2a34:	31400115 	stw	r5,4(r6)
    2a38:	18800015 	stw	r2,0(r3)
    2a3c:	003fbd06 	br	2934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002934>
    2a40:	39c0004c 	andi	r7,r7,1
    2a44:	10c5883a 	add	r2,r2,r3
    2a48:	3800071e 	bne	r7,zero,2a68 <_free_r+0x1d4>
    2a4c:	81fffe17 	ldw	r7,-8(r16)
    2a50:	31cdc83a 	sub	r6,r6,r7
    2a54:	30c00317 	ldw	r3,12(r6)
    2a58:	31400217 	ldw	r5,8(r6)
    2a5c:	11c5883a 	add	r2,r2,r7
    2a60:	28c00315 	stw	r3,12(r5)
    2a64:	19400215 	stw	r5,8(r3)
    2a68:	10c00054 	ori	r3,r2,1
    2a6c:	30c00115 	stw	r3,4(r6)
    2a70:	00c00034 	movhi	r3,0
    2a74:	18de9604 	addi	r3,r3,31320
    2a78:	18c00017 	ldw	r3,0(r3)
    2a7c:	21800215 	stw	r6,8(r4)
    2a80:	10ffc036 	bltu	r2,r3,2984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002984>
    2a84:	00800074 	movhi	r2,1
    2a88:	10a57d04 	addi	r2,r2,-27148
    2a8c:	11400017 	ldw	r5,0(r2)
    2a90:	8809883a 	mov	r4,r17
    2a94:	00027700 	call	2770 <_malloc_trim_r>
    2a98:	003fba06 	br	2984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002984>
    2a9c:	28c9883a 	add	r4,r5,r3
    2aa0:	21000117 	ldw	r4,4(r4)
    2aa4:	2100004c 	andi	r4,r4,1
    2aa8:	2000391e 	bne	r4,zero,2b90 <_free_r+0x2fc>
    2aac:	29c00217 	ldw	r7,8(r5)
    2ab0:	29000317 	ldw	r4,12(r5)
    2ab4:	1885883a 	add	r2,r3,r2
    2ab8:	10c00054 	ori	r3,r2,1
    2abc:	39000315 	stw	r4,12(r7)
    2ac0:	21c00215 	stw	r7,8(r4)
    2ac4:	30c00115 	stw	r3,4(r6)
    2ac8:	308d883a 	add	r6,r6,r2
    2acc:	30800015 	stw	r2,0(r6)
    2ad0:	003fac06 	br	2984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002984>
    2ad4:	00c00504 	movi	r3,20
    2ad8:	19401536 	bltu	r3,r5,2b30 <_free_r+0x29c>
    2adc:	28c01704 	addi	r3,r5,92
    2ae0:	18c7883a 	add	r3,r3,r3
    2ae4:	294016c4 	addi	r5,r5,91
    2ae8:	003fb406 	br	29bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029bc>
    2aec:	280bd0ba 	srai	r5,r5,2
    2af0:	00c00044 	movi	r3,1
    2af4:	38800117 	ldw	r2,4(r7)
    2af8:	194a983a 	sll	r5,r3,r5
    2afc:	2007883a 	mov	r3,r4
    2b00:	2884b03a 	or	r2,r5,r2
    2b04:	38800115 	stw	r2,4(r7)
    2b08:	003fbb06 	br	29f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029f8>
    2b0c:	21800515 	stw	r6,20(r4)
    2b10:	21800415 	stw	r6,16(r4)
    2b14:	10c00054 	ori	r3,r2,1
    2b18:	31c00315 	stw	r7,12(r6)
    2b1c:	31c00215 	stw	r7,8(r6)
    2b20:	30c00115 	stw	r3,4(r6)
    2b24:	308d883a 	add	r6,r6,r2
    2b28:	30800015 	stw	r2,0(r6)
    2b2c:	003f9506 	br	2984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002984>
    2b30:	00c01504 	movi	r3,84
    2b34:	19400536 	bltu	r3,r5,2b4c <_free_r+0x2b8>
    2b38:	100ad33a 	srli	r5,r2,12
    2b3c:	28c01bc4 	addi	r3,r5,111
    2b40:	18c7883a 	add	r3,r3,r3
    2b44:	29401b84 	addi	r5,r5,110
    2b48:	003f9c06 	br	29bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029bc>
    2b4c:	00c05504 	movi	r3,340
    2b50:	19400536 	bltu	r3,r5,2b68 <_free_r+0x2d4>
    2b54:	100ad3fa 	srli	r5,r2,15
    2b58:	28c01e04 	addi	r3,r5,120
    2b5c:	18c7883a 	add	r3,r3,r3
    2b60:	29401dc4 	addi	r5,r5,119
    2b64:	003f9506 	br	29bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029bc>
    2b68:	00c15504 	movi	r3,1364
    2b6c:	19400536 	bltu	r3,r5,2b84 <_free_r+0x2f0>
    2b70:	100ad4ba 	srli	r5,r2,18
    2b74:	28c01f44 	addi	r3,r5,125
    2b78:	18c7883a 	add	r3,r3,r3
    2b7c:	29401f04 	addi	r5,r5,124
    2b80:	003f8e06 	br	29bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029bc>
    2b84:	00c03f84 	movi	r3,254
    2b88:	01401f84 	movi	r5,126
    2b8c:	003f8b06 	br	29bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029bc>
    2b90:	10c00054 	ori	r3,r2,1
    2b94:	30c00115 	stw	r3,4(r6)
    2b98:	308d883a 	add	r6,r6,r2
    2b9c:	30800015 	stw	r2,0(r6)
    2ba0:	003f7806 	br	2984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002984>

00002ba4 <_lseek_r>:
    2ba4:	defffd04 	addi	sp,sp,-12
    2ba8:	2805883a 	mov	r2,r5
    2bac:	dc000015 	stw	r16,0(sp)
    2bb0:	04000074 	movhi	r16,1
    2bb4:	dc400115 	stw	r17,4(sp)
    2bb8:	300b883a 	mov	r5,r6
    2bbc:	84257e04 	addi	r16,r16,-27144
    2bc0:	2023883a 	mov	r17,r4
    2bc4:	380d883a 	mov	r6,r7
    2bc8:	1009883a 	mov	r4,r2
    2bcc:	dfc00215 	stw	ra,8(sp)
    2bd0:	80000015 	stw	zero,0(r16)
    2bd4:	00034f00 	call	34f0 <lseek>
    2bd8:	00ffffc4 	movi	r3,-1
    2bdc:	10c00526 	beq	r2,r3,2bf4 <_lseek_r+0x50>
    2be0:	dfc00217 	ldw	ra,8(sp)
    2be4:	dc400117 	ldw	r17,4(sp)
    2be8:	dc000017 	ldw	r16,0(sp)
    2bec:	dec00304 	addi	sp,sp,12
    2bf0:	f800283a 	ret
    2bf4:	80c00017 	ldw	r3,0(r16)
    2bf8:	183ff926 	beq	r3,zero,2be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002be0>
    2bfc:	88c00015 	stw	r3,0(r17)
    2c00:	003ff706 	br	2be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002be0>

00002c04 <__smakebuf_r>:
    2c04:	2880030b 	ldhu	r2,12(r5)
    2c08:	10c0008c 	andi	r3,r2,2
    2c0c:	1800411e 	bne	r3,zero,2d14 <__smakebuf_r+0x110>
    2c10:	deffec04 	addi	sp,sp,-80
    2c14:	dc000f15 	stw	r16,60(sp)
    2c18:	2821883a 	mov	r16,r5
    2c1c:	2940038f 	ldh	r5,14(r5)
    2c20:	dc401015 	stw	r17,64(sp)
    2c24:	dfc01315 	stw	ra,76(sp)
    2c28:	dcc01215 	stw	r19,72(sp)
    2c2c:	dc801115 	stw	r18,68(sp)
    2c30:	2023883a 	mov	r17,r4
    2c34:	28001c16 	blt	r5,zero,2ca8 <__smakebuf_r+0xa4>
    2c38:	d80d883a 	mov	r6,sp
    2c3c:	0002e200 	call	2e20 <_fstat_r>
    2c40:	10001816 	blt	r2,zero,2ca4 <__smakebuf_r+0xa0>
    2c44:	d8800117 	ldw	r2,4(sp)
    2c48:	00e00014 	movui	r3,32768
    2c4c:	10bc000c 	andi	r2,r2,61440
    2c50:	14c80020 	cmpeqi	r19,r2,8192
    2c54:	10c03726 	beq	r2,r3,2d34 <__smakebuf_r+0x130>
    2c58:	80c0030b 	ldhu	r3,12(r16)
    2c5c:	18c20014 	ori	r3,r3,2048
    2c60:	80c0030d 	sth	r3,12(r16)
    2c64:	00c80004 	movi	r3,8192
    2c68:	10c0521e 	bne	r2,r3,2db4 <__smakebuf_r+0x1b0>
    2c6c:	8140038f 	ldh	r5,14(r16)
    2c70:	8809883a 	mov	r4,r17
    2c74:	0002e7c0 	call	2e7c <_isatty_r>
    2c78:	10004c26 	beq	r2,zero,2dac <__smakebuf_r+0x1a8>
    2c7c:	8080030b 	ldhu	r2,12(r16)
    2c80:	80c010c4 	addi	r3,r16,67
    2c84:	80c00015 	stw	r3,0(r16)
    2c88:	10800054 	ori	r2,r2,1
    2c8c:	8080030d 	sth	r2,12(r16)
    2c90:	00800044 	movi	r2,1
    2c94:	80c00415 	stw	r3,16(r16)
    2c98:	80800515 	stw	r2,20(r16)
    2c9c:	04810004 	movi	r18,1024
    2ca0:	00000706 	br	2cc0 <__smakebuf_r+0xbc>
    2ca4:	8080030b 	ldhu	r2,12(r16)
    2ca8:	10c0200c 	andi	r3,r2,128
    2cac:	18001f1e 	bne	r3,zero,2d2c <__smakebuf_r+0x128>
    2cb0:	04810004 	movi	r18,1024
    2cb4:	10820014 	ori	r2,r2,2048
    2cb8:	8080030d 	sth	r2,12(r16)
    2cbc:	0027883a 	mov	r19,zero
    2cc0:	900b883a 	mov	r5,r18
    2cc4:	8809883a 	mov	r4,r17
    2cc8:	0000e0c0 	call	e0c <_malloc_r>
    2ccc:	10002c26 	beq	r2,zero,2d80 <__smakebuf_r+0x17c>
    2cd0:	80c0030b 	ldhu	r3,12(r16)
    2cd4:	01000034 	movhi	r4,0
    2cd8:	21010504 	addi	r4,r4,1044
    2cdc:	89000f15 	stw	r4,60(r17)
    2ce0:	18c02014 	ori	r3,r3,128
    2ce4:	80c0030d 	sth	r3,12(r16)
    2ce8:	80800015 	stw	r2,0(r16)
    2cec:	80800415 	stw	r2,16(r16)
    2cf0:	84800515 	stw	r18,20(r16)
    2cf4:	98001a1e 	bne	r19,zero,2d60 <__smakebuf_r+0x15c>
    2cf8:	dfc01317 	ldw	ra,76(sp)
    2cfc:	dcc01217 	ldw	r19,72(sp)
    2d00:	dc801117 	ldw	r18,68(sp)
    2d04:	dc401017 	ldw	r17,64(sp)
    2d08:	dc000f17 	ldw	r16,60(sp)
    2d0c:	dec01404 	addi	sp,sp,80
    2d10:	f800283a 	ret
    2d14:	288010c4 	addi	r2,r5,67
    2d18:	28800015 	stw	r2,0(r5)
    2d1c:	28800415 	stw	r2,16(r5)
    2d20:	00800044 	movi	r2,1
    2d24:	28800515 	stw	r2,20(r5)
    2d28:	f800283a 	ret
    2d2c:	04801004 	movi	r18,64
    2d30:	003fe006 	br	2cb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb4>
    2d34:	81000a17 	ldw	r4,40(r16)
    2d38:	00c00034 	movhi	r3,0
    2d3c:	18c85604 	addi	r3,r3,8536
    2d40:	20ffc51e 	bne	r4,r3,2c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c58>
    2d44:	8080030b 	ldhu	r2,12(r16)
    2d48:	04810004 	movi	r18,1024
    2d4c:	84801315 	stw	r18,76(r16)
    2d50:	1484b03a 	or	r2,r2,r18
    2d54:	8080030d 	sth	r2,12(r16)
    2d58:	0027883a 	mov	r19,zero
    2d5c:	003fd806 	br	2cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cc0>
    2d60:	8140038f 	ldh	r5,14(r16)
    2d64:	8809883a 	mov	r4,r17
    2d68:	0002e7c0 	call	2e7c <_isatty_r>
    2d6c:	103fe226 	beq	r2,zero,2cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf8>
    2d70:	8080030b 	ldhu	r2,12(r16)
    2d74:	10800054 	ori	r2,r2,1
    2d78:	8080030d 	sth	r2,12(r16)
    2d7c:	003fde06 	br	2cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf8>
    2d80:	8080030b 	ldhu	r2,12(r16)
    2d84:	10c0800c 	andi	r3,r2,512
    2d88:	183fdb1e 	bne	r3,zero,2cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf8>
    2d8c:	10800094 	ori	r2,r2,2
    2d90:	80c010c4 	addi	r3,r16,67
    2d94:	8080030d 	sth	r2,12(r16)
    2d98:	00800044 	movi	r2,1
    2d9c:	80c00015 	stw	r3,0(r16)
    2da0:	80c00415 	stw	r3,16(r16)
    2da4:	80800515 	stw	r2,20(r16)
    2da8:	003fd306 	br	2cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf8>
    2dac:	04810004 	movi	r18,1024
    2db0:	003fc306 	br	2cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cc0>
    2db4:	0027883a 	mov	r19,zero
    2db8:	04810004 	movi	r18,1024
    2dbc:	003fc006 	br	2cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cc0>

00002dc0 <_read_r>:
    2dc0:	defffd04 	addi	sp,sp,-12
    2dc4:	2805883a 	mov	r2,r5
    2dc8:	dc000015 	stw	r16,0(sp)
    2dcc:	04000074 	movhi	r16,1
    2dd0:	dc400115 	stw	r17,4(sp)
    2dd4:	300b883a 	mov	r5,r6
    2dd8:	84257e04 	addi	r16,r16,-27144
    2ddc:	2023883a 	mov	r17,r4
    2de0:	380d883a 	mov	r6,r7
    2de4:	1009883a 	mov	r4,r2
    2de8:	dfc00215 	stw	ra,8(sp)
    2dec:	80000015 	stw	zero,0(r16)
    2df0:	00036cc0 	call	36cc <read>
    2df4:	00ffffc4 	movi	r3,-1
    2df8:	10c00526 	beq	r2,r3,2e10 <_read_r+0x50>
    2dfc:	dfc00217 	ldw	ra,8(sp)
    2e00:	dc400117 	ldw	r17,4(sp)
    2e04:	dc000017 	ldw	r16,0(sp)
    2e08:	dec00304 	addi	sp,sp,12
    2e0c:	f800283a 	ret
    2e10:	80c00017 	ldw	r3,0(r16)
    2e14:	183ff926 	beq	r3,zero,2dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002dfc>
    2e18:	88c00015 	stw	r3,0(r17)
    2e1c:	003ff706 	br	2dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002dfc>

00002e20 <_fstat_r>:
    2e20:	defffd04 	addi	sp,sp,-12
    2e24:	2805883a 	mov	r2,r5
    2e28:	dc000015 	stw	r16,0(sp)
    2e2c:	04000074 	movhi	r16,1
    2e30:	dc400115 	stw	r17,4(sp)
    2e34:	84257e04 	addi	r16,r16,-27144
    2e38:	2023883a 	mov	r17,r4
    2e3c:	300b883a 	mov	r5,r6
    2e40:	1009883a 	mov	r4,r2
    2e44:	dfc00215 	stw	ra,8(sp)
    2e48:	80000015 	stw	zero,0(r16)
    2e4c:	00032280 	call	3228 <fstat>
    2e50:	00ffffc4 	movi	r3,-1
    2e54:	10c00526 	beq	r2,r3,2e6c <_fstat_r+0x4c>
    2e58:	dfc00217 	ldw	ra,8(sp)
    2e5c:	dc400117 	ldw	r17,4(sp)
    2e60:	dc000017 	ldw	r16,0(sp)
    2e64:	dec00304 	addi	sp,sp,12
    2e68:	f800283a 	ret
    2e6c:	80c00017 	ldw	r3,0(r16)
    2e70:	183ff926 	beq	r3,zero,2e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e58>
    2e74:	88c00015 	stw	r3,0(r17)
    2e78:	003ff706 	br	2e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e58>

00002e7c <_isatty_r>:
    2e7c:	defffd04 	addi	sp,sp,-12
    2e80:	dc000015 	stw	r16,0(sp)
    2e84:	04000074 	movhi	r16,1
    2e88:	dc400115 	stw	r17,4(sp)
    2e8c:	84257e04 	addi	r16,r16,-27144
    2e90:	2023883a 	mov	r17,r4
    2e94:	2809883a 	mov	r4,r5
    2e98:	dfc00215 	stw	ra,8(sp)
    2e9c:	80000015 	stw	zero,0(r16)
    2ea0:	000331c0 	call	331c <isatty>
    2ea4:	00ffffc4 	movi	r3,-1
    2ea8:	10c00526 	beq	r2,r3,2ec0 <_isatty_r+0x44>
    2eac:	dfc00217 	ldw	ra,8(sp)
    2eb0:	dc400117 	ldw	r17,4(sp)
    2eb4:	dc000017 	ldw	r16,0(sp)
    2eb8:	dec00304 	addi	sp,sp,12
    2ebc:	f800283a 	ret
    2ec0:	80c00017 	ldw	r3,0(r16)
    2ec4:	183ff926 	beq	r3,zero,2eac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002eac>
    2ec8:	88c00015 	stw	r3,0(r17)
    2ecc:	003ff706 	br	2eac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002eac>

00002ed0 <__divsi3>:
    2ed0:	20001b16 	blt	r4,zero,2f40 <__divsi3+0x70>
    2ed4:	000f883a 	mov	r7,zero
    2ed8:	28001616 	blt	r5,zero,2f34 <__divsi3+0x64>
    2edc:	200d883a 	mov	r6,r4
    2ee0:	29001a2e 	bgeu	r5,r4,2f4c <__divsi3+0x7c>
    2ee4:	00800804 	movi	r2,32
    2ee8:	00c00044 	movi	r3,1
    2eec:	00000106 	br	2ef4 <__divsi3+0x24>
    2ef0:	10000d26 	beq	r2,zero,2f28 <__divsi3+0x58>
    2ef4:	294b883a 	add	r5,r5,r5
    2ef8:	10bfffc4 	addi	r2,r2,-1
    2efc:	18c7883a 	add	r3,r3,r3
    2f00:	293ffb36 	bltu	r5,r4,2ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ef0>
    2f04:	0005883a 	mov	r2,zero
    2f08:	18000726 	beq	r3,zero,2f28 <__divsi3+0x58>
    2f0c:	0005883a 	mov	r2,zero
    2f10:	31400236 	bltu	r6,r5,2f1c <__divsi3+0x4c>
    2f14:	314dc83a 	sub	r6,r6,r5
    2f18:	10c4b03a 	or	r2,r2,r3
    2f1c:	1806d07a 	srli	r3,r3,1
    2f20:	280ad07a 	srli	r5,r5,1
    2f24:	183ffa1e 	bne	r3,zero,2f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f10>
    2f28:	38000126 	beq	r7,zero,2f30 <__divsi3+0x60>
    2f2c:	0085c83a 	sub	r2,zero,r2
    2f30:	f800283a 	ret
    2f34:	014bc83a 	sub	r5,zero,r5
    2f38:	39c0005c 	xori	r7,r7,1
    2f3c:	003fe706 	br	2edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002edc>
    2f40:	0109c83a 	sub	r4,zero,r4
    2f44:	01c00044 	movi	r7,1
    2f48:	003fe306 	br	2ed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed8>
    2f4c:	00c00044 	movi	r3,1
    2f50:	003fee06 	br	2f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f0c>

00002f54 <__modsi3>:
    2f54:	20001716 	blt	r4,zero,2fb4 <__modsi3+0x60>
    2f58:	000f883a 	mov	r7,zero
    2f5c:	2005883a 	mov	r2,r4
    2f60:	28001216 	blt	r5,zero,2fac <__modsi3+0x58>
    2f64:	2900162e 	bgeu	r5,r4,2fc0 <__modsi3+0x6c>
    2f68:	01800804 	movi	r6,32
    2f6c:	00c00044 	movi	r3,1
    2f70:	00000106 	br	2f78 <__modsi3+0x24>
    2f74:	30000a26 	beq	r6,zero,2fa0 <__modsi3+0x4c>
    2f78:	294b883a 	add	r5,r5,r5
    2f7c:	31bfffc4 	addi	r6,r6,-1
    2f80:	18c7883a 	add	r3,r3,r3
    2f84:	293ffb36 	bltu	r5,r4,2f74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f74>
    2f88:	18000526 	beq	r3,zero,2fa0 <__modsi3+0x4c>
    2f8c:	1806d07a 	srli	r3,r3,1
    2f90:	11400136 	bltu	r2,r5,2f98 <__modsi3+0x44>
    2f94:	1145c83a 	sub	r2,r2,r5
    2f98:	280ad07a 	srli	r5,r5,1
    2f9c:	183ffb1e 	bne	r3,zero,2f8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f8c>
    2fa0:	38000126 	beq	r7,zero,2fa8 <__modsi3+0x54>
    2fa4:	0085c83a 	sub	r2,zero,r2
    2fa8:	f800283a 	ret
    2fac:	014bc83a 	sub	r5,zero,r5
    2fb0:	003fec06 	br	2f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f64>
    2fb4:	0109c83a 	sub	r4,zero,r4
    2fb8:	01c00044 	movi	r7,1
    2fbc:	003fe706 	br	2f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f5c>
    2fc0:	00c00044 	movi	r3,1
    2fc4:	003ff106 	br	2f8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f8c>

00002fc8 <__udivsi3>:
    2fc8:	200d883a 	mov	r6,r4
    2fcc:	2900152e 	bgeu	r5,r4,3024 <__udivsi3+0x5c>
    2fd0:	28001416 	blt	r5,zero,3024 <__udivsi3+0x5c>
    2fd4:	00800804 	movi	r2,32
    2fd8:	00c00044 	movi	r3,1
    2fdc:	00000206 	br	2fe8 <__udivsi3+0x20>
    2fe0:	10000e26 	beq	r2,zero,301c <__udivsi3+0x54>
    2fe4:	28000516 	blt	r5,zero,2ffc <__udivsi3+0x34>
    2fe8:	294b883a 	add	r5,r5,r5
    2fec:	10bfffc4 	addi	r2,r2,-1
    2ff0:	18c7883a 	add	r3,r3,r3
    2ff4:	293ffa36 	bltu	r5,r4,2fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fe0>
    2ff8:	18000826 	beq	r3,zero,301c <__udivsi3+0x54>
    2ffc:	0005883a 	mov	r2,zero
    3000:	31400236 	bltu	r6,r5,300c <__udivsi3+0x44>
    3004:	314dc83a 	sub	r6,r6,r5
    3008:	10c4b03a 	or	r2,r2,r3
    300c:	1806d07a 	srli	r3,r3,1
    3010:	280ad07a 	srli	r5,r5,1
    3014:	183ffa1e 	bne	r3,zero,3000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003000>
    3018:	f800283a 	ret
    301c:	0005883a 	mov	r2,zero
    3020:	f800283a 	ret
    3024:	00c00044 	movi	r3,1
    3028:	003ff406 	br	2ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ffc>

0000302c <__umodsi3>:
    302c:	2005883a 	mov	r2,r4
    3030:	2900122e 	bgeu	r5,r4,307c <__umodsi3+0x50>
    3034:	28001116 	blt	r5,zero,307c <__umodsi3+0x50>
    3038:	01800804 	movi	r6,32
    303c:	00c00044 	movi	r3,1
    3040:	00000206 	br	304c <__umodsi3+0x20>
    3044:	30000c26 	beq	r6,zero,3078 <__umodsi3+0x4c>
    3048:	28000516 	blt	r5,zero,3060 <__umodsi3+0x34>
    304c:	294b883a 	add	r5,r5,r5
    3050:	31bfffc4 	addi	r6,r6,-1
    3054:	18c7883a 	add	r3,r3,r3
    3058:	293ffa36 	bltu	r5,r4,3044 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003044>
    305c:	18000626 	beq	r3,zero,3078 <__umodsi3+0x4c>
    3060:	1806d07a 	srli	r3,r3,1
    3064:	11400136 	bltu	r2,r5,306c <__umodsi3+0x40>
    3068:	1145c83a 	sub	r2,r2,r5
    306c:	280ad07a 	srli	r5,r5,1
    3070:	183ffb1e 	bne	r3,zero,3060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003060>
    3074:	f800283a 	ret
    3078:	f800283a 	ret
    307c:	00c00044 	movi	r3,1
    3080:	003ff706 	br	3060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003060>

00003084 <__mulsi3>:
    3084:	0005883a 	mov	r2,zero
    3088:	20000726 	beq	r4,zero,30a8 <__mulsi3+0x24>
    308c:	20c0004c 	andi	r3,r4,1
    3090:	2008d07a 	srli	r4,r4,1
    3094:	18000126 	beq	r3,zero,309c <__mulsi3+0x18>
    3098:	1145883a 	add	r2,r2,r5
    309c:	294b883a 	add	r5,r5,r5
    30a0:	203ffa1e 	bne	r4,zero,308c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700308c>
    30a4:	f800283a 	ret
    30a8:	f800283a 	ret

000030ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    30ac:	defffe04 	addi	sp,sp,-8
    30b0:	dfc00115 	stw	ra,4(sp)
    30b4:	df000015 	stw	fp,0(sp)
    30b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    30bc:	d0a00917 	ldw	r2,-32732(gp)
    30c0:	10000326 	beq	r2,zero,30d0 <alt_get_errno+0x24>
    30c4:	d0a00917 	ldw	r2,-32732(gp)
    30c8:	103ee83a 	callr	r2
    30cc:	00000106 	br	30d4 <alt_get_errno+0x28>
    30d0:	d0a6eb04 	addi	r2,gp,-25684
}
    30d4:	e037883a 	mov	sp,fp
    30d8:	dfc00117 	ldw	ra,4(sp)
    30dc:	df000017 	ldw	fp,0(sp)
    30e0:	dec00204 	addi	sp,sp,8
    30e4:	f800283a 	ret

000030e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    30e8:	defffb04 	addi	sp,sp,-20
    30ec:	dfc00415 	stw	ra,16(sp)
    30f0:	df000315 	stw	fp,12(sp)
    30f4:	df000304 	addi	fp,sp,12
    30f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    30fc:	e0bfff17 	ldw	r2,-4(fp)
    3100:	10000816 	blt	r2,zero,3124 <close+0x3c>
    3104:	01400304 	movi	r5,12
    3108:	e13fff17 	ldw	r4,-4(fp)
    310c:	00030840 	call	3084 <__mulsi3>
    3110:	1007883a 	mov	r3,r2
    3114:	00800034 	movhi	r2,0
    3118:	1099dc04 	addi	r2,r2,26480
    311c:	1885883a 	add	r2,r3,r2
    3120:	00000106 	br	3128 <close+0x40>
    3124:	0005883a 	mov	r2,zero
    3128:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    312c:	e0bffd17 	ldw	r2,-12(fp)
    3130:	10001926 	beq	r2,zero,3198 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3134:	e0bffd17 	ldw	r2,-12(fp)
    3138:	10800017 	ldw	r2,0(r2)
    313c:	10800417 	ldw	r2,16(r2)
    3140:	10000626 	beq	r2,zero,315c <close+0x74>
    3144:	e0bffd17 	ldw	r2,-12(fp)
    3148:	10800017 	ldw	r2,0(r2)
    314c:	10800417 	ldw	r2,16(r2)
    3150:	e13ffd17 	ldw	r4,-12(fp)
    3154:	103ee83a 	callr	r2
    3158:	00000106 	br	3160 <close+0x78>
    315c:	0005883a 	mov	r2,zero
    3160:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3164:	e13fff17 	ldw	r4,-4(fp)
    3168:	00037d00 	call	37d0 <alt_release_fd>
    if (rval < 0)
    316c:	e0bffe17 	ldw	r2,-8(fp)
    3170:	1000070e 	bge	r2,zero,3190 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    3174:	00030ac0 	call	30ac <alt_get_errno>
    3178:	1007883a 	mov	r3,r2
    317c:	e0bffe17 	ldw	r2,-8(fp)
    3180:	0085c83a 	sub	r2,zero,r2
    3184:	18800015 	stw	r2,0(r3)
      return -1;
    3188:	00bfffc4 	movi	r2,-1
    318c:	00000706 	br	31ac <close+0xc4>
    }
    return 0;
    3190:	0005883a 	mov	r2,zero
    3194:	00000506 	br	31ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3198:	00030ac0 	call	30ac <alt_get_errno>
    319c:	1007883a 	mov	r3,r2
    31a0:	00801444 	movi	r2,81
    31a4:	18800015 	stw	r2,0(r3)
    return -1;
    31a8:	00bfffc4 	movi	r2,-1
  }
}
    31ac:	e037883a 	mov	sp,fp
    31b0:	dfc00117 	ldw	ra,4(sp)
    31b4:	df000017 	ldw	fp,0(sp)
    31b8:	dec00204 	addi	sp,sp,8
    31bc:	f800283a 	ret

000031c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    31c0:	defffc04 	addi	sp,sp,-16
    31c4:	df000315 	stw	fp,12(sp)
    31c8:	df000304 	addi	fp,sp,12
    31cc:	e13ffd15 	stw	r4,-12(fp)
    31d0:	e17ffe15 	stw	r5,-8(fp)
    31d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    31d8:	e0bfff17 	ldw	r2,-4(fp)
}
    31dc:	e037883a 	mov	sp,fp
    31e0:	df000017 	ldw	fp,0(sp)
    31e4:	dec00104 	addi	sp,sp,4
    31e8:	f800283a 	ret

000031ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31ec:	defffe04 	addi	sp,sp,-8
    31f0:	dfc00115 	stw	ra,4(sp)
    31f4:	df000015 	stw	fp,0(sp)
    31f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    31fc:	d0a00917 	ldw	r2,-32732(gp)
    3200:	10000326 	beq	r2,zero,3210 <alt_get_errno+0x24>
    3204:	d0a00917 	ldw	r2,-32732(gp)
    3208:	103ee83a 	callr	r2
    320c:	00000106 	br	3214 <alt_get_errno+0x28>
    3210:	d0a6eb04 	addi	r2,gp,-25684
}
    3214:	e037883a 	mov	sp,fp
    3218:	dfc00117 	ldw	ra,4(sp)
    321c:	df000017 	ldw	fp,0(sp)
    3220:	dec00204 	addi	sp,sp,8
    3224:	f800283a 	ret

00003228 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3228:	defffb04 	addi	sp,sp,-20
    322c:	dfc00415 	stw	ra,16(sp)
    3230:	df000315 	stw	fp,12(sp)
    3234:	df000304 	addi	fp,sp,12
    3238:	e13ffe15 	stw	r4,-8(fp)
    323c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3240:	e0bffe17 	ldw	r2,-8(fp)
    3244:	10000816 	blt	r2,zero,3268 <fstat+0x40>
    3248:	01400304 	movi	r5,12
    324c:	e13ffe17 	ldw	r4,-8(fp)
    3250:	00030840 	call	3084 <__mulsi3>
    3254:	1007883a 	mov	r3,r2
    3258:	00800034 	movhi	r2,0
    325c:	1099dc04 	addi	r2,r2,26480
    3260:	1885883a 	add	r2,r3,r2
    3264:	00000106 	br	326c <fstat+0x44>
    3268:	0005883a 	mov	r2,zero
    326c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3270:	e0bffd17 	ldw	r2,-12(fp)
    3274:	10001026 	beq	r2,zero,32b8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3278:	e0bffd17 	ldw	r2,-12(fp)
    327c:	10800017 	ldw	r2,0(r2)
    3280:	10800817 	ldw	r2,32(r2)
    3284:	10000726 	beq	r2,zero,32a4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    3288:	e0bffd17 	ldw	r2,-12(fp)
    328c:	10800017 	ldw	r2,0(r2)
    3290:	10800817 	ldw	r2,32(r2)
    3294:	e17fff17 	ldw	r5,-4(fp)
    3298:	e13ffd17 	ldw	r4,-12(fp)
    329c:	103ee83a 	callr	r2
    32a0:	00000a06 	br	32cc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    32a4:	e0bfff17 	ldw	r2,-4(fp)
    32a8:	00c80004 	movi	r3,8192
    32ac:	10c00115 	stw	r3,4(r2)
      return 0;
    32b0:	0005883a 	mov	r2,zero
    32b4:	00000506 	br	32cc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    32b8:	00031ec0 	call	31ec <alt_get_errno>
    32bc:	1007883a 	mov	r3,r2
    32c0:	00801444 	movi	r2,81
    32c4:	18800015 	stw	r2,0(r3)
    return -1;
    32c8:	00bfffc4 	movi	r2,-1
  }
}
    32cc:	e037883a 	mov	sp,fp
    32d0:	dfc00117 	ldw	ra,4(sp)
    32d4:	df000017 	ldw	fp,0(sp)
    32d8:	dec00204 	addi	sp,sp,8
    32dc:	f800283a 	ret

000032e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32e0:	defffe04 	addi	sp,sp,-8
    32e4:	dfc00115 	stw	ra,4(sp)
    32e8:	df000015 	stw	fp,0(sp)
    32ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    32f0:	d0a00917 	ldw	r2,-32732(gp)
    32f4:	10000326 	beq	r2,zero,3304 <alt_get_errno+0x24>
    32f8:	d0a00917 	ldw	r2,-32732(gp)
    32fc:	103ee83a 	callr	r2
    3300:	00000106 	br	3308 <alt_get_errno+0x28>
    3304:	d0a6eb04 	addi	r2,gp,-25684
}
    3308:	e037883a 	mov	sp,fp
    330c:	dfc00117 	ldw	ra,4(sp)
    3310:	df000017 	ldw	fp,0(sp)
    3314:	dec00204 	addi	sp,sp,8
    3318:	f800283a 	ret

0000331c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    331c:	deffed04 	addi	sp,sp,-76
    3320:	dfc01215 	stw	ra,72(sp)
    3324:	df001115 	stw	fp,68(sp)
    3328:	df001104 	addi	fp,sp,68
    332c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3330:	e0bfff17 	ldw	r2,-4(fp)
    3334:	10000816 	blt	r2,zero,3358 <isatty+0x3c>
    3338:	01400304 	movi	r5,12
    333c:	e13fff17 	ldw	r4,-4(fp)
    3340:	00030840 	call	3084 <__mulsi3>
    3344:	1007883a 	mov	r3,r2
    3348:	00800034 	movhi	r2,0
    334c:	1099dc04 	addi	r2,r2,26480
    3350:	1885883a 	add	r2,r3,r2
    3354:	00000106 	br	335c <isatty+0x40>
    3358:	0005883a 	mov	r2,zero
    335c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3360:	e0bfef17 	ldw	r2,-68(fp)
    3364:	10000e26 	beq	r2,zero,33a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3368:	e0bfef17 	ldw	r2,-68(fp)
    336c:	10800017 	ldw	r2,0(r2)
    3370:	10800817 	ldw	r2,32(r2)
    3374:	1000021e 	bne	r2,zero,3380 <isatty+0x64>
    {
      return 1;
    3378:	00800044 	movi	r2,1
    337c:	00000d06 	br	33b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3380:	e0bff004 	addi	r2,fp,-64
    3384:	100b883a 	mov	r5,r2
    3388:	e13fff17 	ldw	r4,-4(fp)
    338c:	00032280 	call	3228 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3390:	e0bff117 	ldw	r2,-60(fp)
    3394:	10880020 	cmpeqi	r2,r2,8192
    3398:	10803fcc 	andi	r2,r2,255
    339c:	00000506 	br	33b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    33a0:	00032e00 	call	32e0 <alt_get_errno>
    33a4:	1007883a 	mov	r3,r2
    33a8:	00801444 	movi	r2,81
    33ac:	18800015 	stw	r2,0(r3)
    return 0;
    33b0:	0005883a 	mov	r2,zero
  }
}
    33b4:	e037883a 	mov	sp,fp
    33b8:	dfc00117 	ldw	ra,4(sp)
    33bc:	df000017 	ldw	fp,0(sp)
    33c0:	dec00204 	addi	sp,sp,8
    33c4:	f800283a 	ret

000033c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    33c8:	defffc04 	addi	sp,sp,-16
    33cc:	df000315 	stw	fp,12(sp)
    33d0:	df000304 	addi	fp,sp,12
    33d4:	e13ffd15 	stw	r4,-12(fp)
    33d8:	e17ffe15 	stw	r5,-8(fp)
    33dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    33e0:	e0fffe17 	ldw	r3,-8(fp)
    33e4:	e0bffd17 	ldw	r2,-12(fp)
    33e8:	18800c26 	beq	r3,r2,341c <alt_load_section+0x54>
  {
    while( to != end )
    33ec:	00000806 	br	3410 <alt_load_section+0x48>
    {
      *to++ = *from++;
    33f0:	e0bffe17 	ldw	r2,-8(fp)
    33f4:	10c00104 	addi	r3,r2,4
    33f8:	e0fffe15 	stw	r3,-8(fp)
    33fc:	e0fffd17 	ldw	r3,-12(fp)
    3400:	19000104 	addi	r4,r3,4
    3404:	e13ffd15 	stw	r4,-12(fp)
    3408:	18c00017 	ldw	r3,0(r3)
    340c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3410:	e0fffe17 	ldw	r3,-8(fp)
    3414:	e0bfff17 	ldw	r2,-4(fp)
    3418:	18bff51e 	bne	r3,r2,33f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033f0>
    {
      *to++ = *from++;
    }
  }
}
    341c:	0001883a 	nop
    3420:	e037883a 	mov	sp,fp
    3424:	df000017 	ldw	fp,0(sp)
    3428:	dec00104 	addi	sp,sp,4
    342c:	f800283a 	ret

00003430 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3430:	defffe04 	addi	sp,sp,-8
    3434:	dfc00115 	stw	ra,4(sp)
    3438:	df000015 	stw	fp,0(sp)
    343c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3440:	01800034 	movhi	r6,0
    3444:	319ea104 	addi	r6,r6,31364
    3448:	01400034 	movhi	r5,0
    344c:	2957c704 	addi	r5,r5,24348
    3450:	01000034 	movhi	r4,0
    3454:	211ea104 	addi	r4,r4,31364
    3458:	00033c80 	call	33c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    345c:	01800034 	movhi	r6,0
    3460:	31808c04 	addi	r6,r6,560
    3464:	01400034 	movhi	r5,0
    3468:	29400804 	addi	r5,r5,32
    346c:	01000034 	movhi	r4,0
    3470:	21000804 	addi	r4,r4,32
    3474:	00033c80 	call	33c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3478:	01800034 	movhi	r6,0
    347c:	3197c704 	addi	r6,r6,24348
    3480:	01400034 	movhi	r5,0
    3484:	29579404 	addi	r5,r5,24144
    3488:	01000034 	movhi	r4,0
    348c:	21179404 	addi	r4,r4,24144
    3490:	00033c80 	call	33c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3494:	0004d980 	call	4d98 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3498:	0004f580 	call	4f58 <alt_icache_flush_all>
}
    349c:	0001883a 	nop
    34a0:	e037883a 	mov	sp,fp
    34a4:	dfc00117 	ldw	ra,4(sp)
    34a8:	df000017 	ldw	fp,0(sp)
    34ac:	dec00204 	addi	sp,sp,8
    34b0:	f800283a 	ret

000034b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    34b4:	defffe04 	addi	sp,sp,-8
    34b8:	dfc00115 	stw	ra,4(sp)
    34bc:	df000015 	stw	fp,0(sp)
    34c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    34c4:	d0a00917 	ldw	r2,-32732(gp)
    34c8:	10000326 	beq	r2,zero,34d8 <alt_get_errno+0x24>
    34cc:	d0a00917 	ldw	r2,-32732(gp)
    34d0:	103ee83a 	callr	r2
    34d4:	00000106 	br	34dc <alt_get_errno+0x28>
    34d8:	d0a6eb04 	addi	r2,gp,-25684
}
    34dc:	e037883a 	mov	sp,fp
    34e0:	dfc00117 	ldw	ra,4(sp)
    34e4:	df000017 	ldw	fp,0(sp)
    34e8:	dec00204 	addi	sp,sp,8
    34ec:	f800283a 	ret

000034f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    34f0:	defff904 	addi	sp,sp,-28
    34f4:	dfc00615 	stw	ra,24(sp)
    34f8:	df000515 	stw	fp,20(sp)
    34fc:	df000504 	addi	fp,sp,20
    3500:	e13ffd15 	stw	r4,-12(fp)
    3504:	e17ffe15 	stw	r5,-8(fp)
    3508:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    350c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3510:	e0bffd17 	ldw	r2,-12(fp)
    3514:	10000816 	blt	r2,zero,3538 <lseek+0x48>
    3518:	01400304 	movi	r5,12
    351c:	e13ffd17 	ldw	r4,-12(fp)
    3520:	00030840 	call	3084 <__mulsi3>
    3524:	1007883a 	mov	r3,r2
    3528:	00800034 	movhi	r2,0
    352c:	1099dc04 	addi	r2,r2,26480
    3530:	1885883a 	add	r2,r3,r2
    3534:	00000106 	br	353c <lseek+0x4c>
    3538:	0005883a 	mov	r2,zero
    353c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3540:	e0bffc17 	ldw	r2,-16(fp)
    3544:	10001026 	beq	r2,zero,3588 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3548:	e0bffc17 	ldw	r2,-16(fp)
    354c:	10800017 	ldw	r2,0(r2)
    3550:	10800717 	ldw	r2,28(r2)
    3554:	10000926 	beq	r2,zero,357c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3558:	e0bffc17 	ldw	r2,-16(fp)
    355c:	10800017 	ldw	r2,0(r2)
    3560:	10800717 	ldw	r2,28(r2)
    3564:	e1bfff17 	ldw	r6,-4(fp)
    3568:	e17ffe17 	ldw	r5,-8(fp)
    356c:	e13ffc17 	ldw	r4,-16(fp)
    3570:	103ee83a 	callr	r2
    3574:	e0bffb15 	stw	r2,-20(fp)
    3578:	00000506 	br	3590 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    357c:	00bfde84 	movi	r2,-134
    3580:	e0bffb15 	stw	r2,-20(fp)
    3584:	00000206 	br	3590 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    3588:	00bfebc4 	movi	r2,-81
    358c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3590:	e0bffb17 	ldw	r2,-20(fp)
    3594:	1000070e 	bge	r2,zero,35b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    3598:	00034b40 	call	34b4 <alt_get_errno>
    359c:	1007883a 	mov	r3,r2
    35a0:	e0bffb17 	ldw	r2,-20(fp)
    35a4:	0085c83a 	sub	r2,zero,r2
    35a8:	18800015 	stw	r2,0(r3)
    rc = -1;
    35ac:	00bfffc4 	movi	r2,-1
    35b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    35b4:	e0bffb17 	ldw	r2,-20(fp)
}
    35b8:	e037883a 	mov	sp,fp
    35bc:	dfc00117 	ldw	ra,4(sp)
    35c0:	df000017 	ldw	fp,0(sp)
    35c4:	dec00204 	addi	sp,sp,8
    35c8:	f800283a 	ret

000035cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    35cc:	defffd04 	addi	sp,sp,-12
    35d0:	dfc00215 	stw	ra,8(sp)
    35d4:	df000115 	stw	fp,4(sp)
    35d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    35dc:	0009883a 	mov	r4,zero
    35e0:	0003a740 	call	3a74 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    35e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    35e8:	0003aac0 	call	3aac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    35ec:	01800034 	movhi	r6,0
    35f0:	31979e04 	addi	r6,r6,24184
    35f4:	01400034 	movhi	r5,0
    35f8:	29579e04 	addi	r5,r5,24184
    35fc:	01000034 	movhi	r4,0
    3600:	21179e04 	addi	r4,r4,24184
    3604:	00052fc0 	call	52fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3608:	0004e980 	call	4e98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    360c:	01000034 	movhi	r4,0
    3610:	2113be04 	addi	r4,r4,20216
    3614:	0005abc0 	call	5abc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3618:	d0a6ec17 	ldw	r2,-25680(gp)
    361c:	d0e6ed17 	ldw	r3,-25676(gp)
    3620:	d126ee17 	ldw	r4,-25672(gp)
    3624:	200d883a 	mov	r6,r4
    3628:	180b883a 	mov	r5,r3
    362c:	1009883a 	mov	r4,r2
    3630:	000026c0 	call	26c <main>
    3634:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3638:	01000044 	movi	r4,1
    363c:	00030e80 	call	30e8 <close>
  exit (result);
    3640:	e13fff17 	ldw	r4,-4(fp)
    3644:	0005ad00 	call	5ad0 <exit>

00003648 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3648:	defffe04 	addi	sp,sp,-8
    364c:	df000115 	stw	fp,4(sp)
    3650:	df000104 	addi	fp,sp,4
    3654:	e13fff15 	stw	r4,-4(fp)
}
    3658:	0001883a 	nop
    365c:	e037883a 	mov	sp,fp
    3660:	df000017 	ldw	fp,0(sp)
    3664:	dec00104 	addi	sp,sp,4
    3668:	f800283a 	ret

0000366c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    366c:	defffe04 	addi	sp,sp,-8
    3670:	df000115 	stw	fp,4(sp)
    3674:	df000104 	addi	fp,sp,4
    3678:	e13fff15 	stw	r4,-4(fp)
}
    367c:	0001883a 	nop
    3680:	e037883a 	mov	sp,fp
    3684:	df000017 	ldw	fp,0(sp)
    3688:	dec00104 	addi	sp,sp,4
    368c:	f800283a 	ret

00003690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3690:	defffe04 	addi	sp,sp,-8
    3694:	dfc00115 	stw	ra,4(sp)
    3698:	df000015 	stw	fp,0(sp)
    369c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    36a0:	d0a00917 	ldw	r2,-32732(gp)
    36a4:	10000326 	beq	r2,zero,36b4 <alt_get_errno+0x24>
    36a8:	d0a00917 	ldw	r2,-32732(gp)
    36ac:	103ee83a 	callr	r2
    36b0:	00000106 	br	36b8 <alt_get_errno+0x28>
    36b4:	d0a6eb04 	addi	r2,gp,-25684
}
    36b8:	e037883a 	mov	sp,fp
    36bc:	dfc00117 	ldw	ra,4(sp)
    36c0:	df000017 	ldw	fp,0(sp)
    36c4:	dec00204 	addi	sp,sp,8
    36c8:	f800283a 	ret

000036cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    36cc:	defff904 	addi	sp,sp,-28
    36d0:	dfc00615 	stw	ra,24(sp)
    36d4:	df000515 	stw	fp,20(sp)
    36d8:	df000504 	addi	fp,sp,20
    36dc:	e13ffd15 	stw	r4,-12(fp)
    36e0:	e17ffe15 	stw	r5,-8(fp)
    36e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    36e8:	e0bffd17 	ldw	r2,-12(fp)
    36ec:	10000816 	blt	r2,zero,3710 <read+0x44>
    36f0:	01400304 	movi	r5,12
    36f4:	e13ffd17 	ldw	r4,-12(fp)
    36f8:	00030840 	call	3084 <__mulsi3>
    36fc:	1007883a 	mov	r3,r2
    3700:	00800034 	movhi	r2,0
    3704:	1099dc04 	addi	r2,r2,26480
    3708:	1885883a 	add	r2,r3,r2
    370c:	00000106 	br	3714 <read+0x48>
    3710:	0005883a 	mov	r2,zero
    3714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3718:	e0bffb17 	ldw	r2,-20(fp)
    371c:	10002226 	beq	r2,zero,37a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3720:	e0bffb17 	ldw	r2,-20(fp)
    3724:	10800217 	ldw	r2,8(r2)
    3728:	108000cc 	andi	r2,r2,3
    372c:	10800060 	cmpeqi	r2,r2,1
    3730:	1000181e 	bne	r2,zero,3794 <read+0xc8>
        (fd->dev->read))
    3734:	e0bffb17 	ldw	r2,-20(fp)
    3738:	10800017 	ldw	r2,0(r2)
    373c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3740:	10001426 	beq	r2,zero,3794 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3744:	e0bffb17 	ldw	r2,-20(fp)
    3748:	10800017 	ldw	r2,0(r2)
    374c:	10800517 	ldw	r2,20(r2)
    3750:	e0ffff17 	ldw	r3,-4(fp)
    3754:	180d883a 	mov	r6,r3
    3758:	e17ffe17 	ldw	r5,-8(fp)
    375c:	e13ffb17 	ldw	r4,-20(fp)
    3760:	103ee83a 	callr	r2
    3764:	e0bffc15 	stw	r2,-16(fp)
    3768:	e0bffc17 	ldw	r2,-16(fp)
    376c:	1000070e 	bge	r2,zero,378c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    3770:	00036900 	call	3690 <alt_get_errno>
    3774:	1007883a 	mov	r3,r2
    3778:	e0bffc17 	ldw	r2,-16(fp)
    377c:	0085c83a 	sub	r2,zero,r2
    3780:	18800015 	stw	r2,0(r3)
          return -1;
    3784:	00bfffc4 	movi	r2,-1
    3788:	00000c06 	br	37bc <read+0xf0>
        }
        return rval;
    378c:	e0bffc17 	ldw	r2,-16(fp)
    3790:	00000a06 	br	37bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3794:	00036900 	call	3690 <alt_get_errno>
    3798:	1007883a 	mov	r3,r2
    379c:	00800344 	movi	r2,13
    37a0:	18800015 	stw	r2,0(r3)
    37a4:	00000406 	br	37b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    37a8:	00036900 	call	3690 <alt_get_errno>
    37ac:	1007883a 	mov	r3,r2
    37b0:	00801444 	movi	r2,81
    37b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    37b8:	00bfffc4 	movi	r2,-1
}
    37bc:	e037883a 	mov	sp,fp
    37c0:	dfc00117 	ldw	ra,4(sp)
    37c4:	df000017 	ldw	fp,0(sp)
    37c8:	dec00204 	addi	sp,sp,8
    37cc:	f800283a 	ret

000037d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    37d0:	defffc04 	addi	sp,sp,-16
    37d4:	dfc00315 	stw	ra,12(sp)
    37d8:	df000215 	stw	fp,8(sp)
    37dc:	dc000115 	stw	r16,4(sp)
    37e0:	df000204 	addi	fp,sp,8
    37e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    37e8:	e0bffe17 	ldw	r2,-8(fp)
    37ec:	108000d0 	cmplti	r2,r2,3
    37f0:	1000111e 	bne	r2,zero,3838 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    37f4:	04000034 	movhi	r16,0
    37f8:	8419dc04 	addi	r16,r16,26480
    37fc:	e0bffe17 	ldw	r2,-8(fp)
    3800:	01400304 	movi	r5,12
    3804:	1009883a 	mov	r4,r2
    3808:	00030840 	call	3084 <__mulsi3>
    380c:	8085883a 	add	r2,r16,r2
    3810:	10800204 	addi	r2,r2,8
    3814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3818:	04000034 	movhi	r16,0
    381c:	8419dc04 	addi	r16,r16,26480
    3820:	e0bffe17 	ldw	r2,-8(fp)
    3824:	01400304 	movi	r5,12
    3828:	1009883a 	mov	r4,r2
    382c:	00030840 	call	3084 <__mulsi3>
    3830:	8085883a 	add	r2,r16,r2
    3834:	10000015 	stw	zero,0(r2)
  }
}
    3838:	0001883a 	nop
    383c:	e6ffff04 	addi	sp,fp,-4
    3840:	dfc00217 	ldw	ra,8(sp)
    3844:	df000117 	ldw	fp,4(sp)
    3848:	dc000017 	ldw	r16,0(sp)
    384c:	dec00304 	addi	sp,sp,12
    3850:	f800283a 	ret

00003854 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3854:	defff904 	addi	sp,sp,-28
    3858:	df000615 	stw	fp,24(sp)
    385c:	df000604 	addi	fp,sp,24
    3860:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3864:	0005303a 	rdctl	r2,status
    3868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    386c:	e0fffe17 	ldw	r3,-8(fp)
    3870:	00bfff84 	movi	r2,-2
    3874:	1884703a 	and	r2,r3,r2
    3878:	1001703a 	wrctl	status,r2
  
  return context;
    387c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3880:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    3884:	d0a00a17 	ldw	r2,-32728(gp)
    3888:	10c000c4 	addi	r3,r2,3
    388c:	00bfff04 	movi	r2,-4
    3890:	1884703a 	and	r2,r3,r2
    3894:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3898:	d0e00a17 	ldw	r3,-32728(gp)
    389c:	e0bfff17 	ldw	r2,-4(fp)
    38a0:	1887883a 	add	r3,r3,r2
    38a4:	00810034 	movhi	r2,1024
    38a8:	10800004 	addi	r2,r2,0
    38ac:	10c0062e 	bgeu	r2,r3,38c8 <sbrk+0x74>
    38b0:	e0bffb17 	ldw	r2,-20(fp)
    38b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    38b8:	e0bffa17 	ldw	r2,-24(fp)
    38bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    38c0:	00bfffc4 	movi	r2,-1
    38c4:	00000b06 	br	38f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    38c8:	d0a00a17 	ldw	r2,-32728(gp)
    38cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    38d0:	d0e00a17 	ldw	r3,-32728(gp)
    38d4:	e0bfff17 	ldw	r2,-4(fp)
    38d8:	1885883a 	add	r2,r3,r2
    38dc:	d0a00a15 	stw	r2,-32728(gp)
    38e0:	e0bffb17 	ldw	r2,-20(fp)
    38e4:	e0bffc15 	stw	r2,-16(fp)
    38e8:	e0bffc17 	ldw	r2,-16(fp)
    38ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    38f0:	e0bffd17 	ldw	r2,-12(fp)
} 
    38f4:	e037883a 	mov	sp,fp
    38f8:	df000017 	ldw	fp,0(sp)
    38fc:	dec00104 	addi	sp,sp,4
    3900:	f800283a 	ret

00003904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3904:	defffe04 	addi	sp,sp,-8
    3908:	dfc00115 	stw	ra,4(sp)
    390c:	df000015 	stw	fp,0(sp)
    3910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3914:	d0a00917 	ldw	r2,-32732(gp)
    3918:	10000326 	beq	r2,zero,3928 <alt_get_errno+0x24>
    391c:	d0a00917 	ldw	r2,-32732(gp)
    3920:	103ee83a 	callr	r2
    3924:	00000106 	br	392c <alt_get_errno+0x28>
    3928:	d0a6eb04 	addi	r2,gp,-25684
}
    392c:	e037883a 	mov	sp,fp
    3930:	dfc00117 	ldw	ra,4(sp)
    3934:	df000017 	ldw	fp,0(sp)
    3938:	dec00204 	addi	sp,sp,8
    393c:	f800283a 	ret

00003940 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3940:	defff904 	addi	sp,sp,-28
    3944:	dfc00615 	stw	ra,24(sp)
    3948:	df000515 	stw	fp,20(sp)
    394c:	df000504 	addi	fp,sp,20
    3950:	e13ffd15 	stw	r4,-12(fp)
    3954:	e17ffe15 	stw	r5,-8(fp)
    3958:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    395c:	e0bffd17 	ldw	r2,-12(fp)
    3960:	10000816 	blt	r2,zero,3984 <write+0x44>
    3964:	01400304 	movi	r5,12
    3968:	e13ffd17 	ldw	r4,-12(fp)
    396c:	00030840 	call	3084 <__mulsi3>
    3970:	1007883a 	mov	r3,r2
    3974:	00800034 	movhi	r2,0
    3978:	1099dc04 	addi	r2,r2,26480
    397c:	1885883a 	add	r2,r3,r2
    3980:	00000106 	br	3988 <write+0x48>
    3984:	0005883a 	mov	r2,zero
    3988:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    398c:	e0bffb17 	ldw	r2,-20(fp)
    3990:	10002126 	beq	r2,zero,3a18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3994:	e0bffb17 	ldw	r2,-20(fp)
    3998:	10800217 	ldw	r2,8(r2)
    399c:	108000cc 	andi	r2,r2,3
    39a0:	10001826 	beq	r2,zero,3a04 <write+0xc4>
    39a4:	e0bffb17 	ldw	r2,-20(fp)
    39a8:	10800017 	ldw	r2,0(r2)
    39ac:	10800617 	ldw	r2,24(r2)
    39b0:	10001426 	beq	r2,zero,3a04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    39b4:	e0bffb17 	ldw	r2,-20(fp)
    39b8:	10800017 	ldw	r2,0(r2)
    39bc:	10800617 	ldw	r2,24(r2)
    39c0:	e0ffff17 	ldw	r3,-4(fp)
    39c4:	180d883a 	mov	r6,r3
    39c8:	e17ffe17 	ldw	r5,-8(fp)
    39cc:	e13ffb17 	ldw	r4,-20(fp)
    39d0:	103ee83a 	callr	r2
    39d4:	e0bffc15 	stw	r2,-16(fp)
    39d8:	e0bffc17 	ldw	r2,-16(fp)
    39dc:	1000070e 	bge	r2,zero,39fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    39e0:	00039040 	call	3904 <alt_get_errno>
    39e4:	1007883a 	mov	r3,r2
    39e8:	e0bffc17 	ldw	r2,-16(fp)
    39ec:	0085c83a 	sub	r2,zero,r2
    39f0:	18800015 	stw	r2,0(r3)
        return -1;
    39f4:	00bfffc4 	movi	r2,-1
    39f8:	00000c06 	br	3a2c <write+0xec>
      }
      return rval;
    39fc:	e0bffc17 	ldw	r2,-16(fp)
    3a00:	00000a06 	br	3a2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3a04:	00039040 	call	3904 <alt_get_errno>
    3a08:	1007883a 	mov	r3,r2
    3a0c:	00800344 	movi	r2,13
    3a10:	18800015 	stw	r2,0(r3)
    3a14:	00000406 	br	3a28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3a18:	00039040 	call	3904 <alt_get_errno>
    3a1c:	1007883a 	mov	r3,r2
    3a20:	00801444 	movi	r2,81
    3a24:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3a28:	00bfffc4 	movi	r2,-1
}
    3a2c:	e037883a 	mov	sp,fp
    3a30:	dfc00117 	ldw	ra,4(sp)
    3a34:	df000017 	ldw	fp,0(sp)
    3a38:	dec00204 	addi	sp,sp,8
    3a3c:	f800283a 	ret

00003a40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3a40:	defffd04 	addi	sp,sp,-12
    3a44:	dfc00215 	stw	ra,8(sp)
    3a48:	df000115 	stw	fp,4(sp)
    3a4c:	df000104 	addi	fp,sp,4
    3a50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3a54:	d1600604 	addi	r5,gp,-32744
    3a58:	e13fff17 	ldw	r4,-4(fp)
    3a5c:	0004df40 	call	4df4 <alt_dev_llist_insert>
}
    3a60:	e037883a 	mov	sp,fp
    3a64:	dfc00117 	ldw	ra,4(sp)
    3a68:	df000017 	ldw	fp,0(sp)
    3a6c:	dec00204 	addi	sp,sp,8
    3a70:	f800283a 	ret

00003a74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3a74:	defffd04 	addi	sp,sp,-12
    3a78:	dfc00215 	stw	ra,8(sp)
    3a7c:	df000115 	stw	fp,4(sp)
    3a80:	df000104 	addi	fp,sp,4
    3a84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    3a88:	00057a00 	call	57a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3a8c:	00800044 	movi	r2,1
    3a90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3a94:	0001883a 	nop
    3a98:	e037883a 	mov	sp,fp
    3a9c:	dfc00117 	ldw	ra,4(sp)
    3aa0:	df000017 	ldw	fp,0(sp)
    3aa4:	dec00204 	addi	sp,sp,8
    3aa8:	f800283a 	ret

00003aac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3aac:	defffc04 	addi	sp,sp,-16
    3ab0:	dfc00315 	stw	ra,12(sp)
    3ab4:	df000215 	stw	fp,8(sp)
    3ab8:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    3abc:	01c00204 	movi	r7,8
    3ac0:	000d883a 	mov	r6,zero
    3ac4:	000b883a 	mov	r5,zero
    3ac8:	013fc834 	movhi	r4,65312
    3acc:	21080004 	addi	r4,r4,8192
    3ad0:	0004bf00 	call	4bf0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    3ad4:	01800204 	movi	r6,8
    3ad8:	000b883a 	mov	r5,zero
    3adc:	01000034 	movhi	r4,0
    3ae0:	211a4604 	addi	r4,r4,26904
    3ae4:	00042740 	call	4274 <altera_avalon_jtag_uart_init>
    3ae8:	01000034 	movhi	r4,0
    3aec:	211a3c04 	addi	r4,r4,26864
    3af0:	0003a400 	call	3a40 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    3af4:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    3af8:	00800034 	movhi	r2,0
    3afc:	109e5404 	addi	r2,r2,31056
    3b00:	10800a17 	ldw	r2,40(r2)
    3b04:	10800017 	ldw	r2,0(r2)
    3b08:	1007883a 	mov	r3,r2
    3b0c:	00800034 	movhi	r2,0
    3b10:	109e5404 	addi	r2,r2,31056
    3b14:	10c00b15 	stw	r3,44(r2)
    3b18:	00800034 	movhi	r2,0
    3b1c:	109e5404 	addi	r2,r2,31056
    3b20:	10800a17 	ldw	r2,40(r2)
    3b24:	10800104 	addi	r2,r2,4
    3b28:	10800017 	ldw	r2,0(r2)
    3b2c:	1007883a 	mov	r3,r2
    3b30:	00800034 	movhi	r2,0
    3b34:	109e5404 	addi	r2,r2,31056
    3b38:	10c00c15 	stw	r3,48(r2)
    3b3c:	00800034 	movhi	r2,0
    3b40:	109e5404 	addi	r2,r2,31056
    3b44:	10800a17 	ldw	r2,40(r2)
    3b48:	10800204 	addi	r2,r2,8
    3b4c:	10800017 	ldw	r2,0(r2)
    3b50:	10ffffcc 	andi	r3,r2,65535
    3b54:	00800034 	movhi	r2,0
    3b58:	109e5404 	addi	r2,r2,31056
    3b5c:	10c01115 	stw	r3,68(r2)
    3b60:	00800034 	movhi	r2,0
    3b64:	109e5404 	addi	r2,r2,31056
    3b68:	10800a17 	ldw	r2,40(r2)
    3b6c:	10800204 	addi	r2,r2,8
    3b70:	10800017 	ldw	r2,0(r2)
    3b74:	1006d43a 	srli	r3,r2,16
    3b78:	00800034 	movhi	r2,0
    3b7c:	109e5404 	addi	r2,r2,31056
    3b80:	10c01215 	stw	r3,72(r2)
    3b84:	00800034 	movhi	r2,0
    3b88:	109e5404 	addi	r2,r2,31056
    3b8c:	10800a17 	ldw	r2,40(r2)
    3b90:	10800304 	addi	r2,r2,12
    3b94:	10800017 	ldw	r2,0(r2)
    3b98:	1005d07a 	srai	r2,r2,1
    3b9c:	10c0004c 	andi	r3,r2,1
    3ba0:	00800034 	movhi	r2,0
    3ba4:	109e5404 	addi	r2,r2,31056
    3ba8:	10c00d15 	stw	r3,52(r2)
    3bac:	00800034 	movhi	r2,0
    3bb0:	109e5404 	addi	r2,r2,31056
    3bb4:	10800a17 	ldw	r2,40(r2)
    3bb8:	10800304 	addi	r2,r2,12
    3bbc:	10800017 	ldw	r2,0(r2)
    3bc0:	1005d23a 	srai	r2,r2,8
    3bc4:	108003cc 	andi	r2,r2,15
    3bc8:	10800044 	addi	r2,r2,1
    3bcc:	1007883a 	mov	r3,r2
    3bd0:	00800034 	movhi	r2,0
    3bd4:	109e5404 	addi	r2,r2,31056
    3bd8:	10c00e15 	stw	r3,56(r2)
    3bdc:	00800034 	movhi	r2,0
    3be0:	109e5404 	addi	r2,r2,31056
    3be4:	10800a17 	ldw	r2,40(r2)
    3be8:	10800304 	addi	r2,r2,12
    3bec:	10800017 	ldw	r2,0(r2)
    3bf0:	1005d1ba 	srai	r2,r2,6
    3bf4:	108000cc 	andi	r2,r2,3
    3bf8:	10800044 	addi	r2,r2,1
    3bfc:	1007883a 	mov	r3,r2
    3c00:	00800034 	movhi	r2,0
    3c04:	109e5404 	addi	r2,r2,31056
    3c08:	10c00f15 	stw	r3,60(r2)
    3c0c:	00800034 	movhi	r2,0
    3c10:	109e5404 	addi	r2,r2,31056
    3c14:	10800e17 	ldw	r2,56(r2)
    3c18:	1007883a 	mov	r3,r2
    3c1c:	00800034 	movhi	r2,0
    3c20:	109e5404 	addi	r2,r2,31056
    3c24:	10800f17 	ldw	r2,60(r2)
    3c28:	100b883a 	mov	r5,r2
    3c2c:	1809883a 	mov	r4,r3
    3c30:	00030840 	call	3084 <__mulsi3>
    3c34:	e0bffe05 	stb	r2,-8(fp)
    3c38:	e0bffe03 	ldbu	r2,-8(fp)
    3c3c:	10800268 	cmpgeui	r2,r2,9
    3c40:	1000051e 	bne	r2,zero,3c58 <alt_sys_init+0x1ac>
    3c44:	00800034 	movhi	r2,0
    3c48:	109e5404 	addi	r2,r2,31056
    3c4c:	00c00044 	movi	r3,1
    3c50:	10c01015 	stw	r3,64(r2)
    3c54:	00000c06 	br	3c88 <alt_sys_init+0x1dc>
    3c58:	e0bffe03 	ldbu	r2,-8(fp)
    3c5c:	10800468 	cmpgeui	r2,r2,17
    3c60:	1000051e 	bne	r2,zero,3c78 <alt_sys_init+0x1cc>
    3c64:	00800034 	movhi	r2,0
    3c68:	109e5404 	addi	r2,r2,31056
    3c6c:	00c00084 	movi	r3,2
    3c70:	10c01015 	stw	r3,64(r2)
    3c74:	00000406 	br	3c88 <alt_sys_init+0x1dc>
    3c78:	00800034 	movhi	r2,0
    3c7c:	109e5404 	addi	r2,r2,31056
    3c80:	00c00104 	movi	r3,4
    3c84:	10c01015 	stw	r3,64(r2)
    3c88:	00800034 	movhi	r2,0
    3c8c:	109e5404 	addi	r2,r2,31056
    3c90:	10800a17 	ldw	r2,40(r2)
    3c94:	10800304 	addi	r2,r2,12
    3c98:	10800017 	ldw	r2,0(r2)
    3c9c:	1005d43a 	srai	r2,r2,16
    3ca0:	e0bffe45 	stb	r2,-7(fp)
    3ca4:	00800034 	movhi	r2,0
    3ca8:	109e5404 	addi	r2,r2,31056
    3cac:	10800a17 	ldw	r2,40(r2)
    3cb0:	10800304 	addi	r2,r2,12
    3cb4:	10800017 	ldw	r2,0(r2)
    3cb8:	1004d63a 	srli	r2,r2,24
    3cbc:	e0bffe85 	stb	r2,-6(fp)
    3cc0:	00800034 	movhi	r2,0
    3cc4:	109e5404 	addi	r2,r2,31056
    3cc8:	10801017 	ldw	r2,64(r2)
    3ccc:	10800058 	cmpnei	r2,r2,1
    3cd0:	1000041e 	bne	r2,zero,3ce4 <alt_sys_init+0x238>
    3cd4:	00800034 	movhi	r2,0
    3cd8:	109e5404 	addi	r2,r2,31056
    3cdc:	10001315 	stw	zero,76(r2)
    3ce0:	00000e06 	br	3d1c <alt_sys_init+0x270>
    3ce4:	00800034 	movhi	r2,0
    3ce8:	109e5404 	addi	r2,r2,31056
    3cec:	10801017 	ldw	r2,64(r2)
    3cf0:	10800098 	cmpnei	r2,r2,2
    3cf4:	1000051e 	bne	r2,zero,3d0c <alt_sys_init+0x260>
    3cf8:	00800034 	movhi	r2,0
    3cfc:	109e5404 	addi	r2,r2,31056
    3d00:	00c00044 	movi	r3,1
    3d04:	10c01315 	stw	r3,76(r2)
    3d08:	00000406 	br	3d1c <alt_sys_init+0x270>
    3d0c:	00800034 	movhi	r2,0
    3d10:	109e5404 	addi	r2,r2,31056
    3d14:	00c00084 	movi	r3,2
    3d18:	10c01315 	stw	r3,76(r2)
    3d1c:	e0bffe43 	ldbu	r2,-7(fp)
    3d20:	00c00804 	movi	r3,32
    3d24:	1885c83a 	sub	r2,r3,r2
    3d28:	00ffffc4 	movi	r3,-1
    3d2c:	1886d83a 	srl	r3,r3,r2
    3d30:	00800034 	movhi	r2,0
    3d34:	109e5404 	addi	r2,r2,31056
    3d38:	10c01415 	stw	r3,80(r2)
    3d3c:	e0fffe43 	ldbu	r3,-7(fp)
    3d40:	00800034 	movhi	r2,0
    3d44:	109e5404 	addi	r2,r2,31056
    3d48:	10801317 	ldw	r2,76(r2)
    3d4c:	1887883a 	add	r3,r3,r2
    3d50:	00800034 	movhi	r2,0
    3d54:	109e5404 	addi	r2,r2,31056
    3d58:	10c01515 	stw	r3,84(r2)
    3d5c:	e0bffe83 	ldbu	r2,-6(fp)
    3d60:	00c00804 	movi	r3,32
    3d64:	1885c83a 	sub	r2,r3,r2
    3d68:	00ffffc4 	movi	r3,-1
    3d6c:	1886d83a 	srl	r3,r3,r2
    3d70:	00800034 	movhi	r2,0
    3d74:	109e5404 	addi	r2,r2,31056
    3d78:	10c01615 	stw	r3,88(r2)
    3d7c:	01000034 	movhi	r4,0
    3d80:	211e5404 	addi	r4,r4,31056
    3d84:	0003a400 	call	3a40 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    3d88:	00800034 	movhi	r2,0
    3d8c:	109e6b04 	addi	r2,r2,31148
    3d90:	10800a17 	ldw	r2,40(r2)
    3d94:	10800017 	ldw	r2,0(r2)
    3d98:	1007883a 	mov	r3,r2
    3d9c:	00800034 	movhi	r2,0
    3da0:	109e6b04 	addi	r2,r2,31148
    3da4:	10c00b15 	stw	r3,44(r2)
    3da8:	00800034 	movhi	r2,0
    3dac:	109e6b04 	addi	r2,r2,31148
    3db0:	10800a17 	ldw	r2,40(r2)
    3db4:	10800104 	addi	r2,r2,4
    3db8:	10800017 	ldw	r2,0(r2)
    3dbc:	1007883a 	mov	r3,r2
    3dc0:	00800034 	movhi	r2,0
    3dc4:	109e6b04 	addi	r2,r2,31148
    3dc8:	10c00c15 	stw	r3,48(r2)
    3dcc:	00800034 	movhi	r2,0
    3dd0:	109e6b04 	addi	r2,r2,31148
    3dd4:	10800a17 	ldw	r2,40(r2)
    3dd8:	10800204 	addi	r2,r2,8
    3ddc:	10800017 	ldw	r2,0(r2)
    3de0:	10ffffcc 	andi	r3,r2,65535
    3de4:	00800034 	movhi	r2,0
    3de8:	109e6b04 	addi	r2,r2,31148
    3dec:	10c01115 	stw	r3,68(r2)
    3df0:	00800034 	movhi	r2,0
    3df4:	109e6b04 	addi	r2,r2,31148
    3df8:	10800a17 	ldw	r2,40(r2)
    3dfc:	10800204 	addi	r2,r2,8
    3e00:	10800017 	ldw	r2,0(r2)
    3e04:	1006d43a 	srli	r3,r2,16
    3e08:	00800034 	movhi	r2,0
    3e0c:	109e6b04 	addi	r2,r2,31148
    3e10:	10c01215 	stw	r3,72(r2)
    3e14:	00800034 	movhi	r2,0
    3e18:	109e6b04 	addi	r2,r2,31148
    3e1c:	10800a17 	ldw	r2,40(r2)
    3e20:	10800304 	addi	r2,r2,12
    3e24:	10800017 	ldw	r2,0(r2)
    3e28:	1005d07a 	srai	r2,r2,1
    3e2c:	10c0004c 	andi	r3,r2,1
    3e30:	00800034 	movhi	r2,0
    3e34:	109e6b04 	addi	r2,r2,31148
    3e38:	10c00d15 	stw	r3,52(r2)
    3e3c:	00800034 	movhi	r2,0
    3e40:	109e6b04 	addi	r2,r2,31148
    3e44:	10800a17 	ldw	r2,40(r2)
    3e48:	10800304 	addi	r2,r2,12
    3e4c:	10800017 	ldw	r2,0(r2)
    3e50:	1005d23a 	srai	r2,r2,8
    3e54:	108003cc 	andi	r2,r2,15
    3e58:	10800044 	addi	r2,r2,1
    3e5c:	1007883a 	mov	r3,r2
    3e60:	00800034 	movhi	r2,0
    3e64:	109e6b04 	addi	r2,r2,31148
    3e68:	10c00e15 	stw	r3,56(r2)
    3e6c:	00800034 	movhi	r2,0
    3e70:	109e6b04 	addi	r2,r2,31148
    3e74:	10800a17 	ldw	r2,40(r2)
    3e78:	10800304 	addi	r2,r2,12
    3e7c:	10800017 	ldw	r2,0(r2)
    3e80:	1005d1ba 	srai	r2,r2,6
    3e84:	108000cc 	andi	r2,r2,3
    3e88:	10800044 	addi	r2,r2,1
    3e8c:	1007883a 	mov	r3,r2
    3e90:	00800034 	movhi	r2,0
    3e94:	109e6b04 	addi	r2,r2,31148
    3e98:	10c00f15 	stw	r3,60(r2)
    3e9c:	00800034 	movhi	r2,0
    3ea0:	109e6b04 	addi	r2,r2,31148
    3ea4:	10800e17 	ldw	r2,56(r2)
    3ea8:	1007883a 	mov	r3,r2
    3eac:	00800034 	movhi	r2,0
    3eb0:	109e6b04 	addi	r2,r2,31148
    3eb4:	10800f17 	ldw	r2,60(r2)
    3eb8:	100b883a 	mov	r5,r2
    3ebc:	1809883a 	mov	r4,r3
    3ec0:	00030840 	call	3084 <__mulsi3>
    3ec4:	e0bffec5 	stb	r2,-5(fp)
    3ec8:	e0bffec3 	ldbu	r2,-5(fp)
    3ecc:	10800268 	cmpgeui	r2,r2,9
    3ed0:	1000051e 	bne	r2,zero,3ee8 <alt_sys_init+0x43c>
    3ed4:	00800034 	movhi	r2,0
    3ed8:	109e6b04 	addi	r2,r2,31148
    3edc:	00c00044 	movi	r3,1
    3ee0:	10c01015 	stw	r3,64(r2)
    3ee4:	00000c06 	br	3f18 <alt_sys_init+0x46c>
    3ee8:	e0bffec3 	ldbu	r2,-5(fp)
    3eec:	10800468 	cmpgeui	r2,r2,17
    3ef0:	1000051e 	bne	r2,zero,3f08 <alt_sys_init+0x45c>
    3ef4:	00800034 	movhi	r2,0
    3ef8:	109e6b04 	addi	r2,r2,31148
    3efc:	00c00084 	movi	r3,2
    3f00:	10c01015 	stw	r3,64(r2)
    3f04:	00000406 	br	3f18 <alt_sys_init+0x46c>
    3f08:	00800034 	movhi	r2,0
    3f0c:	109e6b04 	addi	r2,r2,31148
    3f10:	00c00104 	movi	r3,4
    3f14:	10c01015 	stw	r3,64(r2)
    3f18:	00800034 	movhi	r2,0
    3f1c:	109e6b04 	addi	r2,r2,31148
    3f20:	10800a17 	ldw	r2,40(r2)
    3f24:	10800304 	addi	r2,r2,12
    3f28:	10800017 	ldw	r2,0(r2)
    3f2c:	1005d43a 	srai	r2,r2,16
    3f30:	e0bfff05 	stb	r2,-4(fp)
    3f34:	00800034 	movhi	r2,0
    3f38:	109e6b04 	addi	r2,r2,31148
    3f3c:	10800a17 	ldw	r2,40(r2)
    3f40:	10800304 	addi	r2,r2,12
    3f44:	10800017 	ldw	r2,0(r2)
    3f48:	1004d63a 	srli	r2,r2,24
    3f4c:	e0bfff45 	stb	r2,-3(fp)
    3f50:	00800034 	movhi	r2,0
    3f54:	109e6b04 	addi	r2,r2,31148
    3f58:	10801017 	ldw	r2,64(r2)
    3f5c:	10800058 	cmpnei	r2,r2,1
    3f60:	1000041e 	bne	r2,zero,3f74 <alt_sys_init+0x4c8>
    3f64:	00800034 	movhi	r2,0
    3f68:	109e6b04 	addi	r2,r2,31148
    3f6c:	10001315 	stw	zero,76(r2)
    3f70:	00000e06 	br	3fac <alt_sys_init+0x500>
    3f74:	00800034 	movhi	r2,0
    3f78:	109e6b04 	addi	r2,r2,31148
    3f7c:	10801017 	ldw	r2,64(r2)
    3f80:	10800098 	cmpnei	r2,r2,2
    3f84:	1000051e 	bne	r2,zero,3f9c <alt_sys_init+0x4f0>
    3f88:	00800034 	movhi	r2,0
    3f8c:	109e6b04 	addi	r2,r2,31148
    3f90:	00c00044 	movi	r3,1
    3f94:	10c01315 	stw	r3,76(r2)
    3f98:	00000406 	br	3fac <alt_sys_init+0x500>
    3f9c:	00800034 	movhi	r2,0
    3fa0:	109e6b04 	addi	r2,r2,31148
    3fa4:	00c00084 	movi	r3,2
    3fa8:	10c01315 	stw	r3,76(r2)
    3fac:	e0bfff03 	ldbu	r2,-4(fp)
    3fb0:	00c00804 	movi	r3,32
    3fb4:	1885c83a 	sub	r2,r3,r2
    3fb8:	00ffffc4 	movi	r3,-1
    3fbc:	1886d83a 	srl	r3,r3,r2
    3fc0:	00800034 	movhi	r2,0
    3fc4:	109e6b04 	addi	r2,r2,31148
    3fc8:	10c01415 	stw	r3,80(r2)
    3fcc:	e0ffff03 	ldbu	r3,-4(fp)
    3fd0:	00800034 	movhi	r2,0
    3fd4:	109e6b04 	addi	r2,r2,31148
    3fd8:	10801317 	ldw	r2,76(r2)
    3fdc:	1887883a 	add	r3,r3,r2
    3fe0:	00800034 	movhi	r2,0
    3fe4:	109e6b04 	addi	r2,r2,31148
    3fe8:	10c01515 	stw	r3,84(r2)
    3fec:	e0bfff43 	ldbu	r2,-3(fp)
    3ff0:	00c00804 	movi	r3,32
    3ff4:	1885c83a 	sub	r2,r3,r2
    3ff8:	00ffffc4 	movi	r3,-1
    3ffc:	1886d83a 	srl	r3,r3,r2
    4000:	00800034 	movhi	r2,0
    4004:	109e6b04 	addi	r2,r2,31148
    4008:	10c01615 	stw	r3,88(r2)
    400c:	01000034 	movhi	r4,0
    4010:	211e6b04 	addi	r4,r4,31148
    4014:	0003a400 	call	3a40 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
    4018:	00800034 	movhi	r2,0
    401c:	109e8204 	addi	r2,r2,31240
    4020:	10800a17 	ldw	r2,40(r2)
    4024:	10800017 	ldw	r2,0(r2)
    4028:	10c003cc 	andi	r3,r2,15
    402c:	00800034 	movhi	r2,0
    4030:	109e8204 	addi	r2,r2,31240
    4034:	10c00b15 	stw	r3,44(r2)
    4038:	00800034 	movhi	r2,0
    403c:	109e8204 	addi	r2,r2,31240
    4040:	10800a17 	ldw	r2,40(r2)
    4044:	10800017 	ldw	r2,0(r2)
    4048:	1005d13a 	srai	r2,r2,4
    404c:	10c0004c 	andi	r3,r2,1
    4050:	00800034 	movhi	r2,0
    4054:	109e8204 	addi	r2,r2,31240
    4058:	10c00c15 	stw	r3,48(r2)
    405c:	00800034 	movhi	r2,0
    4060:	109e8204 	addi	r2,r2,31240
    4064:	10800a17 	ldw	r2,40(r2)
    4068:	10800017 	ldw	r2,0(r2)
    406c:	1005d17a 	srai	r2,r2,5
    4070:	10c0004c 	andi	r3,r2,1
    4074:	00800034 	movhi	r2,0
    4078:	109e8204 	addi	r2,r2,31240
    407c:	10c00d15 	stw	r3,52(r2)
    4080:	00800034 	movhi	r2,0
    4084:	109e8204 	addi	r2,r2,31240
    4088:	10800a17 	ldw	r2,40(r2)
    408c:	10800017 	ldw	r2,0(r2)
    4090:	1005d43a 	srai	r2,r2,16
    4094:	10c003cc 	andi	r3,r2,15
    4098:	00800034 	movhi	r2,0
    409c:	109e8204 	addi	r2,r2,31240
    40a0:	10c00e15 	stw	r3,56(r2)
    40a4:	00800034 	movhi	r2,0
    40a8:	109e8204 	addi	r2,r2,31240
    40ac:	10800a17 	ldw	r2,40(r2)
    40b0:	10800017 	ldw	r2,0(r2)
    40b4:	1005d53a 	srai	r2,r2,20
    40b8:	10c0004c 	andi	r3,r2,1
    40bc:	00800034 	movhi	r2,0
    40c0:	109e8204 	addi	r2,r2,31240
    40c4:	10c00f15 	stw	r3,60(r2)
    40c8:	00800034 	movhi	r2,0
    40cc:	109e8204 	addi	r2,r2,31240
    40d0:	10800a17 	ldw	r2,40(r2)
    40d4:	10800017 	ldw	r2,0(r2)
    40d8:	1005d57a 	srai	r2,r2,21
    40dc:	10c0004c 	andi	r3,r2,1
    40e0:	00800034 	movhi	r2,0
    40e4:	109e8204 	addi	r2,r2,31240
    40e8:	10c01015 	stw	r3,64(r2)
    40ec:	01000034 	movhi	r4,0
    40f0:	211e8204 	addi	r4,r4,31240
    40f4:	0003a400 	call	3a40 <alt_dev_reg>
}
    40f8:	0001883a 	nop
    40fc:	e037883a 	mov	sp,fp
    4100:	dfc00117 	ldw	ra,4(sp)
    4104:	df000017 	ldw	fp,0(sp)
    4108:	dec00204 	addi	sp,sp,8
    410c:	f800283a 	ret

00004110 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4110:	defffa04 	addi	sp,sp,-24
    4114:	dfc00515 	stw	ra,20(sp)
    4118:	df000415 	stw	fp,16(sp)
    411c:	df000404 	addi	fp,sp,16
    4120:	e13ffd15 	stw	r4,-12(fp)
    4124:	e17ffe15 	stw	r5,-8(fp)
    4128:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    412c:	e0bffd17 	ldw	r2,-12(fp)
    4130:	10800017 	ldw	r2,0(r2)
    4134:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4138:	e0bffc17 	ldw	r2,-16(fp)
    413c:	10c00a04 	addi	r3,r2,40
    4140:	e0bffd17 	ldw	r2,-12(fp)
    4144:	10800217 	ldw	r2,8(r2)
    4148:	100f883a 	mov	r7,r2
    414c:	e1bfff17 	ldw	r6,-4(fp)
    4150:	e17ffe17 	ldw	r5,-8(fp)
    4154:	1809883a 	mov	r4,r3
    4158:	00047380 	call	4738 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    415c:	e037883a 	mov	sp,fp
    4160:	dfc00117 	ldw	ra,4(sp)
    4164:	df000017 	ldw	fp,0(sp)
    4168:	dec00204 	addi	sp,sp,8
    416c:	f800283a 	ret

00004170 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4170:	defffa04 	addi	sp,sp,-24
    4174:	dfc00515 	stw	ra,20(sp)
    4178:	df000415 	stw	fp,16(sp)
    417c:	df000404 	addi	fp,sp,16
    4180:	e13ffd15 	stw	r4,-12(fp)
    4184:	e17ffe15 	stw	r5,-8(fp)
    4188:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    418c:	e0bffd17 	ldw	r2,-12(fp)
    4190:	10800017 	ldw	r2,0(r2)
    4194:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4198:	e0bffc17 	ldw	r2,-16(fp)
    419c:	10c00a04 	addi	r3,r2,40
    41a0:	e0bffd17 	ldw	r2,-12(fp)
    41a4:	10800217 	ldw	r2,8(r2)
    41a8:	100f883a 	mov	r7,r2
    41ac:	e1bfff17 	ldw	r6,-4(fp)
    41b0:	e17ffe17 	ldw	r5,-8(fp)
    41b4:	1809883a 	mov	r4,r3
    41b8:	00049540 	call	4954 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    41d0:	defffc04 	addi	sp,sp,-16
    41d4:	dfc00315 	stw	ra,12(sp)
    41d8:	df000215 	stw	fp,8(sp)
    41dc:	df000204 	addi	fp,sp,8
    41e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    41e4:	e0bfff17 	ldw	r2,-4(fp)
    41e8:	10800017 	ldw	r2,0(r2)
    41ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    41f0:	e0bffe17 	ldw	r2,-8(fp)
    41f4:	10c00a04 	addi	r3,r2,40
    41f8:	e0bfff17 	ldw	r2,-4(fp)
    41fc:	10800217 	ldw	r2,8(r2)
    4200:	100b883a 	mov	r5,r2
    4204:	1809883a 	mov	r4,r3
    4208:	00045e00 	call	45e0 <altera_avalon_jtag_uart_close>
}
    420c:	e037883a 	mov	sp,fp
    4210:	dfc00117 	ldw	ra,4(sp)
    4214:	df000017 	ldw	fp,0(sp)
    4218:	dec00204 	addi	sp,sp,8
    421c:	f800283a 	ret

00004220 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4220:	defffa04 	addi	sp,sp,-24
    4224:	dfc00515 	stw	ra,20(sp)
    4228:	df000415 	stw	fp,16(sp)
    422c:	df000404 	addi	fp,sp,16
    4230:	e13ffd15 	stw	r4,-12(fp)
    4234:	e17ffe15 	stw	r5,-8(fp)
    4238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    423c:	e0bffd17 	ldw	r2,-12(fp)
    4240:	10800017 	ldw	r2,0(r2)
    4244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4248:	e0bffc17 	ldw	r2,-16(fp)
    424c:	10800a04 	addi	r2,r2,40
    4250:	e1bfff17 	ldw	r6,-4(fp)
    4254:	e17ffe17 	ldw	r5,-8(fp)
    4258:	1009883a 	mov	r4,r2
    425c:	00046480 	call	4648 <altera_avalon_jtag_uart_ioctl>
}
    4260:	e037883a 	mov	sp,fp
    4264:	dfc00117 	ldw	ra,4(sp)
    4268:	df000017 	ldw	fp,0(sp)
    426c:	dec00204 	addi	sp,sp,8
    4270:	f800283a 	ret

00004274 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4274:	defffa04 	addi	sp,sp,-24
    4278:	dfc00515 	stw	ra,20(sp)
    427c:	df000415 	stw	fp,16(sp)
    4280:	df000404 	addi	fp,sp,16
    4284:	e13ffd15 	stw	r4,-12(fp)
    4288:	e17ffe15 	stw	r5,-8(fp)
    428c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4290:	e0bffd17 	ldw	r2,-12(fp)
    4294:	00c00044 	movi	r3,1
    4298:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    429c:	e0bffd17 	ldw	r2,-12(fp)
    42a0:	10800017 	ldw	r2,0(r2)
    42a4:	10800104 	addi	r2,r2,4
    42a8:	1007883a 	mov	r3,r2
    42ac:	e0bffd17 	ldw	r2,-12(fp)
    42b0:	10800817 	ldw	r2,32(r2)
    42b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    42b8:	e0bffe17 	ldw	r2,-8(fp)
    42bc:	e0ffff17 	ldw	r3,-4(fp)
    42c0:	d8000015 	stw	zero,0(sp)
    42c4:	e1fffd17 	ldw	r7,-12(fp)
    42c8:	01800034 	movhi	r6,0
    42cc:	3190cd04 	addi	r6,r6,17204
    42d0:	180b883a 	mov	r5,r3
    42d4:	1009883a 	mov	r4,r2
    42d8:	0004f780 	call	4f78 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    42dc:	e0bffd17 	ldw	r2,-12(fp)
    42e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    42e4:	e0bffd17 	ldw	r2,-12(fp)
    42e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    42ec:	d0e6f017 	ldw	r3,-25664(gp)
    42f0:	e1fffd17 	ldw	r7,-12(fp)
    42f4:	01800034 	movhi	r6,0
    42f8:	31915004 	addi	r6,r6,17728
    42fc:	180b883a 	mov	r5,r3
    4300:	1009883a 	mov	r4,r2
    4304:	0004c6c0 	call	4c6c <alt_alarm_start>
    4308:	1000040e 	bge	r2,zero,431c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    430c:	e0fffd17 	ldw	r3,-12(fp)
    4310:	00a00034 	movhi	r2,32768
    4314:	10bfffc4 	addi	r2,r2,-1
    4318:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    431c:	0001883a 	nop
    4320:	e037883a 	mov	sp,fp
    4324:	dfc00117 	ldw	ra,4(sp)
    4328:	df000017 	ldw	fp,0(sp)
    432c:	dec00204 	addi	sp,sp,8
    4330:	f800283a 	ret

00004334 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4334:	defff804 	addi	sp,sp,-32
    4338:	df000715 	stw	fp,28(sp)
    433c:	df000704 	addi	fp,sp,28
    4340:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    434c:	e0bffb17 	ldw	r2,-20(fp)
    4350:	10800017 	ldw	r2,0(r2)
    4354:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4358:	e0bffc17 	ldw	r2,-16(fp)
    435c:	10800104 	addi	r2,r2,4
    4360:	10800037 	ldwio	r2,0(r2)
    4364:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4368:	e0bffd17 	ldw	r2,-12(fp)
    436c:	1080c00c 	andi	r2,r2,768
    4370:	10006d26 	beq	r2,zero,4528 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4374:	e0bffd17 	ldw	r2,-12(fp)
    4378:	1080400c 	andi	r2,r2,256
    437c:	10003526 	beq	r2,zero,4454 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4380:	00800074 	movhi	r2,1
    4384:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4388:	e0bffb17 	ldw	r2,-20(fp)
    438c:	10800a17 	ldw	r2,40(r2)
    4390:	10800044 	addi	r2,r2,1
    4394:	1081ffcc 	andi	r2,r2,2047
    4398:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    439c:	e0bffb17 	ldw	r2,-20(fp)
    43a0:	10c00b17 	ldw	r3,44(r2)
    43a4:	e0bffe17 	ldw	r2,-8(fp)
    43a8:	18801526 	beq	r3,r2,4400 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    43ac:	e0bffc17 	ldw	r2,-16(fp)
    43b0:	10800037 	ldwio	r2,0(r2)
    43b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    43b8:	e0bff917 	ldw	r2,-28(fp)
    43bc:	10a0000c 	andi	r2,r2,32768
    43c0:	10001126 	beq	r2,zero,4408 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    43c4:	e0bffb17 	ldw	r2,-20(fp)
    43c8:	10800a17 	ldw	r2,40(r2)
    43cc:	e0fff917 	ldw	r3,-28(fp)
    43d0:	1809883a 	mov	r4,r3
    43d4:	e0fffb17 	ldw	r3,-20(fp)
    43d8:	1885883a 	add	r2,r3,r2
    43dc:	10800e04 	addi	r2,r2,56
    43e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    43e4:	e0bffb17 	ldw	r2,-20(fp)
    43e8:	10800a17 	ldw	r2,40(r2)
    43ec:	10800044 	addi	r2,r2,1
    43f0:	10c1ffcc 	andi	r3,r2,2047
    43f4:	e0bffb17 	ldw	r2,-20(fp)
    43f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    43fc:	003fe206 	br	4388 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004388>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    4400:	0001883a 	nop
    4404:	00000106 	br	440c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    4408:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    440c:	e0bff917 	ldw	r2,-28(fp)
    4410:	10bfffec 	andhi	r2,r2,65535
    4414:	10000f26 	beq	r2,zero,4454 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4418:	e0bffb17 	ldw	r2,-20(fp)
    441c:	10c00817 	ldw	r3,32(r2)
    4420:	00bfff84 	movi	r2,-2
    4424:	1886703a 	and	r3,r3,r2
    4428:	e0bffb17 	ldw	r2,-20(fp)
    442c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4430:	e0bffc17 	ldw	r2,-16(fp)
    4434:	10800104 	addi	r2,r2,4
    4438:	1007883a 	mov	r3,r2
    443c:	e0bffb17 	ldw	r2,-20(fp)
    4440:	10800817 	ldw	r2,32(r2)
    4444:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4448:	e0bffc17 	ldw	r2,-16(fp)
    444c:	10800104 	addi	r2,r2,4
    4450:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4454:	e0bffd17 	ldw	r2,-12(fp)
    4458:	1080800c 	andi	r2,r2,512
    445c:	103fbe26 	beq	r2,zero,4358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004358>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4460:	e0bffd17 	ldw	r2,-12(fp)
    4464:	1004d43a 	srli	r2,r2,16
    4468:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    446c:	00001406 	br	44c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4470:	e0bffc17 	ldw	r2,-16(fp)
    4474:	e0fffb17 	ldw	r3,-20(fp)
    4478:	18c00d17 	ldw	r3,52(r3)
    447c:	e13ffb17 	ldw	r4,-20(fp)
    4480:	20c7883a 	add	r3,r4,r3
    4484:	18c20e04 	addi	r3,r3,2104
    4488:	18c00003 	ldbu	r3,0(r3)
    448c:	18c03fcc 	andi	r3,r3,255
    4490:	18c0201c 	xori	r3,r3,128
    4494:	18ffe004 	addi	r3,r3,-128
    4498:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    449c:	e0bffb17 	ldw	r2,-20(fp)
    44a0:	10800d17 	ldw	r2,52(r2)
    44a4:	10800044 	addi	r2,r2,1
    44a8:	10c1ffcc 	andi	r3,r2,2047
    44ac:	e0bffb17 	ldw	r2,-20(fp)
    44b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    44b4:	e0bffa17 	ldw	r2,-24(fp)
    44b8:	10bfffc4 	addi	r2,r2,-1
    44bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    44c0:	e0bffa17 	ldw	r2,-24(fp)
    44c4:	10000526 	beq	r2,zero,44dc <altera_avalon_jtag_uart_irq+0x1a8>
    44c8:	e0bffb17 	ldw	r2,-20(fp)
    44cc:	10c00d17 	ldw	r3,52(r2)
    44d0:	e0bffb17 	ldw	r2,-20(fp)
    44d4:	10800c17 	ldw	r2,48(r2)
    44d8:	18bfe51e 	bne	r3,r2,4470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004470>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    44dc:	e0bffa17 	ldw	r2,-24(fp)
    44e0:	103f9d26 	beq	r2,zero,4358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004358>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    44e4:	e0bffb17 	ldw	r2,-20(fp)
    44e8:	10c00817 	ldw	r3,32(r2)
    44ec:	00bfff44 	movi	r2,-3
    44f0:	1886703a 	and	r3,r3,r2
    44f4:	e0bffb17 	ldw	r2,-20(fp)
    44f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    44fc:	e0bffb17 	ldw	r2,-20(fp)
    4500:	10800017 	ldw	r2,0(r2)
    4504:	10800104 	addi	r2,r2,4
    4508:	1007883a 	mov	r3,r2
    450c:	e0bffb17 	ldw	r2,-20(fp)
    4510:	10800817 	ldw	r2,32(r2)
    4514:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4518:	e0bffc17 	ldw	r2,-16(fp)
    451c:	10800104 	addi	r2,r2,4
    4520:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4524:	003f8c06 	br	4358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004358>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    4528:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    452c:	0001883a 	nop
    4530:	e037883a 	mov	sp,fp
    4534:	df000017 	ldw	fp,0(sp)
    4538:	dec00104 	addi	sp,sp,4
    453c:	f800283a 	ret

00004540 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4540:	defff804 	addi	sp,sp,-32
    4544:	df000715 	stw	fp,28(sp)
    4548:	df000704 	addi	fp,sp,28
    454c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4550:	e0bffb17 	ldw	r2,-20(fp)
    4554:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4558:	e0bff917 	ldw	r2,-28(fp)
    455c:	10800017 	ldw	r2,0(r2)
    4560:	10800104 	addi	r2,r2,4
    4564:	10800037 	ldwio	r2,0(r2)
    4568:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    456c:	e0bffa17 	ldw	r2,-24(fp)
    4570:	1081000c 	andi	r2,r2,1024
    4574:	10000b26 	beq	r2,zero,45a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4578:	e0bff917 	ldw	r2,-28(fp)
    457c:	10800017 	ldw	r2,0(r2)
    4580:	10800104 	addi	r2,r2,4
    4584:	1007883a 	mov	r3,r2
    4588:	e0bff917 	ldw	r2,-28(fp)
    458c:	10800817 	ldw	r2,32(r2)
    4590:	10810014 	ori	r2,r2,1024
    4594:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    4598:	e0bff917 	ldw	r2,-28(fp)
    459c:	10000915 	stw	zero,36(r2)
    45a0:	00000a06 	br	45cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    45a4:	e0bff917 	ldw	r2,-28(fp)
    45a8:	10c00917 	ldw	r3,36(r2)
    45ac:	00a00034 	movhi	r2,32768
    45b0:	10bfff04 	addi	r2,r2,-4
    45b4:	10c00536 	bltu	r2,r3,45cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    45b8:	e0bff917 	ldw	r2,-28(fp)
    45bc:	10800917 	ldw	r2,36(r2)
    45c0:	10c00044 	addi	r3,r2,1
    45c4:	e0bff917 	ldw	r2,-28(fp)
    45c8:	10c00915 	stw	r3,36(r2)
    45cc:	d0a6f017 	ldw	r2,-25664(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    45d0:	e037883a 	mov	sp,fp
    45d4:	df000017 	ldw	fp,0(sp)
    45d8:	dec00104 	addi	sp,sp,4
    45dc:	f800283a 	ret

000045e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    45e0:	defffd04 	addi	sp,sp,-12
    45e4:	df000215 	stw	fp,8(sp)
    45e8:	df000204 	addi	fp,sp,8
    45ec:	e13ffe15 	stw	r4,-8(fp)
    45f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    45f4:	00000506 	br	460c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    45f8:	e0bfff17 	ldw	r2,-4(fp)
    45fc:	1090000c 	andi	r2,r2,16384
    4600:	10000226 	beq	r2,zero,460c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    4604:	00bffd44 	movi	r2,-11
    4608:	00000b06 	br	4638 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    460c:	e0bffe17 	ldw	r2,-8(fp)
    4610:	10c00d17 	ldw	r3,52(r2)
    4614:	e0bffe17 	ldw	r2,-8(fp)
    4618:	10800c17 	ldw	r2,48(r2)
    461c:	18800526 	beq	r3,r2,4634 <altera_avalon_jtag_uart_close+0x54>
    4620:	e0bffe17 	ldw	r2,-8(fp)
    4624:	10c00917 	ldw	r3,36(r2)
    4628:	e0bffe17 	ldw	r2,-8(fp)
    462c:	10800117 	ldw	r2,4(r2)
    4630:	18bff136 	bltu	r3,r2,45f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4634:	0005883a 	mov	r2,zero
}
    4638:	e037883a 	mov	sp,fp
    463c:	df000017 	ldw	fp,0(sp)
    4640:	dec00104 	addi	sp,sp,4
    4644:	f800283a 	ret

00004648 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4648:	defffa04 	addi	sp,sp,-24
    464c:	df000515 	stw	fp,20(sp)
    4650:	df000504 	addi	fp,sp,20
    4654:	e13ffd15 	stw	r4,-12(fp)
    4658:	e17ffe15 	stw	r5,-8(fp)
    465c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    4660:	00bff9c4 	movi	r2,-25
    4664:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    4668:	e0bffe17 	ldw	r2,-8(fp)
    466c:	10da8060 	cmpeqi	r3,r2,27137
    4670:	1800031e 	bne	r3,zero,4680 <altera_avalon_jtag_uart_ioctl+0x38>
    4674:	109a80a0 	cmpeqi	r2,r2,27138
    4678:	1000181e 	bne	r2,zero,46dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    467c:	00002906 	br	4724 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4680:	e0bffd17 	ldw	r2,-12(fp)
    4684:	10c00117 	ldw	r3,4(r2)
    4688:	00a00034 	movhi	r2,32768
    468c:	10bfffc4 	addi	r2,r2,-1
    4690:	18802126 	beq	r3,r2,4718 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    4694:	e0bfff17 	ldw	r2,-4(fp)
    4698:	10800017 	ldw	r2,0(r2)
    469c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    46a0:	e0bffc17 	ldw	r2,-16(fp)
    46a4:	10800090 	cmplti	r2,r2,2
    46a8:	1000061e 	bne	r2,zero,46c4 <altera_avalon_jtag_uart_ioctl+0x7c>
    46ac:	e0fffc17 	ldw	r3,-16(fp)
    46b0:	00a00034 	movhi	r2,32768
    46b4:	10bfffc4 	addi	r2,r2,-1
    46b8:	18800226 	beq	r3,r2,46c4 <altera_avalon_jtag_uart_ioctl+0x7c>
    46bc:	e0bffc17 	ldw	r2,-16(fp)
    46c0:	00000206 	br	46cc <altera_avalon_jtag_uart_ioctl+0x84>
    46c4:	00a00034 	movhi	r2,32768
    46c8:	10bfff84 	addi	r2,r2,-2
    46cc:	e0fffd17 	ldw	r3,-12(fp)
    46d0:	18800115 	stw	r2,4(r3)
      rc = 0;
    46d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    46d8:	00000f06 	br	4718 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    46dc:	e0bffd17 	ldw	r2,-12(fp)
    46e0:	10c00117 	ldw	r3,4(r2)
    46e4:	00a00034 	movhi	r2,32768
    46e8:	10bfffc4 	addi	r2,r2,-1
    46ec:	18800c26 	beq	r3,r2,4720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    46f0:	e0bffd17 	ldw	r2,-12(fp)
    46f4:	10c00917 	ldw	r3,36(r2)
    46f8:	e0bffd17 	ldw	r2,-12(fp)
    46fc:	10800117 	ldw	r2,4(r2)
    4700:	1885803a 	cmpltu	r2,r3,r2
    4704:	10c03fcc 	andi	r3,r2,255
    4708:	e0bfff17 	ldw	r2,-4(fp)
    470c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    4710:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4714:	00000206 	br	4720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    4718:	0001883a 	nop
    471c:	00000106 	br	4724 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    4720:	0001883a 	nop

  default:
    break;
  }

  return rc;
    4724:	e0bffb17 	ldw	r2,-20(fp)
}
    4728:	e037883a 	mov	sp,fp
    472c:	df000017 	ldw	fp,0(sp)
    4730:	dec00104 	addi	sp,sp,4
    4734:	f800283a 	ret

00004738 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    4738:	defff304 	addi	sp,sp,-52
    473c:	dfc00c15 	stw	ra,48(sp)
    4740:	df000b15 	stw	fp,44(sp)
    4744:	df000b04 	addi	fp,sp,44
    4748:	e13ffc15 	stw	r4,-16(fp)
    474c:	e17ffd15 	stw	r5,-12(fp)
    4750:	e1bffe15 	stw	r6,-8(fp)
    4754:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    4758:	e0bffd17 	ldw	r2,-12(fp)
    475c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4760:	00004706 	br	4880 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4764:	e0bffc17 	ldw	r2,-16(fp)
    4768:	10800a17 	ldw	r2,40(r2)
    476c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4770:	e0bffc17 	ldw	r2,-16(fp)
    4774:	10800b17 	ldw	r2,44(r2)
    4778:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    477c:	e0fff717 	ldw	r3,-36(fp)
    4780:	e0bff817 	ldw	r2,-32(fp)
    4784:	18800536 	bltu	r3,r2,479c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4788:	e0fff717 	ldw	r3,-36(fp)
    478c:	e0bff817 	ldw	r2,-32(fp)
    4790:	1885c83a 	sub	r2,r3,r2
    4794:	e0bff615 	stw	r2,-40(fp)
    4798:	00000406 	br	47ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    479c:	00c20004 	movi	r3,2048
    47a0:	e0bff817 	ldw	r2,-32(fp)
    47a4:	1885c83a 	sub	r2,r3,r2
    47a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    47ac:	e0bff617 	ldw	r2,-40(fp)
    47b0:	10001e26 	beq	r2,zero,482c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    47b4:	e0fffe17 	ldw	r3,-8(fp)
    47b8:	e0bff617 	ldw	r2,-40(fp)
    47bc:	1880022e 	bgeu	r3,r2,47c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    47c0:	e0bffe17 	ldw	r2,-8(fp)
    47c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    47c8:	e0bffc17 	ldw	r2,-16(fp)
    47cc:	10c00e04 	addi	r3,r2,56
    47d0:	e0bff817 	ldw	r2,-32(fp)
    47d4:	1885883a 	add	r2,r3,r2
    47d8:	e1bff617 	ldw	r6,-40(fp)
    47dc:	100b883a 	mov	r5,r2
    47e0:	e13ff517 	ldw	r4,-44(fp)
    47e4:	00016fc0 	call	16fc <memcpy>
      ptr   += n;
    47e8:	e0fff517 	ldw	r3,-44(fp)
    47ec:	e0bff617 	ldw	r2,-40(fp)
    47f0:	1885883a 	add	r2,r3,r2
    47f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    47f8:	e0fffe17 	ldw	r3,-8(fp)
    47fc:	e0bff617 	ldw	r2,-40(fp)
    4800:	1885c83a 	sub	r2,r3,r2
    4804:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4808:	e0fff817 	ldw	r3,-32(fp)
    480c:	e0bff617 	ldw	r2,-40(fp)
    4810:	1885883a 	add	r2,r3,r2
    4814:	10c1ffcc 	andi	r3,r2,2047
    4818:	e0bffc17 	ldw	r2,-16(fp)
    481c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4820:	e0bffe17 	ldw	r2,-8(fp)
    4824:	00bfcf16 	blt	zero,r2,4764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004764>
    4828:	00000106 	br	4830 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    482c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    4830:	e0fff517 	ldw	r3,-44(fp)
    4834:	e0bffd17 	ldw	r2,-12(fp)
    4838:	1880141e 	bne	r3,r2,488c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    483c:	e0bfff17 	ldw	r2,-4(fp)
    4840:	1090000c 	andi	r2,r2,16384
    4844:	1000131e 	bne	r2,zero,4894 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4848:	0001883a 	nop
    484c:	e0bffc17 	ldw	r2,-16(fp)
    4850:	10c00a17 	ldw	r3,40(r2)
    4854:	e0bff717 	ldw	r2,-36(fp)
    4858:	1880051e 	bne	r3,r2,4870 <altera_avalon_jtag_uart_read+0x138>
    485c:	e0bffc17 	ldw	r2,-16(fp)
    4860:	10c00917 	ldw	r3,36(r2)
    4864:	e0bffc17 	ldw	r2,-16(fp)
    4868:	10800117 	ldw	r2,4(r2)
    486c:	18bff736 	bltu	r3,r2,484c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700484c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4870:	e0bffc17 	ldw	r2,-16(fp)
    4874:	10c00a17 	ldw	r3,40(r2)
    4878:	e0bff717 	ldw	r2,-36(fp)
    487c:	18800726 	beq	r3,r2,489c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4880:	e0bffe17 	ldw	r2,-8(fp)
    4884:	00bfb716 	blt	zero,r2,4764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004764>
    4888:	00000506 	br	48a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    488c:	0001883a 	nop
    4890:	00000306 	br	48a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    4894:	0001883a 	nop
    4898:	00000106 	br	48a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    489c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    48a0:	e0fff517 	ldw	r3,-44(fp)
    48a4:	e0bffd17 	ldw	r2,-12(fp)
    48a8:	18801826 	beq	r3,r2,490c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    48ac:	0005303a 	rdctl	r2,status
    48b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48b4:	e0fffb17 	ldw	r3,-20(fp)
    48b8:	00bfff84 	movi	r2,-2
    48bc:	1884703a 	and	r2,r3,r2
    48c0:	1001703a 	wrctl	status,r2
  
  return context;
    48c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    48c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    48cc:	e0bffc17 	ldw	r2,-16(fp)
    48d0:	10800817 	ldw	r2,32(r2)
    48d4:	10c00054 	ori	r3,r2,1
    48d8:	e0bffc17 	ldw	r2,-16(fp)
    48dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    48e0:	e0bffc17 	ldw	r2,-16(fp)
    48e4:	10800017 	ldw	r2,0(r2)
    48e8:	10800104 	addi	r2,r2,4
    48ec:	1007883a 	mov	r3,r2
    48f0:	e0bffc17 	ldw	r2,-16(fp)
    48f4:	10800817 	ldw	r2,32(r2)
    48f8:	18800035 	stwio	r2,0(r3)
    48fc:	e0bffa17 	ldw	r2,-24(fp)
    4900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4904:	e0bff917 	ldw	r2,-28(fp)
    4908:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    490c:	e0fff517 	ldw	r3,-44(fp)
    4910:	e0bffd17 	ldw	r2,-12(fp)
    4914:	18800426 	beq	r3,r2,4928 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    4918:	e0fff517 	ldw	r3,-44(fp)
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	1885c83a 	sub	r2,r3,r2
    4924:	00000606 	br	4940 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    4928:	e0bfff17 	ldw	r2,-4(fp)
    492c:	1090000c 	andi	r2,r2,16384
    4930:	10000226 	beq	r2,zero,493c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4934:	00bffd44 	movi	r2,-11
    4938:	00000106 	br	4940 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    493c:	00bffec4 	movi	r2,-5
}
    4940:	e037883a 	mov	sp,fp
    4944:	dfc00117 	ldw	ra,4(sp)
    4948:	df000017 	ldw	fp,0(sp)
    494c:	dec00204 	addi	sp,sp,8
    4950:	f800283a 	ret

00004954 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4954:	defff304 	addi	sp,sp,-52
    4958:	dfc00c15 	stw	ra,48(sp)
    495c:	df000b15 	stw	fp,44(sp)
    4960:	df000b04 	addi	fp,sp,44
    4964:	e13ffc15 	stw	r4,-16(fp)
    4968:	e17ffd15 	stw	r5,-12(fp)
    496c:	e1bffe15 	stw	r6,-8(fp)
    4970:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4974:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4978:	e0bffd17 	ldw	r2,-12(fp)
    497c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4980:	00003706 	br	4a60 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4984:	e0bffc17 	ldw	r2,-16(fp)
    4988:	10800c17 	ldw	r2,48(r2)
    498c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4990:	e0bffc17 	ldw	r2,-16(fp)
    4994:	10800d17 	ldw	r2,52(r2)
    4998:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    499c:	e0fff917 	ldw	r3,-28(fp)
    49a0:	e0bff517 	ldw	r2,-44(fp)
    49a4:	1880062e 	bgeu	r3,r2,49c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    49a8:	e0fff517 	ldw	r3,-44(fp)
    49ac:	e0bff917 	ldw	r2,-28(fp)
    49b0:	1885c83a 	sub	r2,r3,r2
    49b4:	10bfffc4 	addi	r2,r2,-1
    49b8:	e0bff615 	stw	r2,-40(fp)
    49bc:	00000b06 	br	49ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    49c0:	e0bff517 	ldw	r2,-44(fp)
    49c4:	10000526 	beq	r2,zero,49dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    49c8:	00c20004 	movi	r3,2048
    49cc:	e0bff917 	ldw	r2,-28(fp)
    49d0:	1885c83a 	sub	r2,r3,r2
    49d4:	e0bff615 	stw	r2,-40(fp)
    49d8:	00000406 	br	49ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    49dc:	00c1ffc4 	movi	r3,2047
    49e0:	e0bff917 	ldw	r2,-28(fp)
    49e4:	1885c83a 	sub	r2,r3,r2
    49e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    49ec:	e0bff617 	ldw	r2,-40(fp)
    49f0:	10001e26 	beq	r2,zero,4a6c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    49f4:	e0fffe17 	ldw	r3,-8(fp)
    49f8:	e0bff617 	ldw	r2,-40(fp)
    49fc:	1880022e 	bgeu	r3,r2,4a08 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4a00:	e0bffe17 	ldw	r2,-8(fp)
    4a04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4a08:	e0bffc17 	ldw	r2,-16(fp)
    4a0c:	10c20e04 	addi	r3,r2,2104
    4a10:	e0bff917 	ldw	r2,-28(fp)
    4a14:	1885883a 	add	r2,r3,r2
    4a18:	e1bff617 	ldw	r6,-40(fp)
    4a1c:	e17ffd17 	ldw	r5,-12(fp)
    4a20:	1009883a 	mov	r4,r2
    4a24:	00016fc0 	call	16fc <memcpy>
      ptr   += n;
    4a28:	e0fffd17 	ldw	r3,-12(fp)
    4a2c:	e0bff617 	ldw	r2,-40(fp)
    4a30:	1885883a 	add	r2,r3,r2
    4a34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    4a38:	e0fffe17 	ldw	r3,-8(fp)
    4a3c:	e0bff617 	ldw	r2,-40(fp)
    4a40:	1885c83a 	sub	r2,r3,r2
    4a44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4a48:	e0fff917 	ldw	r3,-28(fp)
    4a4c:	e0bff617 	ldw	r2,-40(fp)
    4a50:	1885883a 	add	r2,r3,r2
    4a54:	10c1ffcc 	andi	r3,r2,2047
    4a58:	e0bffc17 	ldw	r2,-16(fp)
    4a5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4a60:	e0bffe17 	ldw	r2,-8(fp)
    4a64:	00bfc716 	blt	zero,r2,4984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004984>
    4a68:	00000106 	br	4a70 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    4a6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a70:	0005303a 	rdctl	r2,status
    4a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a78:	e0fffb17 	ldw	r3,-20(fp)
    4a7c:	00bfff84 	movi	r2,-2
    4a80:	1884703a 	and	r2,r3,r2
    4a84:	1001703a 	wrctl	status,r2
  
  return context;
    4a88:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4a8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4a90:	e0bffc17 	ldw	r2,-16(fp)
    4a94:	10800817 	ldw	r2,32(r2)
    4a98:	10c00094 	ori	r3,r2,2
    4a9c:	e0bffc17 	ldw	r2,-16(fp)
    4aa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4aa4:	e0bffc17 	ldw	r2,-16(fp)
    4aa8:	10800017 	ldw	r2,0(r2)
    4aac:	10800104 	addi	r2,r2,4
    4ab0:	1007883a 	mov	r3,r2
    4ab4:	e0bffc17 	ldw	r2,-16(fp)
    4ab8:	10800817 	ldw	r2,32(r2)
    4abc:	18800035 	stwio	r2,0(r3)
    4ac0:	e0bffa17 	ldw	r2,-24(fp)
    4ac4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ac8:	e0bff817 	ldw	r2,-32(fp)
    4acc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4ad0:	e0bffe17 	ldw	r2,-8(fp)
    4ad4:	0080100e 	bge	zero,r2,4b18 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4ad8:	e0bfff17 	ldw	r2,-4(fp)
    4adc:	1090000c 	andi	r2,r2,16384
    4ae0:	1000101e 	bne	r2,zero,4b24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4ae4:	0001883a 	nop
    4ae8:	e0bffc17 	ldw	r2,-16(fp)
    4aec:	10c00d17 	ldw	r3,52(r2)
    4af0:	e0bff517 	ldw	r2,-44(fp)
    4af4:	1880051e 	bne	r3,r2,4b0c <altera_avalon_jtag_uart_write+0x1b8>
    4af8:	e0bffc17 	ldw	r2,-16(fp)
    4afc:	10c00917 	ldw	r3,36(r2)
    4b00:	e0bffc17 	ldw	r2,-16(fp)
    4b04:	10800117 	ldw	r2,4(r2)
    4b08:	18bff736 	bltu	r3,r2,4ae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ae8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4b0c:	e0bffc17 	ldw	r2,-16(fp)
    4b10:	10800917 	ldw	r2,36(r2)
    4b14:	1000051e 	bne	r2,zero,4b2c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    4b18:	e0bffe17 	ldw	r2,-8(fp)
    4b1c:	00bfd016 	blt	zero,r2,4a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004a60>
    4b20:	00000306 	br	4b30 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4b24:	0001883a 	nop
    4b28:	00000106 	br	4b30 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    4b2c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4b30:	e0fffd17 	ldw	r3,-12(fp)
    4b34:	e0bff717 	ldw	r2,-36(fp)
    4b38:	18800426 	beq	r3,r2,4b4c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    4b3c:	e0fffd17 	ldw	r3,-12(fp)
    4b40:	e0bff717 	ldw	r2,-36(fp)
    4b44:	1885c83a 	sub	r2,r3,r2
    4b48:	00000606 	br	4b64 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    4b4c:	e0bfff17 	ldw	r2,-4(fp)
    4b50:	1090000c 	andi	r2,r2,16384
    4b54:	10000226 	beq	r2,zero,4b60 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4b58:	00bffd44 	movi	r2,-11
    4b5c:	00000106 	br	4b64 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4b60:	00bffec4 	movi	r2,-5
}
    4b64:	e037883a 	mov	sp,fp
    4b68:	dfc00117 	ldw	ra,4(sp)
    4b6c:	df000017 	ldw	fp,0(sp)
    4b70:	dec00204 	addi	sp,sp,8
    4b74:	f800283a 	ret

00004b78 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4b78:	defffa04 	addi	sp,sp,-24
    4b7c:	dfc00515 	stw	ra,20(sp)
    4b80:	df000415 	stw	fp,16(sp)
    4b84:	df000404 	addi	fp,sp,16
    4b88:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4b8c:	0007883a 	mov	r3,zero
    4b90:	e0bfff17 	ldw	r2,-4(fp)
    4b94:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4b98:	e0bfff17 	ldw	r2,-4(fp)
    4b9c:	10800104 	addi	r2,r2,4
    4ba0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ba4:	0005303a 	rdctl	r2,status
    4ba8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4bac:	e0fffd17 	ldw	r3,-12(fp)
    4bb0:	00bfff84 	movi	r2,-2
    4bb4:	1884703a 	and	r2,r3,r2
    4bb8:	1001703a 	wrctl	status,r2
  
  return context;
    4bbc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4bc0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    4bc4:	00056980 	call	5698 <alt_tick>
    4bc8:	e0bffc17 	ldw	r2,-16(fp)
    4bcc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4bd0:	e0bffe17 	ldw	r2,-8(fp)
    4bd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4bd8:	0001883a 	nop
    4bdc:	e037883a 	mov	sp,fp
    4be0:	dfc00117 	ldw	ra,4(sp)
    4be4:	df000017 	ldw	fp,0(sp)
    4be8:	dec00204 	addi	sp,sp,8
    4bec:	f800283a 	ret

00004bf0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4bf0:	defff804 	addi	sp,sp,-32
    4bf4:	dfc00715 	stw	ra,28(sp)
    4bf8:	df000615 	stw	fp,24(sp)
    4bfc:	df000604 	addi	fp,sp,24
    4c00:	e13ffc15 	stw	r4,-16(fp)
    4c04:	e17ffd15 	stw	r5,-12(fp)
    4c08:	e1bffe15 	stw	r6,-8(fp)
    4c0c:	e1ffff15 	stw	r7,-4(fp)
    4c10:	e0bfff17 	ldw	r2,-4(fp)
    4c14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4c18:	d0a6f017 	ldw	r2,-25664(gp)
    4c1c:	1000021e 	bne	r2,zero,4c28 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    4c20:	e0bffb17 	ldw	r2,-20(fp)
    4c24:	d0a6f015 	stw	r2,-25664(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4c28:	e0bffc17 	ldw	r2,-16(fp)
    4c2c:	10800104 	addi	r2,r2,4
    4c30:	00c001c4 	movi	r3,7
    4c34:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4c38:	d8000015 	stw	zero,0(sp)
    4c3c:	e1fffc17 	ldw	r7,-16(fp)
    4c40:	01800034 	movhi	r6,0
    4c44:	3192de04 	addi	r6,r6,19320
    4c48:	e17ffe17 	ldw	r5,-8(fp)
    4c4c:	e13ffd17 	ldw	r4,-12(fp)
    4c50:	0004f780 	call	4f78 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4c54:	0001883a 	nop
    4c58:	e037883a 	mov	sp,fp
    4c5c:	dfc00117 	ldw	ra,4(sp)
    4c60:	df000017 	ldw	fp,0(sp)
    4c64:	dec00204 	addi	sp,sp,8
    4c68:	f800283a 	ret

00004c6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4c6c:	defff504 	addi	sp,sp,-44
    4c70:	df000a15 	stw	fp,40(sp)
    4c74:	df000a04 	addi	fp,sp,40
    4c78:	e13ffc15 	stw	r4,-16(fp)
    4c7c:	e17ffd15 	stw	r5,-12(fp)
    4c80:	e1bffe15 	stw	r6,-8(fp)
    4c84:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4c88:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4c8c:	d0a6f017 	ldw	r2,-25664(gp)
  
  if (alt_ticks_per_second ())
    4c90:	10003c26 	beq	r2,zero,4d84 <alt_alarm_start+0x118>
  {
    if (alarm)
    4c94:	e0bffc17 	ldw	r2,-16(fp)
    4c98:	10003826 	beq	r2,zero,4d7c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    4c9c:	e0bffc17 	ldw	r2,-16(fp)
    4ca0:	e0fffe17 	ldw	r3,-8(fp)
    4ca4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4ca8:	e0bffc17 	ldw	r2,-16(fp)
    4cac:	e0ffff17 	ldw	r3,-4(fp)
    4cb0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cb4:	0005303a 	rdctl	r2,status
    4cb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cbc:	e0fff917 	ldw	r3,-28(fp)
    4cc0:	00bfff84 	movi	r2,-2
    4cc4:	1884703a 	and	r2,r3,r2
    4cc8:	1001703a 	wrctl	status,r2
  
  return context;
    4ccc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4cd0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4cd4:	d0a6f117 	ldw	r2,-25660(gp)
      
      current_nticks = alt_nticks();
    4cd8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4cdc:	e0fffd17 	ldw	r3,-12(fp)
    4ce0:	e0bff617 	ldw	r2,-40(fp)
    4ce4:	1885883a 	add	r2,r3,r2
    4ce8:	10c00044 	addi	r3,r2,1
    4cec:	e0bffc17 	ldw	r2,-16(fp)
    4cf0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    4cf4:	e0bffc17 	ldw	r2,-16(fp)
    4cf8:	10c00217 	ldw	r3,8(r2)
    4cfc:	e0bff617 	ldw	r2,-40(fp)
    4d00:	1880042e 	bgeu	r3,r2,4d14 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    4d04:	e0bffc17 	ldw	r2,-16(fp)
    4d08:	00c00044 	movi	r3,1
    4d0c:	10c00405 	stb	r3,16(r2)
    4d10:	00000206 	br	4d1c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    4d14:	e0bffc17 	ldw	r2,-16(fp)
    4d18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    4d1c:	e0bffc17 	ldw	r2,-16(fp)
    4d20:	d0e00c04 	addi	r3,gp,-32720
    4d24:	e0fffa15 	stw	r3,-24(fp)
    4d28:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4d2c:	e0bffb17 	ldw	r2,-20(fp)
    4d30:	e0fffa17 	ldw	r3,-24(fp)
    4d34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4d38:	e0bffa17 	ldw	r2,-24(fp)
    4d3c:	10c00017 	ldw	r3,0(r2)
    4d40:	e0bffb17 	ldw	r2,-20(fp)
    4d44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4d48:	e0bffa17 	ldw	r2,-24(fp)
    4d4c:	10800017 	ldw	r2,0(r2)
    4d50:	e0fffb17 	ldw	r3,-20(fp)
    4d54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4d58:	e0bffa17 	ldw	r2,-24(fp)
    4d5c:	e0fffb17 	ldw	r3,-20(fp)
    4d60:	10c00015 	stw	r3,0(r2)
    4d64:	e0bff817 	ldw	r2,-32(fp)
    4d68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d6c:	e0bff717 	ldw	r2,-36(fp)
    4d70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    4d74:	0005883a 	mov	r2,zero
    4d78:	00000306 	br	4d88 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    4d7c:	00bffa84 	movi	r2,-22
    4d80:	00000106 	br	4d88 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    4d84:	00bfde84 	movi	r2,-134
  }
}
    4d88:	e037883a 	mov	sp,fp
    4d8c:	df000017 	ldw	fp,0(sp)
    4d90:	dec00104 	addi	sp,sp,4
    4d94:	f800283a 	ret

00004d98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4d98:	deffff04 	addi	sp,sp,-4
    4d9c:	df000015 	stw	fp,0(sp)
    4da0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4da4:	0001883a 	nop
    4da8:	e037883a 	mov	sp,fp
    4dac:	df000017 	ldw	fp,0(sp)
    4db0:	dec00104 	addi	sp,sp,4
    4db4:	f800283a 	ret

00004db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4db8:	defffe04 	addi	sp,sp,-8
    4dbc:	dfc00115 	stw	ra,4(sp)
    4dc0:	df000015 	stw	fp,0(sp)
    4dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4dc8:	d0a00917 	ldw	r2,-32732(gp)
    4dcc:	10000326 	beq	r2,zero,4ddc <alt_get_errno+0x24>
    4dd0:	d0a00917 	ldw	r2,-32732(gp)
    4dd4:	103ee83a 	callr	r2
    4dd8:	00000106 	br	4de0 <alt_get_errno+0x28>
    4ddc:	d0a6eb04 	addi	r2,gp,-25684
}
    4de0:	e037883a 	mov	sp,fp
    4de4:	dfc00117 	ldw	ra,4(sp)
    4de8:	df000017 	ldw	fp,0(sp)
    4dec:	dec00204 	addi	sp,sp,8
    4df0:	f800283a 	ret

00004df4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    4df4:	defffa04 	addi	sp,sp,-24
    4df8:	dfc00515 	stw	ra,20(sp)
    4dfc:	df000415 	stw	fp,16(sp)
    4e00:	df000404 	addi	fp,sp,16
    4e04:	e13ffe15 	stw	r4,-8(fp)
    4e08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4e0c:	e0bffe17 	ldw	r2,-8(fp)
    4e10:	10000326 	beq	r2,zero,4e20 <alt_dev_llist_insert+0x2c>
    4e14:	e0bffe17 	ldw	r2,-8(fp)
    4e18:	10800217 	ldw	r2,8(r2)
    4e1c:	1000061e 	bne	r2,zero,4e38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    4e20:	0004db80 	call	4db8 <alt_get_errno>
    4e24:	1007883a 	mov	r3,r2
    4e28:	00800584 	movi	r2,22
    4e2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4e30:	00bffa84 	movi	r2,-22
    4e34:	00001306 	br	4e84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4e38:	e0bffe17 	ldw	r2,-8(fp)
    4e3c:	e0ffff17 	ldw	r3,-4(fp)
    4e40:	e0fffc15 	stw	r3,-16(fp)
    4e44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4e48:	e0bffd17 	ldw	r2,-12(fp)
    4e4c:	e0fffc17 	ldw	r3,-16(fp)
    4e50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4e54:	e0bffc17 	ldw	r2,-16(fp)
    4e58:	10c00017 	ldw	r3,0(r2)
    4e5c:	e0bffd17 	ldw	r2,-12(fp)
    4e60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4e64:	e0bffc17 	ldw	r2,-16(fp)
    4e68:	10800017 	ldw	r2,0(r2)
    4e6c:	e0fffd17 	ldw	r3,-12(fp)
    4e70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4e74:	e0bffc17 	ldw	r2,-16(fp)
    4e78:	e0fffd17 	ldw	r3,-12(fp)
    4e7c:	10c00015 	stw	r3,0(r2)

  return 0;  
    4e80:	0005883a 	mov	r2,zero
}
    4e84:	e037883a 	mov	sp,fp
    4e88:	dfc00117 	ldw	ra,4(sp)
    4e8c:	df000017 	ldw	fp,0(sp)
    4e90:	dec00204 	addi	sp,sp,8
    4e94:	f800283a 	ret

00004e98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4e98:	defffd04 	addi	sp,sp,-12
    4e9c:	dfc00215 	stw	ra,8(sp)
    4ea0:	df000115 	stw	fp,4(sp)
    4ea4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4ea8:	00800034 	movhi	r2,0
    4eac:	10979304 	addi	r2,r2,24140
    4eb0:	e0bfff15 	stw	r2,-4(fp)
    4eb4:	00000606 	br	4ed0 <_do_ctors+0x38>
        (*ctor) (); 
    4eb8:	e0bfff17 	ldw	r2,-4(fp)
    4ebc:	10800017 	ldw	r2,0(r2)
    4ec0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4ec4:	e0bfff17 	ldw	r2,-4(fp)
    4ec8:	10bfff04 	addi	r2,r2,-4
    4ecc:	e0bfff15 	stw	r2,-4(fp)
    4ed0:	e0ffff17 	ldw	r3,-4(fp)
    4ed4:	00800034 	movhi	r2,0
    4ed8:	10979404 	addi	r2,r2,24144
    4edc:	18bff62e 	bgeu	r3,r2,4eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004eb8>
        (*ctor) (); 
}
    4ee0:	0001883a 	nop
    4ee4:	e037883a 	mov	sp,fp
    4ee8:	dfc00117 	ldw	ra,4(sp)
    4eec:	df000017 	ldw	fp,0(sp)
    4ef0:	dec00204 	addi	sp,sp,8
    4ef4:	f800283a 	ret

00004ef8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4ef8:	defffd04 	addi	sp,sp,-12
    4efc:	dfc00215 	stw	ra,8(sp)
    4f00:	df000115 	stw	fp,4(sp)
    4f04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4f08:	00800034 	movhi	r2,0
    4f0c:	10979304 	addi	r2,r2,24140
    4f10:	e0bfff15 	stw	r2,-4(fp)
    4f14:	00000606 	br	4f30 <_do_dtors+0x38>
        (*dtor) (); 
    4f18:	e0bfff17 	ldw	r2,-4(fp)
    4f1c:	10800017 	ldw	r2,0(r2)
    4f20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4f24:	e0bfff17 	ldw	r2,-4(fp)
    4f28:	10bfff04 	addi	r2,r2,-4
    4f2c:	e0bfff15 	stw	r2,-4(fp)
    4f30:	e0ffff17 	ldw	r3,-4(fp)
    4f34:	00800034 	movhi	r2,0
    4f38:	10979404 	addi	r2,r2,24144
    4f3c:	18bff62e 	bgeu	r3,r2,4f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f18>
        (*dtor) (); 
}
    4f40:	0001883a 	nop
    4f44:	e037883a 	mov	sp,fp
    4f48:	dfc00117 	ldw	ra,4(sp)
    4f4c:	df000017 	ldw	fp,0(sp)
    4f50:	dec00204 	addi	sp,sp,8
    4f54:	f800283a 	ret

00004f58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4f58:	deffff04 	addi	sp,sp,-4
    4f5c:	df000015 	stw	fp,0(sp)
    4f60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4f64:	0001883a 	nop
    4f68:	e037883a 	mov	sp,fp
    4f6c:	df000017 	ldw	fp,0(sp)
    4f70:	dec00104 	addi	sp,sp,4
    4f74:	f800283a 	ret

00004f78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4f78:	defff904 	addi	sp,sp,-28
    4f7c:	dfc00615 	stw	ra,24(sp)
    4f80:	df000515 	stw	fp,20(sp)
    4f84:	df000504 	addi	fp,sp,20
    4f88:	e13ffc15 	stw	r4,-16(fp)
    4f8c:	e17ffd15 	stw	r5,-12(fp)
    4f90:	e1bffe15 	stw	r6,-8(fp)
    4f94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4f98:	e0800217 	ldw	r2,8(fp)
    4f9c:	d8800015 	stw	r2,0(sp)
    4fa0:	e1ffff17 	ldw	r7,-4(fp)
    4fa4:	e1bffe17 	ldw	r6,-8(fp)
    4fa8:	e17ffd17 	ldw	r5,-12(fp)
    4fac:	e13ffc17 	ldw	r4,-16(fp)
    4fb0:	00051280 	call	5128 <alt_iic_isr_register>
}  
    4fb4:	e037883a 	mov	sp,fp
    4fb8:	dfc00117 	ldw	ra,4(sp)
    4fbc:	df000017 	ldw	fp,0(sp)
    4fc0:	dec00204 	addi	sp,sp,8
    4fc4:	f800283a 	ret

00004fc8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4fc8:	defff904 	addi	sp,sp,-28
    4fcc:	df000615 	stw	fp,24(sp)
    4fd0:	df000604 	addi	fp,sp,24
    4fd4:	e13ffe15 	stw	r4,-8(fp)
    4fd8:	e17fff15 	stw	r5,-4(fp)
    4fdc:	e0bfff17 	ldw	r2,-4(fp)
    4fe0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4fe4:	0005303a 	rdctl	r2,status
    4fe8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4fec:	e0fffb17 	ldw	r3,-20(fp)
    4ff0:	00bfff84 	movi	r2,-2
    4ff4:	1884703a 	and	r2,r3,r2
    4ff8:	1001703a 	wrctl	status,r2
  
  return context;
    4ffc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5000:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    5004:	00c00044 	movi	r3,1
    5008:	e0bffa17 	ldw	r2,-24(fp)
    500c:	1884983a 	sll	r2,r3,r2
    5010:	1007883a 	mov	r3,r2
    5014:	d0a6ef17 	ldw	r2,-25668(gp)
    5018:	1884b03a 	or	r2,r3,r2
    501c:	d0a6ef15 	stw	r2,-25668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5020:	d0a6ef17 	ldw	r2,-25668(gp)
    5024:	100170fa 	wrctl	ienable,r2
    5028:	e0bffc17 	ldw	r2,-16(fp)
    502c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5030:	e0bffd17 	ldw	r2,-12(fp)
    5034:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5038:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    503c:	0001883a 	nop
}
    5040:	e037883a 	mov	sp,fp
    5044:	df000017 	ldw	fp,0(sp)
    5048:	dec00104 	addi	sp,sp,4
    504c:	f800283a 	ret

00005050 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5050:	defff904 	addi	sp,sp,-28
    5054:	df000615 	stw	fp,24(sp)
    5058:	df000604 	addi	fp,sp,24
    505c:	e13ffe15 	stw	r4,-8(fp)
    5060:	e17fff15 	stw	r5,-4(fp)
    5064:	e0bfff17 	ldw	r2,-4(fp)
    5068:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    506c:	0005303a 	rdctl	r2,status
    5070:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5074:	e0fffb17 	ldw	r3,-20(fp)
    5078:	00bfff84 	movi	r2,-2
    507c:	1884703a 	and	r2,r3,r2
    5080:	1001703a 	wrctl	status,r2
  
  return context;
    5084:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5088:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    508c:	00c00044 	movi	r3,1
    5090:	e0bffa17 	ldw	r2,-24(fp)
    5094:	1884983a 	sll	r2,r3,r2
    5098:	0084303a 	nor	r2,zero,r2
    509c:	1007883a 	mov	r3,r2
    50a0:	d0a6ef17 	ldw	r2,-25668(gp)
    50a4:	1884703a 	and	r2,r3,r2
    50a8:	d0a6ef15 	stw	r2,-25668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    50ac:	d0a6ef17 	ldw	r2,-25668(gp)
    50b0:	100170fa 	wrctl	ienable,r2
    50b4:	e0bffc17 	ldw	r2,-16(fp)
    50b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50bc:	e0bffd17 	ldw	r2,-12(fp)
    50c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    50c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    50c8:	0001883a 	nop
}
    50cc:	e037883a 	mov	sp,fp
    50d0:	df000017 	ldw	fp,0(sp)
    50d4:	dec00104 	addi	sp,sp,4
    50d8:	f800283a 	ret

000050dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    50dc:	defffc04 	addi	sp,sp,-16
    50e0:	df000315 	stw	fp,12(sp)
    50e4:	df000304 	addi	fp,sp,12
    50e8:	e13ffe15 	stw	r4,-8(fp)
    50ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    50f0:	000530fa 	rdctl	r2,ienable
    50f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    50f8:	00c00044 	movi	r3,1
    50fc:	e0bfff17 	ldw	r2,-4(fp)
    5100:	1884983a 	sll	r2,r3,r2
    5104:	1007883a 	mov	r3,r2
    5108:	e0bffd17 	ldw	r2,-12(fp)
    510c:	1884703a 	and	r2,r3,r2
    5110:	1004c03a 	cmpne	r2,r2,zero
    5114:	10803fcc 	andi	r2,r2,255
}
    5118:	e037883a 	mov	sp,fp
    511c:	df000017 	ldw	fp,0(sp)
    5120:	dec00104 	addi	sp,sp,4
    5124:	f800283a 	ret

00005128 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5128:	defff504 	addi	sp,sp,-44
    512c:	dfc00a15 	stw	ra,40(sp)
    5130:	df000915 	stw	fp,36(sp)
    5134:	df000904 	addi	fp,sp,36
    5138:	e13ffc15 	stw	r4,-16(fp)
    513c:	e17ffd15 	stw	r5,-12(fp)
    5140:	e1bffe15 	stw	r6,-8(fp)
    5144:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    5148:	00bffa84 	movi	r2,-22
    514c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5150:	e0bffd17 	ldw	r2,-12(fp)
    5154:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5158:	e0bff817 	ldw	r2,-32(fp)
    515c:	10800808 	cmpgei	r2,r2,32
    5160:	1000271e 	bne	r2,zero,5200 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5164:	0005303a 	rdctl	r2,status
    5168:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    516c:	e0fffb17 	ldw	r3,-20(fp)
    5170:	00bfff84 	movi	r2,-2
    5174:	1884703a 	and	r2,r3,r2
    5178:	1001703a 	wrctl	status,r2
  
  return context;
    517c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5180:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    5184:	00800074 	movhi	r2,1
    5188:	10a59004 	addi	r2,r2,-27072
    518c:	e0fff817 	ldw	r3,-32(fp)
    5190:	180690fa 	slli	r3,r3,3
    5194:	10c5883a 	add	r2,r2,r3
    5198:	e0fffe17 	ldw	r3,-8(fp)
    519c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    51a0:	00800074 	movhi	r2,1
    51a4:	10a59004 	addi	r2,r2,-27072
    51a8:	e0fff817 	ldw	r3,-32(fp)
    51ac:	180690fa 	slli	r3,r3,3
    51b0:	10c5883a 	add	r2,r2,r3
    51b4:	10800104 	addi	r2,r2,4
    51b8:	e0ffff17 	ldw	r3,-4(fp)
    51bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    51c0:	e0bffe17 	ldw	r2,-8(fp)
    51c4:	10000526 	beq	r2,zero,51dc <alt_iic_isr_register+0xb4>
    51c8:	e0bff817 	ldw	r2,-32(fp)
    51cc:	100b883a 	mov	r5,r2
    51d0:	e13ffc17 	ldw	r4,-16(fp)
    51d4:	0004fc80 	call	4fc8 <alt_ic_irq_enable>
    51d8:	00000406 	br	51ec <alt_iic_isr_register+0xc4>
    51dc:	e0bff817 	ldw	r2,-32(fp)
    51e0:	100b883a 	mov	r5,r2
    51e4:	e13ffc17 	ldw	r4,-16(fp)
    51e8:	00050500 	call	5050 <alt_ic_irq_disable>
    51ec:	e0bff715 	stw	r2,-36(fp)
    51f0:	e0bffa17 	ldw	r2,-24(fp)
    51f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    51f8:	e0bff917 	ldw	r2,-28(fp)
    51fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5200:	e0bff717 	ldw	r2,-36(fp)
}
    5204:	e037883a 	mov	sp,fp
    5208:	dfc00117 	ldw	ra,4(sp)
    520c:	df000017 	ldw	fp,0(sp)
    5210:	dec00204 	addi	sp,sp,8
    5214:	f800283a 	ret

00005218 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5218:	defff804 	addi	sp,sp,-32
    521c:	dfc00715 	stw	ra,28(sp)
    5220:	df000615 	stw	fp,24(sp)
    5224:	dc000515 	stw	r16,20(sp)
    5228:	df000604 	addi	fp,sp,24
    522c:	e13ffb15 	stw	r4,-20(fp)
    5230:	e17ffc15 	stw	r5,-16(fp)
    5234:	e1bffd15 	stw	r6,-12(fp)
    5238:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    523c:	e1bffe17 	ldw	r6,-8(fp)
    5240:	e17ffd17 	ldw	r5,-12(fp)
    5244:	e13ffc17 	ldw	r4,-16(fp)
    5248:	00054a00 	call	54a0 <open>
    524c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    5250:	e0bffa17 	ldw	r2,-24(fp)
    5254:	10002216 	blt	r2,zero,52e0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    5258:	04000034 	movhi	r16,0
    525c:	8419dc04 	addi	r16,r16,26480
    5260:	e0bffa17 	ldw	r2,-24(fp)
    5264:	01400304 	movi	r5,12
    5268:	1009883a 	mov	r4,r2
    526c:	00030840 	call	3084 <__mulsi3>
    5270:	8085883a 	add	r2,r16,r2
    5274:	10c00017 	ldw	r3,0(r2)
    5278:	e0bffb17 	ldw	r2,-20(fp)
    527c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5280:	04000034 	movhi	r16,0
    5284:	8419dc04 	addi	r16,r16,26480
    5288:	e0bffa17 	ldw	r2,-24(fp)
    528c:	01400304 	movi	r5,12
    5290:	1009883a 	mov	r4,r2
    5294:	00030840 	call	3084 <__mulsi3>
    5298:	8085883a 	add	r2,r16,r2
    529c:	10800104 	addi	r2,r2,4
    52a0:	10c00017 	ldw	r3,0(r2)
    52a4:	e0bffb17 	ldw	r2,-20(fp)
    52a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    52ac:	04000034 	movhi	r16,0
    52b0:	8419dc04 	addi	r16,r16,26480
    52b4:	e0bffa17 	ldw	r2,-24(fp)
    52b8:	01400304 	movi	r5,12
    52bc:	1009883a 	mov	r4,r2
    52c0:	00030840 	call	3084 <__mulsi3>
    52c4:	8085883a 	add	r2,r16,r2
    52c8:	10800204 	addi	r2,r2,8
    52cc:	10c00017 	ldw	r3,0(r2)
    52d0:	e0bffb17 	ldw	r2,-20(fp)
    52d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    52d8:	e13ffa17 	ldw	r4,-24(fp)
    52dc:	00037d00 	call	37d0 <alt_release_fd>
  }
} 
    52e0:	0001883a 	nop
    52e4:	e6ffff04 	addi	sp,fp,-4
    52e8:	dfc00217 	ldw	ra,8(sp)
    52ec:	df000117 	ldw	fp,4(sp)
    52f0:	dc000017 	ldw	r16,0(sp)
    52f4:	dec00304 	addi	sp,sp,12
    52f8:	f800283a 	ret

000052fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    52fc:	defffb04 	addi	sp,sp,-20
    5300:	dfc00415 	stw	ra,16(sp)
    5304:	df000315 	stw	fp,12(sp)
    5308:	df000304 	addi	fp,sp,12
    530c:	e13ffd15 	stw	r4,-12(fp)
    5310:	e17ffe15 	stw	r5,-8(fp)
    5314:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5318:	01c07fc4 	movi	r7,511
    531c:	01800044 	movi	r6,1
    5320:	e17ffd17 	ldw	r5,-12(fp)
    5324:	01000034 	movhi	r4,0
    5328:	2119df04 	addi	r4,r4,26492
    532c:	00052180 	call	5218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5330:	01c07fc4 	movi	r7,511
    5334:	000d883a 	mov	r6,zero
    5338:	e17ffe17 	ldw	r5,-8(fp)
    533c:	01000034 	movhi	r4,0
    5340:	2119dc04 	addi	r4,r4,26480
    5344:	00052180 	call	5218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5348:	01c07fc4 	movi	r7,511
    534c:	01800044 	movi	r6,1
    5350:	e17fff17 	ldw	r5,-4(fp)
    5354:	01000034 	movhi	r4,0
    5358:	2119e204 	addi	r4,r4,26504
    535c:	00052180 	call	5218 <alt_open_fd>
}  
    5360:	0001883a 	nop
    5364:	e037883a 	mov	sp,fp
    5368:	dfc00117 	ldw	ra,4(sp)
    536c:	df000017 	ldw	fp,0(sp)
    5370:	dec00204 	addi	sp,sp,8
    5374:	f800283a 	ret

00005378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5378:	defffe04 	addi	sp,sp,-8
    537c:	dfc00115 	stw	ra,4(sp)
    5380:	df000015 	stw	fp,0(sp)
    5384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5388:	d0a00917 	ldw	r2,-32732(gp)
    538c:	10000326 	beq	r2,zero,539c <alt_get_errno+0x24>
    5390:	d0a00917 	ldw	r2,-32732(gp)
    5394:	103ee83a 	callr	r2
    5398:	00000106 	br	53a0 <alt_get_errno+0x28>
    539c:	d0a6eb04 	addi	r2,gp,-25684
}
    53a0:	e037883a 	mov	sp,fp
    53a4:	dfc00117 	ldw	ra,4(sp)
    53a8:	df000017 	ldw	fp,0(sp)
    53ac:	dec00204 	addi	sp,sp,8
    53b0:	f800283a 	ret

000053b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    53b4:	defffb04 	addi	sp,sp,-20
    53b8:	dfc00415 	stw	ra,16(sp)
    53bc:	df000315 	stw	fp,12(sp)
    53c0:	dc000215 	stw	r16,8(sp)
    53c4:	df000304 	addi	fp,sp,12
    53c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    53cc:	e0bffe17 	ldw	r2,-8(fp)
    53d0:	10800217 	ldw	r2,8(r2)
    53d4:	10d00034 	orhi	r3,r2,16384
    53d8:	e0bffe17 	ldw	r2,-8(fp)
    53dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    53e0:	e03ffd15 	stw	zero,-12(fp)
    53e4:	00002306 	br	5474 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    53e8:	04000034 	movhi	r16,0
    53ec:	8419dc04 	addi	r16,r16,26480
    53f0:	e0bffd17 	ldw	r2,-12(fp)
    53f4:	01400304 	movi	r5,12
    53f8:	1009883a 	mov	r4,r2
    53fc:	00030840 	call	3084 <__mulsi3>
    5400:	8085883a 	add	r2,r16,r2
    5404:	10c00017 	ldw	r3,0(r2)
    5408:	e0bffe17 	ldw	r2,-8(fp)
    540c:	10800017 	ldw	r2,0(r2)
    5410:	1880151e 	bne	r3,r2,5468 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5414:	04000034 	movhi	r16,0
    5418:	8419dc04 	addi	r16,r16,26480
    541c:	e0bffd17 	ldw	r2,-12(fp)
    5420:	01400304 	movi	r5,12
    5424:	1009883a 	mov	r4,r2
    5428:	00030840 	call	3084 <__mulsi3>
    542c:	8085883a 	add	r2,r16,r2
    5430:	10800204 	addi	r2,r2,8
    5434:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5438:	10000b0e 	bge	r2,zero,5468 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    543c:	01400304 	movi	r5,12
    5440:	e13ffd17 	ldw	r4,-12(fp)
    5444:	00030840 	call	3084 <__mulsi3>
    5448:	1007883a 	mov	r3,r2
    544c:	00800034 	movhi	r2,0
    5450:	1099dc04 	addi	r2,r2,26480
    5454:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5458:	e0bffe17 	ldw	r2,-8(fp)
    545c:	18800226 	beq	r3,r2,5468 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5460:	00bffcc4 	movi	r2,-13
    5464:	00000806 	br	5488 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5468:	e0bffd17 	ldw	r2,-12(fp)
    546c:	10800044 	addi	r2,r2,1
    5470:	e0bffd15 	stw	r2,-12(fp)
    5474:	d0a00817 	ldw	r2,-32736(gp)
    5478:	1007883a 	mov	r3,r2
    547c:	e0bffd17 	ldw	r2,-12(fp)
    5480:	18bfd92e 	bgeu	r3,r2,53e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5484:	0005883a 	mov	r2,zero
}
    5488:	e6ffff04 	addi	sp,fp,-4
    548c:	dfc00217 	ldw	ra,8(sp)
    5490:	df000117 	ldw	fp,4(sp)
    5494:	dc000017 	ldw	r16,0(sp)
    5498:	dec00304 	addi	sp,sp,12
    549c:	f800283a 	ret

000054a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    54a0:	defff604 	addi	sp,sp,-40
    54a4:	dfc00915 	stw	ra,36(sp)
    54a8:	df000815 	stw	fp,32(sp)
    54ac:	df000804 	addi	fp,sp,32
    54b0:	e13ffd15 	stw	r4,-12(fp)
    54b4:	e17ffe15 	stw	r5,-8(fp)
    54b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    54bc:	00bfffc4 	movi	r2,-1
    54c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    54c4:	00bffb44 	movi	r2,-19
    54c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    54cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    54d0:	d1600604 	addi	r5,gp,-32744
    54d4:	e13ffd17 	ldw	r4,-12(fp)
    54d8:	00057c40 	call	57c4 <alt_find_dev>
    54dc:	e0bff815 	stw	r2,-32(fp)
    54e0:	e0bff817 	ldw	r2,-32(fp)
    54e4:	1000051e 	bne	r2,zero,54fc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    54e8:	e13ffd17 	ldw	r4,-12(fp)
    54ec:	00058540 	call	5854 <alt_find_file>
    54f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    54f4:	00800044 	movi	r2,1
    54f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    54fc:	e0bff817 	ldw	r2,-32(fp)
    5500:	10002b26 	beq	r2,zero,55b0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5504:	e13ff817 	ldw	r4,-32(fp)
    5508:	000595c0 	call	595c <alt_get_fd>
    550c:	e0bff915 	stw	r2,-28(fp)
    5510:	e0bff917 	ldw	r2,-28(fp)
    5514:	1000030e 	bge	r2,zero,5524 <open+0x84>
    {
      status = index;
    5518:	e0bff917 	ldw	r2,-28(fp)
    551c:	e0bffa15 	stw	r2,-24(fp)
    5520:	00002506 	br	55b8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    5524:	01400304 	movi	r5,12
    5528:	e13ff917 	ldw	r4,-28(fp)
    552c:	00030840 	call	3084 <__mulsi3>
    5530:	1007883a 	mov	r3,r2
    5534:	00800034 	movhi	r2,0
    5538:	1099dc04 	addi	r2,r2,26480
    553c:	1885883a 	add	r2,r3,r2
    5540:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5544:	e0fffe17 	ldw	r3,-8(fp)
    5548:	00900034 	movhi	r2,16384
    554c:	10bfffc4 	addi	r2,r2,-1
    5550:	1886703a 	and	r3,r3,r2
    5554:	e0bffc17 	ldw	r2,-16(fp)
    5558:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    555c:	e0bffb17 	ldw	r2,-20(fp)
    5560:	1000051e 	bne	r2,zero,5578 <open+0xd8>
    5564:	e13ffc17 	ldw	r4,-16(fp)
    5568:	00053b40 	call	53b4 <alt_file_locked>
    556c:	e0bffa15 	stw	r2,-24(fp)
    5570:	e0bffa17 	ldw	r2,-24(fp)
    5574:	10001016 	blt	r2,zero,55b8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5578:	e0bff817 	ldw	r2,-32(fp)
    557c:	10800317 	ldw	r2,12(r2)
    5580:	10000826 	beq	r2,zero,55a4 <open+0x104>
    5584:	e0bff817 	ldw	r2,-32(fp)
    5588:	10800317 	ldw	r2,12(r2)
    558c:	e1ffff17 	ldw	r7,-4(fp)
    5590:	e1bffe17 	ldw	r6,-8(fp)
    5594:	e17ffd17 	ldw	r5,-12(fp)
    5598:	e13ffc17 	ldw	r4,-16(fp)
    559c:	103ee83a 	callr	r2
    55a0:	00000106 	br	55a8 <open+0x108>
    55a4:	0005883a 	mov	r2,zero
    55a8:	e0bffa15 	stw	r2,-24(fp)
    55ac:	00000206 	br	55b8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    55b0:	00bffb44 	movi	r2,-19
    55b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    55b8:	e0bffa17 	ldw	r2,-24(fp)
    55bc:	1000090e 	bge	r2,zero,55e4 <open+0x144>
  {
    alt_release_fd (index);  
    55c0:	e13ff917 	ldw	r4,-28(fp)
    55c4:	00037d00 	call	37d0 <alt_release_fd>
    ALT_ERRNO = -status;
    55c8:	00053780 	call	5378 <alt_get_errno>
    55cc:	1007883a 	mov	r3,r2
    55d0:	e0bffa17 	ldw	r2,-24(fp)
    55d4:	0085c83a 	sub	r2,zero,r2
    55d8:	18800015 	stw	r2,0(r3)
    return -1;
    55dc:	00bfffc4 	movi	r2,-1
    55e0:	00000106 	br	55e8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    55e4:	e0bff917 	ldw	r2,-28(fp)
}
    55e8:	e037883a 	mov	sp,fp
    55ec:	dfc00117 	ldw	ra,4(sp)
    55f0:	df000017 	ldw	fp,0(sp)
    55f4:	dec00204 	addi	sp,sp,8
    55f8:	f800283a 	ret

000055fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    55fc:	defffa04 	addi	sp,sp,-24
    5600:	df000515 	stw	fp,20(sp)
    5604:	df000504 	addi	fp,sp,20
    5608:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    560c:	0005303a 	rdctl	r2,status
    5610:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5614:	e0fffc17 	ldw	r3,-16(fp)
    5618:	00bfff84 	movi	r2,-2
    561c:	1884703a 	and	r2,r3,r2
    5620:	1001703a 	wrctl	status,r2
  
  return context;
    5624:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    5628:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    562c:	e0bfff17 	ldw	r2,-4(fp)
    5630:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5634:	e0bffd17 	ldw	r2,-12(fp)
    5638:	10800017 	ldw	r2,0(r2)
    563c:	e0fffd17 	ldw	r3,-12(fp)
    5640:	18c00117 	ldw	r3,4(r3)
    5644:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    5648:	e0bffd17 	ldw	r2,-12(fp)
    564c:	10800117 	ldw	r2,4(r2)
    5650:	e0fffd17 	ldw	r3,-12(fp)
    5654:	18c00017 	ldw	r3,0(r3)
    5658:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    565c:	e0bffd17 	ldw	r2,-12(fp)
    5660:	e0fffd17 	ldw	r3,-12(fp)
    5664:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    5668:	e0bffd17 	ldw	r2,-12(fp)
    566c:	e0fffd17 	ldw	r3,-12(fp)
    5670:	10c00015 	stw	r3,0(r2)
    5674:	e0bffb17 	ldw	r2,-20(fp)
    5678:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    567c:	e0bffe17 	ldw	r2,-8(fp)
    5680:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5684:	0001883a 	nop
    5688:	e037883a 	mov	sp,fp
    568c:	df000017 	ldw	fp,0(sp)
    5690:	dec00104 	addi	sp,sp,4
    5694:	f800283a 	ret

00005698 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5698:	defffb04 	addi	sp,sp,-20
    569c:	dfc00415 	stw	ra,16(sp)
    56a0:	df000315 	stw	fp,12(sp)
    56a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    56a8:	d0a00c17 	ldw	r2,-32720(gp)
    56ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    56b0:	d0a6f117 	ldw	r2,-25660(gp)
    56b4:	10800044 	addi	r2,r2,1
    56b8:	d0a6f115 	stw	r2,-25660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    56bc:	00002e06 	br	5778 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    56c0:	e0bffd17 	ldw	r2,-12(fp)
    56c4:	10800017 	ldw	r2,0(r2)
    56c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    56cc:	e0bffd17 	ldw	r2,-12(fp)
    56d0:	10800403 	ldbu	r2,16(r2)
    56d4:	10803fcc 	andi	r2,r2,255
    56d8:	10000426 	beq	r2,zero,56ec <alt_tick+0x54>
    56dc:	d0a6f117 	ldw	r2,-25660(gp)
    56e0:	1000021e 	bne	r2,zero,56ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
    56e4:	e0bffd17 	ldw	r2,-12(fp)
    56e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    56ec:	e0bffd17 	ldw	r2,-12(fp)
    56f0:	10800217 	ldw	r2,8(r2)
    56f4:	d0e6f117 	ldw	r3,-25660(gp)
    56f8:	18801d36 	bltu	r3,r2,5770 <alt_tick+0xd8>
    56fc:	e0bffd17 	ldw	r2,-12(fp)
    5700:	10800403 	ldbu	r2,16(r2)
    5704:	10803fcc 	andi	r2,r2,255
    5708:	1000191e 	bne	r2,zero,5770 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    570c:	e0bffd17 	ldw	r2,-12(fp)
    5710:	10800317 	ldw	r2,12(r2)
    5714:	e0fffd17 	ldw	r3,-12(fp)
    5718:	18c00517 	ldw	r3,20(r3)
    571c:	1809883a 	mov	r4,r3
    5720:	103ee83a 	callr	r2
    5724:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5728:	e0bfff17 	ldw	r2,-4(fp)
    572c:	1000031e 	bne	r2,zero,573c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    5730:	e13ffd17 	ldw	r4,-12(fp)
    5734:	00055fc0 	call	55fc <alt_alarm_stop>
    5738:	00000d06 	br	5770 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    573c:	e0bffd17 	ldw	r2,-12(fp)
    5740:	10c00217 	ldw	r3,8(r2)
    5744:	e0bfff17 	ldw	r2,-4(fp)
    5748:	1887883a 	add	r3,r3,r2
    574c:	e0bffd17 	ldw	r2,-12(fp)
    5750:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5754:	e0bffd17 	ldw	r2,-12(fp)
    5758:	10c00217 	ldw	r3,8(r2)
    575c:	d0a6f117 	ldw	r2,-25660(gp)
    5760:	1880032e 	bgeu	r3,r2,5770 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    5764:	e0bffd17 	ldw	r2,-12(fp)
    5768:	00c00044 	movi	r3,1
    576c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    5770:	e0bffe17 	ldw	r2,-8(fp)
    5774:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5778:	e0fffd17 	ldw	r3,-12(fp)
    577c:	d0a00c04 	addi	r2,gp,-32720
    5780:	18bfcf1e 	bne	r3,r2,56c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5784:	0001883a 	nop
}
    5788:	0001883a 	nop
    578c:	e037883a 	mov	sp,fp
    5790:	dfc00117 	ldw	ra,4(sp)
    5794:	df000017 	ldw	fp,0(sp)
    5798:	dec00204 	addi	sp,sp,8
    579c:	f800283a 	ret

000057a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    57a0:	deffff04 	addi	sp,sp,-4
    57a4:	df000015 	stw	fp,0(sp)
    57a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    57ac:	000170fa 	wrctl	ienable,zero
}
    57b0:	0001883a 	nop
    57b4:	e037883a 	mov	sp,fp
    57b8:	df000017 	ldw	fp,0(sp)
    57bc:	dec00104 	addi	sp,sp,4
    57c0:	f800283a 	ret

000057c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    57c4:	defffa04 	addi	sp,sp,-24
    57c8:	dfc00515 	stw	ra,20(sp)
    57cc:	df000415 	stw	fp,16(sp)
    57d0:	df000404 	addi	fp,sp,16
    57d4:	e13ffe15 	stw	r4,-8(fp)
    57d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    57dc:	e0bfff17 	ldw	r2,-4(fp)
    57e0:	10800017 	ldw	r2,0(r2)
    57e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    57e8:	e13ffe17 	ldw	r4,-8(fp)
    57ec:	00003740 	call	374 <strlen>
    57f0:	10800044 	addi	r2,r2,1
    57f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    57f8:	00000d06 	br	5830 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    57fc:	e0bffc17 	ldw	r2,-16(fp)
    5800:	10800217 	ldw	r2,8(r2)
    5804:	e0fffd17 	ldw	r3,-12(fp)
    5808:	180d883a 	mov	r6,r3
    580c:	e17ffe17 	ldw	r5,-8(fp)
    5810:	1009883a 	mov	r4,r2
    5814:	0005b080 	call	5b08 <memcmp>
    5818:	1000021e 	bne	r2,zero,5824 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    581c:	e0bffc17 	ldw	r2,-16(fp)
    5820:	00000706 	br	5840 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5824:	e0bffc17 	ldw	r2,-16(fp)
    5828:	10800017 	ldw	r2,0(r2)
    582c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5830:	e0fffc17 	ldw	r3,-16(fp)
    5834:	e0bfff17 	ldw	r2,-4(fp)
    5838:	18bff01e 	bne	r3,r2,57fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    583c:	0005883a 	mov	r2,zero
}
    5840:	e037883a 	mov	sp,fp
    5844:	dfc00117 	ldw	ra,4(sp)
    5848:	df000017 	ldw	fp,0(sp)
    584c:	dec00204 	addi	sp,sp,8
    5850:	f800283a 	ret

00005854 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5854:	defffb04 	addi	sp,sp,-20
    5858:	dfc00415 	stw	ra,16(sp)
    585c:	df000315 	stw	fp,12(sp)
    5860:	df000304 	addi	fp,sp,12
    5864:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5868:	d0a00417 	ldw	r2,-32752(gp)
    586c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5870:	00003106 	br	5938 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5874:	e0bffd17 	ldw	r2,-12(fp)
    5878:	10800217 	ldw	r2,8(r2)
    587c:	1009883a 	mov	r4,r2
    5880:	00003740 	call	374 <strlen>
    5884:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5888:	e0bffd17 	ldw	r2,-12(fp)
    588c:	10c00217 	ldw	r3,8(r2)
    5890:	e0bffe17 	ldw	r2,-8(fp)
    5894:	10bfffc4 	addi	r2,r2,-1
    5898:	1885883a 	add	r2,r3,r2
    589c:	10800003 	ldbu	r2,0(r2)
    58a0:	10803fcc 	andi	r2,r2,255
    58a4:	1080201c 	xori	r2,r2,128
    58a8:	10bfe004 	addi	r2,r2,-128
    58ac:	10800bd8 	cmpnei	r2,r2,47
    58b0:	1000031e 	bne	r2,zero,58c0 <alt_find_file+0x6c>
    {
      len -= 1;
    58b4:	e0bffe17 	ldw	r2,-8(fp)
    58b8:	10bfffc4 	addi	r2,r2,-1
    58bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    58c0:	e0bffe17 	ldw	r2,-8(fp)
    58c4:	e0ffff17 	ldw	r3,-4(fp)
    58c8:	1885883a 	add	r2,r3,r2
    58cc:	10800003 	ldbu	r2,0(r2)
    58d0:	10803fcc 	andi	r2,r2,255
    58d4:	1080201c 	xori	r2,r2,128
    58d8:	10bfe004 	addi	r2,r2,-128
    58dc:	10800be0 	cmpeqi	r2,r2,47
    58e0:	1000081e 	bne	r2,zero,5904 <alt_find_file+0xb0>
    58e4:	e0bffe17 	ldw	r2,-8(fp)
    58e8:	e0ffff17 	ldw	r3,-4(fp)
    58ec:	1885883a 	add	r2,r3,r2
    58f0:	10800003 	ldbu	r2,0(r2)
    58f4:	10803fcc 	andi	r2,r2,255
    58f8:	1080201c 	xori	r2,r2,128
    58fc:	10bfe004 	addi	r2,r2,-128
    5900:	10000a1e 	bne	r2,zero,592c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    5904:	e0bffd17 	ldw	r2,-12(fp)
    5908:	10800217 	ldw	r2,8(r2)
    590c:	e0fffe17 	ldw	r3,-8(fp)
    5910:	180d883a 	mov	r6,r3
    5914:	e17fff17 	ldw	r5,-4(fp)
    5918:	1009883a 	mov	r4,r2
    591c:	0005b080 	call	5b08 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5920:	1000021e 	bne	r2,zero,592c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5924:	e0bffd17 	ldw	r2,-12(fp)
    5928:	00000706 	br	5948 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    592c:	e0bffd17 	ldw	r2,-12(fp)
    5930:	10800017 	ldw	r2,0(r2)
    5934:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5938:	e0fffd17 	ldw	r3,-12(fp)
    593c:	d0a00404 	addi	r2,gp,-32752
    5940:	18bfcc1e 	bne	r3,r2,5874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005874>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5944:	0005883a 	mov	r2,zero
}
    5948:	e037883a 	mov	sp,fp
    594c:	dfc00117 	ldw	ra,4(sp)
    5950:	df000017 	ldw	fp,0(sp)
    5954:	dec00204 	addi	sp,sp,8
    5958:	f800283a 	ret

0000595c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    595c:	defffa04 	addi	sp,sp,-24
    5960:	dfc00515 	stw	ra,20(sp)
    5964:	df000415 	stw	fp,16(sp)
    5968:	dc000315 	stw	r16,12(sp)
    596c:	df000404 	addi	fp,sp,16
    5970:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    5974:	00bffa04 	movi	r2,-24
    5978:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    597c:	e03ffc15 	stw	zero,-16(fp)
    5980:	00001d06 	br	59f8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    5984:	04000034 	movhi	r16,0
    5988:	8419dc04 	addi	r16,r16,26480
    598c:	e0bffc17 	ldw	r2,-16(fp)
    5990:	01400304 	movi	r5,12
    5994:	1009883a 	mov	r4,r2
    5998:	00030840 	call	3084 <__mulsi3>
    599c:	8085883a 	add	r2,r16,r2
    59a0:	10800017 	ldw	r2,0(r2)
    59a4:	1000111e 	bne	r2,zero,59ec <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    59a8:	04000034 	movhi	r16,0
    59ac:	8419dc04 	addi	r16,r16,26480
    59b0:	e0bffc17 	ldw	r2,-16(fp)
    59b4:	01400304 	movi	r5,12
    59b8:	1009883a 	mov	r4,r2
    59bc:	00030840 	call	3084 <__mulsi3>
    59c0:	8085883a 	add	r2,r16,r2
    59c4:	e0fffe17 	ldw	r3,-8(fp)
    59c8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    59cc:	d0e00817 	ldw	r3,-32736(gp)
    59d0:	e0bffc17 	ldw	r2,-16(fp)
    59d4:	1880020e 	bge	r3,r2,59e0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    59d8:	e0bffc17 	ldw	r2,-16(fp)
    59dc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    59e0:	e0bffc17 	ldw	r2,-16(fp)
    59e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    59e8:	00000606 	br	5a04 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    59ec:	e0bffc17 	ldw	r2,-16(fp)
    59f0:	10800044 	addi	r2,r2,1
    59f4:	e0bffc15 	stw	r2,-16(fp)
    59f8:	e0bffc17 	ldw	r2,-16(fp)
    59fc:	10800810 	cmplti	r2,r2,32
    5a00:	103fe01e 	bne	r2,zero,5984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005984>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5a04:	e0bffd17 	ldw	r2,-12(fp)
}
    5a08:	e6ffff04 	addi	sp,fp,-4
    5a0c:	dfc00217 	ldw	ra,8(sp)
    5a10:	df000117 	ldw	fp,4(sp)
    5a14:	dc000017 	ldw	r16,0(sp)
    5a18:	dec00304 	addi	sp,sp,12
    5a1c:	f800283a 	ret

00005a20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    5a20:	defffe04 	addi	sp,sp,-8
    5a24:	df000115 	stw	fp,4(sp)
    5a28:	df000104 	addi	fp,sp,4
    5a2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    5a30:	e0bfff17 	ldw	r2,-4(fp)
    5a34:	10bffe84 	addi	r2,r2,-6
    5a38:	10c00428 	cmpgeui	r3,r2,16
    5a3c:	18001a1e 	bne	r3,zero,5aa8 <alt_exception_cause_generated_bad_addr+0x88>
    5a40:	100690ba 	slli	r3,r2,2
    5a44:	00800034 	movhi	r2,0
    5a48:	10969604 	addi	r2,r2,23128
    5a4c:	1885883a 	add	r2,r3,r2
    5a50:	10800017 	ldw	r2,0(r2)
    5a54:	1000683a 	jmp	r2
    5a58:	00005a98 	cmpnei	zero,zero,362
    5a5c:	00005a98 	cmpnei	zero,zero,362
    5a60:	00005aa8 	cmpgeui	zero,zero,362
    5a64:	00005aa8 	cmpgeui	zero,zero,362
    5a68:	00005aa8 	cmpgeui	zero,zero,362
    5a6c:	00005a98 	cmpnei	zero,zero,362
    5a70:	00005aa0 	cmpeqi	zero,zero,362
    5a74:	00005aa8 	cmpgeui	zero,zero,362
    5a78:	00005a98 	cmpnei	zero,zero,362
    5a7c:	00005a98 	cmpnei	zero,zero,362
    5a80:	00005aa8 	cmpgeui	zero,zero,362
    5a84:	00005a98 	cmpnei	zero,zero,362
    5a88:	00005aa0 	cmpeqi	zero,zero,362
    5a8c:	00005aa8 	cmpgeui	zero,zero,362
    5a90:	00005aa8 	cmpgeui	zero,zero,362
    5a94:	00005a98 	cmpnei	zero,zero,362
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5a98:	00800044 	movi	r2,1
    5a9c:	00000306 	br	5aac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5aa0:	0005883a 	mov	r2,zero
    5aa4:	00000106 	br	5aac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    5aa8:	0005883a 	mov	r2,zero
  }
}
    5aac:	e037883a 	mov	sp,fp
    5ab0:	df000017 	ldw	fp,0(sp)
    5ab4:	dec00104 	addi	sp,sp,4
    5ab8:	f800283a 	ret

00005abc <atexit>:
    5abc:	200b883a 	mov	r5,r4
    5ac0:	000f883a 	mov	r7,zero
    5ac4:	000d883a 	mov	r6,zero
    5ac8:	0009883a 	mov	r4,zero
    5acc:	0005b841 	jmpi	5b84 <__register_exitproc>

00005ad0 <exit>:
    5ad0:	defffe04 	addi	sp,sp,-8
    5ad4:	000b883a 	mov	r5,zero
    5ad8:	dc000015 	stw	r16,0(sp)
    5adc:	dfc00115 	stw	ra,4(sp)
    5ae0:	2021883a 	mov	r16,r4
    5ae4:	0005c9c0 	call	5c9c <__call_exitprocs>
    5ae8:	00800034 	movhi	r2,0
    5aec:	109e9304 	addi	r2,r2,31308
    5af0:	11000017 	ldw	r4,0(r2)
    5af4:	20800f17 	ldw	r2,60(r4)
    5af8:	10000126 	beq	r2,zero,5b00 <exit+0x30>
    5afc:	103ee83a 	callr	r2
    5b00:	8009883a 	mov	r4,r16
    5b04:	0005e1c0 	call	5e1c <_exit>

00005b08 <memcmp>:
    5b08:	01c000c4 	movi	r7,3
    5b0c:	3980192e 	bgeu	r7,r6,5b74 <memcmp+0x6c>
    5b10:	2144b03a 	or	r2,r4,r5
    5b14:	11c4703a 	and	r2,r2,r7
    5b18:	10000f26 	beq	r2,zero,5b58 <memcmp+0x50>
    5b1c:	20800003 	ldbu	r2,0(r4)
    5b20:	28c00003 	ldbu	r3,0(r5)
    5b24:	10c0151e 	bne	r2,r3,5b7c <memcmp+0x74>
    5b28:	31bfff84 	addi	r6,r6,-2
    5b2c:	01ffffc4 	movi	r7,-1
    5b30:	00000406 	br	5b44 <memcmp+0x3c>
    5b34:	20800003 	ldbu	r2,0(r4)
    5b38:	28c00003 	ldbu	r3,0(r5)
    5b3c:	31bfffc4 	addi	r6,r6,-1
    5b40:	10c00e1e 	bne	r2,r3,5b7c <memcmp+0x74>
    5b44:	21000044 	addi	r4,r4,1
    5b48:	29400044 	addi	r5,r5,1
    5b4c:	31fff91e 	bne	r6,r7,5b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b34>
    5b50:	0005883a 	mov	r2,zero
    5b54:	f800283a 	ret
    5b58:	20c00017 	ldw	r3,0(r4)
    5b5c:	28800017 	ldw	r2,0(r5)
    5b60:	18bfee1e 	bne	r3,r2,5b1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b1c>
    5b64:	31bfff04 	addi	r6,r6,-4
    5b68:	21000104 	addi	r4,r4,4
    5b6c:	29400104 	addi	r5,r5,4
    5b70:	39bff936 	bltu	r7,r6,5b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b58>
    5b74:	303fe91e 	bne	r6,zero,5b1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b1c>
    5b78:	003ff506 	br	5b50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b50>
    5b7c:	10c5c83a 	sub	r2,r2,r3
    5b80:	f800283a 	ret

00005b84 <__register_exitproc>:
    5b84:	defffa04 	addi	sp,sp,-24
    5b88:	dc000315 	stw	r16,12(sp)
    5b8c:	04000034 	movhi	r16,0
    5b90:	841e9304 	addi	r16,r16,31308
    5b94:	80c00017 	ldw	r3,0(r16)
    5b98:	dc400415 	stw	r17,16(sp)
    5b9c:	dfc00515 	stw	ra,20(sp)
    5ba0:	18805217 	ldw	r2,328(r3)
    5ba4:	2023883a 	mov	r17,r4
    5ba8:	10003726 	beq	r2,zero,5c88 <__register_exitproc+0x104>
    5bac:	10c00117 	ldw	r3,4(r2)
    5bb0:	010007c4 	movi	r4,31
    5bb4:	20c00e16 	blt	r4,r3,5bf0 <__register_exitproc+0x6c>
    5bb8:	1a000044 	addi	r8,r3,1
    5bbc:	8800221e 	bne	r17,zero,5c48 <__register_exitproc+0xc4>
    5bc0:	18c00084 	addi	r3,r3,2
    5bc4:	18c7883a 	add	r3,r3,r3
    5bc8:	18c7883a 	add	r3,r3,r3
    5bcc:	12000115 	stw	r8,4(r2)
    5bd0:	10c7883a 	add	r3,r2,r3
    5bd4:	19400015 	stw	r5,0(r3)
    5bd8:	0005883a 	mov	r2,zero
    5bdc:	dfc00517 	ldw	ra,20(sp)
    5be0:	dc400417 	ldw	r17,16(sp)
    5be4:	dc000317 	ldw	r16,12(sp)
    5be8:	dec00604 	addi	sp,sp,24
    5bec:	f800283a 	ret
    5bf0:	00800034 	movhi	r2,0
    5bf4:	10800004 	addi	r2,r2,0
    5bf8:	10002626 	beq	r2,zero,5c94 <__register_exitproc+0x110>
    5bfc:	01006404 	movi	r4,400
    5c00:	d9400015 	stw	r5,0(sp)
    5c04:	d9800115 	stw	r6,4(sp)
    5c08:	d9c00215 	stw	r7,8(sp)
    5c0c:	00000000 	call	0 <__alt_mem_SDRAM>
    5c10:	d9400017 	ldw	r5,0(sp)
    5c14:	d9800117 	ldw	r6,4(sp)
    5c18:	d9c00217 	ldw	r7,8(sp)
    5c1c:	10001d26 	beq	r2,zero,5c94 <__register_exitproc+0x110>
    5c20:	81000017 	ldw	r4,0(r16)
    5c24:	10000115 	stw	zero,4(r2)
    5c28:	02000044 	movi	r8,1
    5c2c:	22405217 	ldw	r9,328(r4)
    5c30:	0007883a 	mov	r3,zero
    5c34:	12400015 	stw	r9,0(r2)
    5c38:	20805215 	stw	r2,328(r4)
    5c3c:	10006215 	stw	zero,392(r2)
    5c40:	10006315 	stw	zero,396(r2)
    5c44:	883fde26 	beq	r17,zero,5bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bc0>
    5c48:	18c9883a 	add	r4,r3,r3
    5c4c:	2109883a 	add	r4,r4,r4
    5c50:	1109883a 	add	r4,r2,r4
    5c54:	21802215 	stw	r6,136(r4)
    5c58:	01800044 	movi	r6,1
    5c5c:	12406217 	ldw	r9,392(r2)
    5c60:	30cc983a 	sll	r6,r6,r3
    5c64:	4992b03a 	or	r9,r9,r6
    5c68:	12406215 	stw	r9,392(r2)
    5c6c:	21c04215 	stw	r7,264(r4)
    5c70:	01000084 	movi	r4,2
    5c74:	893fd21e 	bne	r17,r4,5bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bc0>
    5c78:	11006317 	ldw	r4,396(r2)
    5c7c:	218cb03a 	or	r6,r4,r6
    5c80:	11806315 	stw	r6,396(r2)
    5c84:	003fce06 	br	5bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bc0>
    5c88:	18805304 	addi	r2,r3,332
    5c8c:	18805215 	stw	r2,328(r3)
    5c90:	003fc606 	br	5bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bac>
    5c94:	00bfffc4 	movi	r2,-1
    5c98:	003fd006 	br	5bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bdc>

00005c9c <__call_exitprocs>:
    5c9c:	defff504 	addi	sp,sp,-44
    5ca0:	df000915 	stw	fp,36(sp)
    5ca4:	dd400615 	stw	r21,24(sp)
    5ca8:	dc800315 	stw	r18,12(sp)
    5cac:	dfc00a15 	stw	ra,40(sp)
    5cb0:	ddc00815 	stw	r23,32(sp)
    5cb4:	dd800715 	stw	r22,28(sp)
    5cb8:	dd000515 	stw	r20,20(sp)
    5cbc:	dcc00415 	stw	r19,16(sp)
    5cc0:	dc400215 	stw	r17,8(sp)
    5cc4:	dc000115 	stw	r16,4(sp)
    5cc8:	d9000015 	stw	r4,0(sp)
    5ccc:	2839883a 	mov	fp,r5
    5cd0:	04800044 	movi	r18,1
    5cd4:	057fffc4 	movi	r21,-1
    5cd8:	00800034 	movhi	r2,0
    5cdc:	109e9304 	addi	r2,r2,31308
    5ce0:	12000017 	ldw	r8,0(r2)
    5ce4:	45005217 	ldw	r20,328(r8)
    5ce8:	44c05204 	addi	r19,r8,328
    5cec:	a0001c26 	beq	r20,zero,5d60 <__call_exitprocs+0xc4>
    5cf0:	a0800117 	ldw	r2,4(r20)
    5cf4:	15ffffc4 	addi	r23,r2,-1
    5cf8:	b8000d16 	blt	r23,zero,5d30 <__call_exitprocs+0x94>
    5cfc:	14000044 	addi	r16,r2,1
    5d00:	8421883a 	add	r16,r16,r16
    5d04:	8421883a 	add	r16,r16,r16
    5d08:	84402004 	addi	r17,r16,128
    5d0c:	a463883a 	add	r17,r20,r17
    5d10:	a421883a 	add	r16,r20,r16
    5d14:	e0001e26 	beq	fp,zero,5d90 <__call_exitprocs+0xf4>
    5d18:	80804017 	ldw	r2,256(r16)
    5d1c:	e0801c26 	beq	fp,r2,5d90 <__call_exitprocs+0xf4>
    5d20:	bdffffc4 	addi	r23,r23,-1
    5d24:	843fff04 	addi	r16,r16,-4
    5d28:	8c7fff04 	addi	r17,r17,-4
    5d2c:	bd7ff91e 	bne	r23,r21,5d14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d14>
    5d30:	00800034 	movhi	r2,0
    5d34:	10800004 	addi	r2,r2,0
    5d38:	10000926 	beq	r2,zero,5d60 <__call_exitprocs+0xc4>
    5d3c:	a0800117 	ldw	r2,4(r20)
    5d40:	1000301e 	bne	r2,zero,5e04 <__call_exitprocs+0x168>
    5d44:	a0800017 	ldw	r2,0(r20)
    5d48:	10003226 	beq	r2,zero,5e14 <__call_exitprocs+0x178>
    5d4c:	a009883a 	mov	r4,r20
    5d50:	98800015 	stw	r2,0(r19)
    5d54:	00000000 	call	0 <__alt_mem_SDRAM>
    5d58:	9d000017 	ldw	r20,0(r19)
    5d5c:	a03fe41e 	bne	r20,zero,5cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cf0>
    5d60:	dfc00a17 	ldw	ra,40(sp)
    5d64:	df000917 	ldw	fp,36(sp)
    5d68:	ddc00817 	ldw	r23,32(sp)
    5d6c:	dd800717 	ldw	r22,28(sp)
    5d70:	dd400617 	ldw	r21,24(sp)
    5d74:	dd000517 	ldw	r20,20(sp)
    5d78:	dcc00417 	ldw	r19,16(sp)
    5d7c:	dc800317 	ldw	r18,12(sp)
    5d80:	dc400217 	ldw	r17,8(sp)
    5d84:	dc000117 	ldw	r16,4(sp)
    5d88:	dec00b04 	addi	sp,sp,44
    5d8c:	f800283a 	ret
    5d90:	a0800117 	ldw	r2,4(r20)
    5d94:	80c00017 	ldw	r3,0(r16)
    5d98:	10bfffc4 	addi	r2,r2,-1
    5d9c:	15c01426 	beq	r2,r23,5df0 <__call_exitprocs+0x154>
    5da0:	80000015 	stw	zero,0(r16)
    5da4:	183fde26 	beq	r3,zero,5d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d20>
    5da8:	95c8983a 	sll	r4,r18,r23
    5dac:	a0806217 	ldw	r2,392(r20)
    5db0:	a5800117 	ldw	r22,4(r20)
    5db4:	2084703a 	and	r2,r4,r2
    5db8:	10000b26 	beq	r2,zero,5de8 <__call_exitprocs+0x14c>
    5dbc:	a0806317 	ldw	r2,396(r20)
    5dc0:	2088703a 	and	r4,r4,r2
    5dc4:	20000c1e 	bne	r4,zero,5df8 <__call_exitprocs+0x15c>
    5dc8:	89400017 	ldw	r5,0(r17)
    5dcc:	d9000017 	ldw	r4,0(sp)
    5dd0:	183ee83a 	callr	r3
    5dd4:	a0800117 	ldw	r2,4(r20)
    5dd8:	15bfbf1e 	bne	r2,r22,5cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cd8>
    5ddc:	98800017 	ldw	r2,0(r19)
    5de0:	153fcf26 	beq	r2,r20,5d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d20>
    5de4:	003fbc06 	br	5cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cd8>
    5de8:	183ee83a 	callr	r3
    5dec:	003ff906 	br	5dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005dd4>
    5df0:	a5c00115 	stw	r23,4(r20)
    5df4:	003feb06 	br	5da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005da4>
    5df8:	89000017 	ldw	r4,0(r17)
    5dfc:	183ee83a 	callr	r3
    5e00:	003ff406 	br	5dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005dd4>
    5e04:	a0800017 	ldw	r2,0(r20)
    5e08:	a027883a 	mov	r19,r20
    5e0c:	1029883a 	mov	r20,r2
    5e10:	003fb606 	br	5cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cec>
    5e14:	0005883a 	mov	r2,zero
    5e18:	003ffb06 	br	5e08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e08>

00005e1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5e1c:	defffd04 	addi	sp,sp,-12
    5e20:	df000215 	stw	fp,8(sp)
    5e24:	df000204 	addi	fp,sp,8
    5e28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5e2c:	0001883a 	nop
    5e30:	e0bfff17 	ldw	r2,-4(fp)
    5e34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    5e38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5e3c:	10000226 	beq	r2,zero,5e48 <_exit+0x2c>
    ALT_SIM_FAIL();
    5e40:	002af070 	cmpltui	zero,zero,43969
    5e44:	00000106 	br	5e4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    5e48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5e4c:	003fff06 	br	5e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e4c>
